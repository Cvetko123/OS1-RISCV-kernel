GAS LISTING /tmp/ccbBQbSz.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB30:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 9/8/25.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../lib/console.h"
   7:src/Riscv.cpp **** #include "../h/syscall_c.hpp"
   8:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   9:src/Riscv.cpp **** #include  "../h/print.hpp"
  10:src/Riscv.cpp **** using Body=void(*)(void*);
  11:src/Riscv.cpp **** 
  12:src/Riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 12 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/Riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 13 5
  21              		.loc 1 13 38 is_stmt 0
  22              	#APP
  23              	# 13 "src/Riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 14 5 is_stmt 1
  27              		.loc 1 14 29 is_stmt 0
  28              	# 14 "src/Riscv.cpp" 1
  15              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 15 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE30:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
GAS LISTING /tmp/ccbBQbSz.s 			page 2


  45 0000 73636175 		.string	"scause:"
  45      73653A00 
  46              		.align	3
  47              	.LC1:
  48 0008 0A00     		.string	"\n"
  49 000a 00000000 		.align	3
  49      0000
  50              	.LC2:
  51 0010 73747661 		.string	"stval:"
  51      6C3A00
  52 0017 00       		.align	3
  53              	.LC3:
  54 0018 73657063 		.string	"sepc:"
  54      3A00
  55              		.text
  56              		.align	2
  57              		.globl	_ZN5Riscv21SupervisorTrapHandlerEv
  59              	_ZN5Riscv21SupervisorTrapHandlerEv:
  60              	.LFB31:
  16:src/Riscv.cpp **** 
  17:src/Riscv.cpp **** // void Riscv::restorePrivilege()
  18:src/Riscv.cpp **** // {
  19:src/Riscv.cpp **** //     if(TCB::running->isSysThread())
  20:src/Riscv.cpp **** //         ms_sstatus(SSTATUS_SPP);
  21:src/Riscv.cpp **** //     else
  22:src/Riscv.cpp **** //         mc_sstatus(SSTATUS_SPP);
  23:src/Riscv.cpp **** // }
  24:src/Riscv.cpp **** 
  25:src/Riscv.cpp **** 
  26:src/Riscv.cpp **** void Riscv::SupervisorTrapHandler() {
  61              		.loc 1 26 37 is_stmt 1
  62              		.cfi_startproc
  63 0020 130101FA 		addi	sp,sp,-96
  64              		.cfi_def_cfa_offset 96
  65 0024 233C1104 		sd	ra,88(sp)
  66 0028 23388104 		sd	s0,80(sp)
  67 002c 23349104 		sd	s1,72(sp)
  68 0030 23302105 		sd	s2,64(sp)
  69 0034 233C3103 		sd	s3,56(sp)
  70 0038 23384103 		sd	s4,48(sp)
  71 003c 23345103 		sd	s5,40(sp)
  72              		.cfi_offset 1, -8
  73              		.cfi_offset 8, -16
  74              		.cfi_offset 9, -24
  75              		.cfi_offset 18, -32
  76              		.cfi_offset 19, -40
  77              		.cfi_offset 20, -48
  78              		.cfi_offset 21, -56
  79 0040 13040106 		addi	s0,sp,96
  80              		.cfi_def_cfa 8, 0
  27:src/Riscv.cpp ****     uint64 sepc;
  81              		.loc 1 27 5
  28:src/Riscv.cpp ****     uint64 sstatus;
  82              		.loc 1 28 5
  29:src/Riscv.cpp ****     uint64 scause=get_scause();
  83              		.loc 1 29 5
  84              	.LBB51:
GAS LISTING /tmp/ccbBQbSz.s 			page 3


  85              	.LBB52:
  86              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 9/8/25.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_COPY_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_COPY_RISCV_HPP
   7:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   8:src/../h/Riscv.hpp **** 
   9:src/../h/Riscv.hpp **** class Riscv {
  10:src/../h/Riscv.hpp **** public:
  11:src/../h/Riscv.hpp ****     static void set_stvec(uint64 stvec);
  12:src/../h/Riscv.hpp ****     static void set_sepc(uint64 sepc);
  13:src/../h/Riscv.hpp ****     static uint64 get_sepc();
  14:src/../h/Riscv.hpp ****     static void set_sstatus(uint64 sstatus);
  15:src/../h/Riscv.hpp ****     static uint64 get_sstatus();
  16:src/../h/Riscv.hpp ****     static uint64 get_scause();
  17:src/../h/Riscv.hpp ****     static uint64 get_stval();
  18:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  19:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  20:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  21:src/../h/Riscv.hpp ****     static void ms_sie(uint64 mask);
  22:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  23:src/../h/Riscv.hpp ****     {
  24:src/../h/Riscv.hpp ****         SSTATUS_SIE=(1UL<<1),
  25:src/../h/Riscv.hpp ****         SSTATUS_SPIE=(1UL<<5),
  26:src/../h/Riscv.hpp ****         SSTATUS_SPP=(1UL<<8)
  27:src/../h/Riscv.hpp ****     };
  28:src/../h/Riscv.hpp ****     enum BitMaskSip: uint64
  29:src/../h/Riscv.hpp ****     {
  30:src/../h/Riscv.hpp ****         SIP_SSIP=(1UL<<1),
  31:src/../h/Riscv.hpp ****         SIP_STIP=(1UL<<5),
  32:src/../h/Riscv.hpp ****         SIP_SEIP=(1UL<<9)
  33:src/../h/Riscv.hpp ****     };
  34:src/../h/Riscv.hpp ****     enum BitMaskSie: uint64
  35:src/../h/Riscv.hpp ****     {
  36:src/../h/Riscv.hpp ****         SIE_SSIE=(1UL<<1),
  37:src/../h/Riscv.hpp ****         SIE_SEIE=(1UL<<9)
  38:src/../h/Riscv.hpp ****     };
  39:src/../h/Riscv.hpp **** 
  40:src/../h/Riscv.hpp **** 
  41:src/../h/Riscv.hpp ****     static void SupervisorTrap();
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp ****     static void restorePrivilege();
  44:src/../h/Riscv.hpp ****     static void popSppSpie();
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp **** 
  47:src/../h/Riscv.hpp **** 
  48:src/../h/Riscv.hpp ****     static void SupervisorTrapHandler();
  49:src/../h/Riscv.hpp **** };
  50:src/../h/Riscv.hpp **** 
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp **** inline void Riscv::set_stvec(uint64 stvec) {
  53:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[x]" :: [x] "r" (stvec));
  54:src/../h/Riscv.hpp **** }
  55:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccbBQbSz.s 			page 4


  56:src/../h/Riscv.hpp **** inline void Riscv::set_sepc(uint64 sepc) {
  57:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[x]" :: [x] "r" (sepc));
  58:src/../h/Riscv.hpp **** }
  59:src/../h/Riscv.hpp **** 
  60:src/../h/Riscv.hpp **** inline uint64 Riscv::get_sepc() {
  61:src/../h/Riscv.hpp ****     uint64 sepc;
  62:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sepc" : [x] "=r" (sepc));
  63:src/../h/Riscv.hpp ****     return sepc;
  64:src/../h/Riscv.hpp **** }
  65:src/../h/Riscv.hpp **** 
  66:src/../h/Riscv.hpp **** inline void Riscv::set_sstatus(uint64 sstatus) {
  67:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[x]" :: [x] "r" (sstatus));
  68:src/../h/Riscv.hpp **** }
  69:src/../h/Riscv.hpp **** 
  70:src/../h/Riscv.hpp **** inline uint64 Riscv::get_sstatus() {
  71:src/../h/Riscv.hpp ****     uint64 sstatus;
  72:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sstatus" : [x] "=r" (sstatus));
  73:src/../h/Riscv.hpp ****     return sstatus;
  74:src/../h/Riscv.hpp **** }
  75:src/../h/Riscv.hpp **** 
  76:src/../h/Riscv.hpp **** inline uint64 Riscv::get_scause() {
  77:src/../h/Riscv.hpp ****     uint64 volatile scause;
  87              		.loc 2 77 5
  78:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %[scause], scause":[scause]"=r"(scause));
  88              		.loc 2 78 5
  89              		.loc 2 78 68 is_stmt 0
  90              	#APP
  91              	# 78 "src/../h/Riscv.hpp" 1
  79              	    return scause;
  92              		csrr a5, scause
  93              	# 0 "" 2
  94              	#NO_APP
  95 0048 2334F4FA 		sd	a5,-88(s0)
  96              		.loc 2 79 5 is_stmt 1
  97              		.loc 2 79 12 is_stmt 0
  98 004c 033784FA 		ld	a4,-88(s0)
  99              	.LVL0:
 100              	.LBE52:
 101              	.LBE51:
  30:src/Riscv.cpp ****     sepc=get_sepc();
 102              		.loc 1 30 5 is_stmt 1
 103              	.LBB53:
 104              	.LBB54:
  61:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sepc" : [x] "=r" (sepc));
 105              		.loc 2 61 5
  62:src/../h/Riscv.hpp ****     return sepc;
 106              		.loc 2 62 5
  62:src/../h/Riscv.hpp ****     return sepc;
 107              		.loc 2 62 58 is_stmt 0
 108              	#APP
 109              	# 62 "src/../h/Riscv.hpp" 1
 110              		csrr s1,sepc
 111              	# 0 "" 2
 112              	.LVL1:
  63:src/../h/Riscv.hpp **** }
 113              		.loc 2 63 5 is_stmt 1
 114              	#NO_APP
GAS LISTING /tmp/ccbBQbSz.s 			page 5


 115              	.LBE54:
 116              	.LBE53:
  31:src/Riscv.cpp ****     sstatus=get_sstatus();
 117              		.loc 1 31 5
 118              	.LBB55:
 119              	.LBB56:
  71:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sstatus" : [x] "=r" (sstatus));
 120              		.loc 2 71 5
  72:src/../h/Riscv.hpp ****     return sstatus;
 121              		.loc 2 72 5
  72:src/../h/Riscv.hpp ****     return sstatus;
 122              		.loc 2 72 64 is_stmt 0
 123              	#APP
 124              	# 72 "src/../h/Riscv.hpp" 1
 125              		csrr s2,sstatus
 126              	# 0 "" 2
 127              	.LVL2:
  73:src/../h/Riscv.hpp **** }
 128              		.loc 2 73 5 is_stmt 1
 129              	#NO_APP
 130              	.LBE56:
 131              	.LBE55:
  32:src/Riscv.cpp ****     if (scause == 0x8000000000000001UL) {
 132              		.loc 1 32 5
 133              	.LBB57:
 134 0058 9307F0FF 		li	a5,-1
 135 005c 9397F703 		slli	a5,a5,63
 136 0060 93871700 		addi	a5,a5,1
 137 0064 630CF710 		beq	a4,a5,.L25
 138              	.LBE57:
  33:src/Riscv.cpp ****         // interrupt from timer
  34:src/Riscv.cpp ****         TCB::timeCounter++;
  35:src/Riscv.cpp ****         if (TCB::timeCounter >= TCB::running->getTimeSlice()) {
  36:src/Riscv.cpp ****             TCB::dispatch();
  37:src/Riscv.cpp ****             set_sepc(sepc);
  38:src/Riscv.cpp ****             set_sstatus(sstatus);
  39:src/Riscv.cpp ****         }
  40:src/Riscv.cpp ****         mc_sip(SIP_SSIP);
  41:src/Riscv.cpp ****     }
  42:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL) {
 139              		.loc 1 42 10
 140              	.LBB193:
 141              	.LBB58:
 142 0068 9307F0FF 		li	a5,-1
 143 006c 9397F703 		slli	a5,a5,63
 144 0070 93879700 		addi	a5,a5,9
 145 0074 6308F714 		beq	a4,a5,.L26
 146              	.LBB59:
  43:src/Riscv.cpp ****         // interrupt from keyboard
  44:src/Riscv.cpp ****         console_handler();
  45:src/Riscv.cpp ****     }
  46:src/Riscv.cpp ****     else {
  47:src/Riscv.cpp ****         uint64 syscode;
 147              		.loc 1 47 9
  48:src/Riscv.cpp ****     __asm__ volatile ("mv %[x], a0" : [x] "=r" (syscode));
 148              		.loc 1 48 5
 149              		.loc 1 48 58 is_stmt 0
GAS LISTING /tmp/ccbBQbSz.s 			page 6


 150              	#APP
 151              	# 48 "src/Riscv.cpp" 1
  49              	
 152              		mv a5, a0
 153              	# 0 "" 2
 154              	.LVL3:
  50:src/Riscv.cpp ****     if (syscode==MEM_ALLOC) {
 155              		.loc 1 50 5 is_stmt 1
 156              	#NO_APP
 157              	.LBB60:
 158 007c 13071000 		li	a4,1
 159              	.LVL4:
 160 0080 6388E714 		beq	a5,a4,.L27
 161              	.LBE60:
 162              	.LBE59:
 163              	.LBE58:
 164              	.LBE193:
  51:src/Riscv.cpp ****         size_t size_in_blocks;
  52:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (size_in_blocks));
  53:src/Riscv.cpp ****         void* ptr = MemoryAllocator::Instance()->mem_alloc(size_in_blocks * MEM_BLOCK_SIZE);
  54:src/Riscv.cpp ****         __asm__ volatile ("mv a0,%[x]" :: [x] "r" (ptr));
  55:src/Riscv.cpp ****     }
  56:src/Riscv.cpp ****     else if (syscode==MEM_FREE) {
 165              		.loc 1 56 10
 166              	.LBB194:
 167              	.LBB173:
 168              	.LBB161:
 169              	.LBB145:
 170              	.LBB61:
 171 0084 13072000 		li	a4,2
 172 0088 638AE718 		beq	a5,a4,.L28
 173              	.LBE61:
 174              	.LBE145:
 175              	.LBE161:
 176              	.LBE173:
 177              	.LBE194:
  57:src/Riscv.cpp ****         void* ptr;
  58:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (ptr));
  59:src/Riscv.cpp ****         MemoryAllocator::Instance()->mem_free(ptr);
  60:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (0));
  61:src/Riscv.cpp ****     }
  62:src/Riscv.cpp ****     else if (syscode==MEM_GET_FREE_SPACE) {
 178              		.loc 1 62 10
 179              	.LBB195:
 180              	.LBB174:
 181              	.LBB162:
 182              	.LBB146:
 183              	.LBB134:
 184              	.LBB62:
 185 008c 13073000 		li	a4,3
 186 0090 6388E71A 		beq	a5,a4,.L29
 187              	.LBE62:
 188              	.LBE134:
 189              	.LBE146:
 190              	.LBE162:
 191              	.LBE174:
 192              	.LBE195:
GAS LISTING /tmp/ccbBQbSz.s 			page 7


  63:src/Riscv.cpp ****         size_t freeMem = MemoryAllocator::Instance()->getFreeMemSize();
  64:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (freeMem));
  65:src/Riscv.cpp ****     }
  66:src/Riscv.cpp ****     else if (syscode==MEM_GET_LARGEST_FREE_BLOCK) {
 193              		.loc 1 66 10
 194              	.LBB196:
 195              	.LBB175:
 196              	.LBB163:
 197              	.LBB147:
 198              	.LBB135:
 199              	.LBB124:
 200              	.LBB63:
 201 0094 13074000 		li	a4,4
 202 0098 638EE71A 		beq	a5,a4,.L30
 203              	.LBE63:
 204              	.LBE124:
 205              	.LBE135:
 206              	.LBE147:
 207              	.LBE163:
 208              	.LBE175:
 209              	.LBE196:
  67:src/Riscv.cpp ****         size_t largestBlock = MemoryAllocator::Instance()->getLargestFreeBlock();
  68:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (largestBlock));
  69:src/Riscv.cpp ****     }
  70:src/Riscv.cpp ****     else if (syscode==THREAD_CREATE) {
 210              		.loc 1 70 10
 211              	.LBB197:
 212              	.LBB176:
 213              	.LBB164:
 214              	.LBB148:
 215              	.LBB136:
 216              	.LBB125:
 217              	.LBB113:
 218              	.LBB64:
 219 009c 13071001 		li	a4,17
 220 00a0 6386E71C 		beq	a5,a4,.L31
 221              	.LBE64:
 222              	.LBE113:
 223              	.LBE125:
 224              	.LBE136:
 225              	.LBE148:
 226              	.LBE164:
 227              	.LBE176:
 228              	.LBE197:
  71:src/Riscv.cpp ****         thread_t* handle;
  72:src/Riscv.cpp ****         Body start_routine;
  73:src/Riscv.cpp ****         void* arg;
  74:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
  75:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (start_routine));
  76:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a3" : [x] "=r" (arg));
  77:src/Riscv.cpp **** 
  78:src/Riscv.cpp ****         uint64 *sp=(uint64*)MemoryAllocator::Instance()->mem_alloc(DEFAULT_STACK_SIZE);
  79:src/Riscv.cpp **** 
  80:src/Riscv.cpp **** 
  81:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
  82:src/Riscv.cpp ****         int ret=0;
  83:src/Riscv.cpp ****         if (*handle) {
GAS LISTING /tmp/ccbBQbSz.s 			page 8


  84:src/Riscv.cpp ****             ret=0;
  85:src/Riscv.cpp ****         }
  86:src/Riscv.cpp ****         else {
  87:src/Riscv.cpp ****             ret=1;
  88:src/Riscv.cpp ****         }
  89:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
  90:src/Riscv.cpp ****     }
  91:src/Riscv.cpp ****     else if (syscode==THREAD_EXIT) {
 229              		.loc 1 91 10
 230              	.LBB198:
 231              	.LBB177:
 232              	.LBB165:
 233              	.LBB149:
 234              	.LBB137:
 235              	.LBB126:
 236              	.LBB114:
 237              	.LBB105:
 238              	.LBB65:
 239 00a4 13072001 		li	a4,18
 240 00a8 638AE720 		beq	a5,a4,.L32
 241              	.LBE65:
 242              	.LBE105:
 243              	.LBE114:
 244              	.LBE126:
 245              	.LBE137:
 246              	.LBE149:
 247              	.LBE165:
 248              	.LBE177:
 249              	.LBE198:
  92:src/Riscv.cpp ****         int ret = TCB::exit();
  93:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
  94:src/Riscv.cpp ****     }
  95:src/Riscv.cpp ****     else if (syscode==THREAD_DISPATCH) {
 250              		.loc 1 95 10
 251              	.LBB199:
 252              	.LBB178:
 253              	.LBB166:
 254              	.LBB150:
 255              	.LBB138:
 256              	.LBB127:
 257              	.LBB115:
 258              	.LBB106:
 259              	.LBB97:
 260              	.LBB66:
 261 00ac 13073001 		li	a4,19
 262 00b0 638EE720 		beq	a5,a4,.L33
 263              	.LBE66:
 264              	.LBE97:
 265              	.LBE106:
 266              	.LBE115:
 267              	.LBE127:
 268              	.LBE138:
 269              	.LBE150:
 270              	.LBE166:
 271              	.LBE178:
 272              	.LBE199:
  96:src/Riscv.cpp ****         TCB::dispatch();
GAS LISTING /tmp/ccbBQbSz.s 			page 9


  97:src/Riscv.cpp ****     }
  98:src/Riscv.cpp ****     else if (syscode==SEM_OPEN) {
 273              		.loc 1 98 10
 274              	.LBB200:
 275              	.LBB179:
 276              	.LBB167:
 277              	.LBB151:
 278              	.LBB139:
 279              	.LBB128:
 280              	.LBB116:
 281              	.LBB107:
 282              	.LBB98:
 283              	.LBB91:
 284              	.LBB67:
 285 00b4 13071002 		li	a4,33
 286 00b8 6380E722 		beq	a5,a4,.L34
 287              	.LBE67:
 288              	.LBE91:
 289              	.LBE98:
 290              	.LBE107:
 291              	.LBE116:
 292              	.LBE128:
 293              	.LBE139:
 294              	.LBE151:
 295              	.LBE167:
 296              	.LBE179:
 297              	.LBE200:
  99:src/Riscv.cpp ****         sem_t* handle;
 100:src/Riscv.cpp ****         unsigned init;
 101:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 102:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (init));
 103:src/Riscv.cpp **** 
 104:src/Riscv.cpp ****         *handle=SEM::open(init);
 105:src/Riscv.cpp ****         int ret=0;
 106:src/Riscv.cpp ****         if (*handle) {
 107:src/Riscv.cpp ****             ret=0;
 108:src/Riscv.cpp ****         }
 109:src/Riscv.cpp ****         else {
 110:src/Riscv.cpp ****             ret=1;
 111:src/Riscv.cpp ****         }
 112:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 113:src/Riscv.cpp ****     }
 114:src/Riscv.cpp ****     else if (syscode==SEM_CLOSE) {
 298              		.loc 1 114 10
 299              	.LBB201:
 300              	.LBB180:
 301              	.LBB168:
 302              	.LBB152:
 303              	.LBB140:
 304              	.LBB129:
 305              	.LBB117:
 306              	.LBB108:
 307              	.LBB99:
 308              	.LBB92:
 309              	.LBB87:
 310              	.LBB68:
 311 00bc 13072002 		li	a4,34
GAS LISTING /tmp/ccbBQbSz.s 			page 10


 312 00c0 6384E724 		beq	a5,a4,.L35
 313              	.LBE68:
 314              	.LBE87:
 315              	.LBE92:
 316              	.LBE99:
 317              	.LBE108:
 318              	.LBE117:
 319              	.LBE129:
 320              	.LBE140:
 321              	.LBE152:
 322              	.LBE168:
 323              	.LBE180:
 324              	.LBE201:
 115:src/Riscv.cpp ****         sem_t handle;
 116:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 117:src/Riscv.cpp ****         int ret=handle->close();
 118:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 119:src/Riscv.cpp ****     }
 120:src/Riscv.cpp ****     else if (syscode==SEM_WAIT) {
 325              		.loc 1 120 10
 326              	.LBB202:
 327              	.LBB181:
 328              	.LBB169:
 329              	.LBB153:
 330              	.LBB141:
 331              	.LBB130:
 332              	.LBB118:
 333              	.LBB109:
 334              	.LBB100:
 335              	.LBB93:
 336              	.LBB88:
 337              	.LBB82:
 338              	.LBB69:
 339 00c4 13073002 		li	a4,35
 340 00c8 638AE724 		beq	a5,a4,.L36
 341              	.LBE69:
 342              	.LBE82:
 343              	.LBE88:
 344              	.LBE93:
 345              	.LBE100:
 346              	.LBE109:
 347              	.LBE118:
 348              	.LBE130:
 349              	.LBE141:
 350              	.LBE153:
 351              	.LBE169:
 352              	.LBE181:
 353              	.LBE202:
 121:src/Riscv.cpp ****         sem_t handle;
 122:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 123:src/Riscv.cpp ****         int ret=handle->wait();
 124:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 125:src/Riscv.cpp ****     }
 126:src/Riscv.cpp ****     else if (syscode==SEM_SIGNAL) {
 354              		.loc 1 126 10
 355              	.LBB203:
 356              	.LBB182:
GAS LISTING /tmp/ccbBQbSz.s 			page 11


 357              	.LBB170:
 358              	.LBB154:
 359              	.LBB142:
 360              	.LBB131:
 361              	.LBB119:
 362              	.LBB110:
 363              	.LBB101:
 364              	.LBB94:
 365              	.LBB89:
 366              	.LBB83:
 367              	.LBB79:
 368              	.LBB70:
 369 00cc 13074002 		li	a4,36
 370 00d0 6380E726 		beq	a5,a4,.L37
 371              	.LBB71:
 127:src/Riscv.cpp ****         sem_t handle;
 128:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 129:src/Riscv.cpp ****         int ret=handle->signal();
 130:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 131:src/Riscv.cpp ****     }
 132:src/Riscv.cpp ****     else {
 133:src/Riscv.cpp ****         uint64 scause= get_scause();
 372              		.loc 1 133 9
 373              	.LBB72:
 374              	.LBB73:
  77:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %[scause], scause":[scause]"=r"(scause));
 375              		.loc 2 77 5
  78:src/../h/Riscv.hpp ****     return scause;
 376              		.loc 2 78 5
  78:src/../h/Riscv.hpp ****     return scause;
 377              		.loc 2 78 68 is_stmt 0
 378              	#APP
 379              	# 78 "src/../h/Riscv.hpp" 1
 380              		csrr a5, scause
 381              	# 0 "" 2
 382              	.LVL5:
 383              	#NO_APP
 384 00d8 233CF4FA 		sd	a5,-72(s0)
 385              		.loc 2 79 5 is_stmt 1
 386              		.loc 2 79 12 is_stmt 0
 387 00dc 033A84FB 		ld	s4,-72(s0)
 388              	.LVL6:
 389              	.LBE73:
 390              	.LBE72:
 134:src/Riscv.cpp ****         uint64 stval= get_stval();
 391              		.loc 1 134 9 is_stmt 1
 392              	.LBB74:
 393              	.LBB75:
  80:src/../h/Riscv.hpp **** }
  81:src/../h/Riscv.hpp **** inline uint64 Riscv::get_stval() {
  82:src/../h/Riscv.hpp ****     uint64 volatile stval;
 394              		.loc 2 82 5
  83:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %[stval], stval":[stval]"=r"(stval));
 395              		.loc 2 83 5
 396              		.loc 2 83 64 is_stmt 0
 397              	#APP
 398              	# 83 "src/../h/Riscv.hpp" 1
GAS LISTING /tmp/ccbBQbSz.s 			page 12


  84              	    return stval;
 399              		csrr a5, stval
 400              	# 0 "" 2
 401              	#NO_APP
 402 00e4 2338F4FA 		sd	a5,-80(s0)
 403              		.loc 2 84 5 is_stmt 1
 404              		.loc 2 84 12 is_stmt 0
 405 00e8 833904FB 		ld	s3,-80(s0)
 406              	.LVL7:
 407              	.LBE75:
 408              	.LBE74:
 135:src/Riscv.cpp ****         pprintString("scause:");
 409              		.loc 1 135 9 is_stmt 1
 410              		.loc 1 135 21 is_stmt 0
 411 00ec 17050000 		lla	a0,.LC0
 411      13050500 
 412 00f4 97000000 		call	_Z12pprintStringPKc@plt
 412      E7800000 
 413              	.LVL8:
 136:src/Riscv.cpp ****         printInteger(scause);
 414              		.loc 1 136 9 is_stmt 1
 415              		.loc 1 136 21 is_stmt 0
 416 00fc 13050A00 		mv	a0,s4
 417 0100 97000000 		call	_Z12printIntegerm@plt
 417      E7800000 
 418              	.LVL9:
 137:src/Riscv.cpp ****         pprintString("\n");
 419              		.loc 1 137 9 is_stmt 1
 420              		.loc 1 137 21 is_stmt 0
 421 0108 17050000 		lla	a0,.LC1
 421      13050500 
 422 0110 97000000 		call	_Z12pprintStringPKc@plt
 422      E7800000 
 423              	.LVL10:
 138:src/Riscv.cpp **** 
 139:src/Riscv.cpp ****         pprintString("stval:");
 424              		.loc 1 139 9 is_stmt 1
 425              		.loc 1 139 21 is_stmt 0
 426 0118 17050000 		lla	a0,.LC2
 426      13050500 
 427 0120 97000000 		call	_Z12pprintStringPKc@plt
 427      E7800000 
 428              	.LVL11:
 140:src/Riscv.cpp ****         printInteger(stval);
 429              		.loc 1 140 9 is_stmt 1
 430              		.loc 1 140 21 is_stmt 0
 431 0128 13850900 		mv	a0,s3
 432 012c 97000000 		call	_Z12printIntegerm@plt
 432      E7800000 
 433              	.LVL12:
 141:src/Riscv.cpp ****         pprintString("\n");
 434              		.loc 1 141 9 is_stmt 1
 435              		.loc 1 141 21 is_stmt 0
 436 0134 17050000 		lla	a0,.LC1
 436      13050500 
 437 013c 97000000 		call	_Z12pprintStringPKc@plt
 437      E7800000 
GAS LISTING /tmp/ccbBQbSz.s 			page 13


 438              	.LVL13:
 142:src/Riscv.cpp **** 
 143:src/Riscv.cpp ****         pprintString("sepc:");
 439              		.loc 1 143 9 is_stmt 1
 440              		.loc 1 143 21 is_stmt 0
 441 0144 17050000 		lla	a0,.LC3
 441      13050500 
 442 014c 97000000 		call	_Z12pprintStringPKc@plt
 442      E7800000 
 443              	.LVL14:
 144:src/Riscv.cpp ****         printInteger(sepc);
 444              		.loc 1 144 9 is_stmt 1
 445              		.loc 1 144 21 is_stmt 0
 446 0154 13850400 		mv	a0,s1
 447 0158 97000000 		call	_Z12printIntegerm@plt
 447      E7800000 
 448              	.LVL15:
 145:src/Riscv.cpp ****         pprintString("\n");
 449              		.loc 1 145 9 is_stmt 1
 450              		.loc 1 145 21 is_stmt 0
 451 0160 17050000 		lla	a0,.LC1
 451      13050500 
 452 0168 97000000 		call	_Z12pprintStringPKc@plt
 452      E7800000 
 453              	.LVL16:
 146:src/Riscv.cpp ****         __getc();
 454              		.loc 1 146 9 is_stmt 1
 455              		.loc 1 146 15 is_stmt 0
 456 0170 97000000 		call	__getc@plt
 456      E7800000 
 457              	.LVL17:
 458 0178 6F004007 		j	.L9
 459              	.LVL18:
 460              	.L25:
 461              	.LBE71:
 462              	.LBE70:
 463              	.LBE79:
 464              	.LBE83:
 465              	.LBE89:
 466              	.LBE94:
 467              	.LBE101:
 468              	.LBE110:
 469              	.LBE119:
 470              	.LBE131:
 471              	.LBE142:
 472              	.LBE154:
 473              	.LBE170:
 474              	.LBE182:
  34:src/Riscv.cpp ****         if (TCB::timeCounter >= TCB::running->getTimeSlice()) {
 475              		.loc 1 34 9 is_stmt 1
  34:src/Riscv.cpp ****         if (TCB::timeCounter >= TCB::running->getTimeSlice()) {
 476              		.loc 1 34 25 is_stmt 0
 477 017c 17070000 		la	a4,_ZN3TCB11timeCounterE
 477      03370700 
 478              	.LVL19:
 479 0184 83370700 		ld	a5,0(a4)
 480 0188 93871700 		addi	a5,a5,1
GAS LISTING /tmp/ccbBQbSz.s 			page 14


 481 018c 2330F700 		sd	a5,0(a4)
  35:src/Riscv.cpp ****             TCB::dispatch();
 482              		.loc 1 35 9 is_stmt 1
  35:src/Riscv.cpp ****             TCB::dispatch();
 483              		.loc 1 35 59 is_stmt 0
 484 0190 17070000 		la	a4,_ZN3TCB7runningE
 484      03370700 
 485 0198 03370700 		ld	a4,0(a4)
 486              	.LVL20:
 487              	.LBB183:
 488              	.LBB184:
 489              		.file 3 "src/../h/TCB.hpp"
   1:src/../h/TCB.hpp **** //
   2:src/../h/TCB.hpp **** // Created by os on 9/23/25.
   3:src/../h/TCB.hpp **** //
   4:src/../h/TCB.hpp **** 
   5:src/../h/TCB.hpp **** #ifndef PROJECT_BASE_V1_1_COPY_TCB_HPP
   6:src/../h/TCB.hpp **** #define PROJECT_BASE_V1_1_COPY_TCB_HPP
   7:src/../h/TCB.hpp **** #include "../lib/hw.h"
   8:src/../h/TCB.hpp **** #include "../h/Scheduler.hpp"
   9:src/../h/TCB.hpp **** #include "../h/MemoryAllocator.hpp"
  10:src/../h/TCB.hpp **** 
  11:src/../h/TCB.hpp **** class TCB
  12:src/../h/TCB.hpp **** {
  13:src/../h/TCB.hpp **** public:
  14:src/../h/TCB.hpp ****     void* operator new(size_t size)
  15:src/../h/TCB.hpp **** {
  16:src/../h/TCB.hpp ****     return MemoryAllocator::Instance()->mem_alloc(size);
  17:src/../h/TCB.hpp **** }
  18:src/../h/TCB.hpp **** 
  19:src/../h/TCB.hpp ****     void operator delete(void* ptr)
  20:src/../h/TCB.hpp ****     {
  21:src/../h/TCB.hpp ****         return MemoryAllocator::Instance()->mem_free(ptr);
  22:src/../h/TCB.hpp ****     }
  23:src/../h/TCB.hpp **** 
  24:src/../h/TCB.hpp **** 
  25:src/../h/TCB.hpp ****     using Body=void(*)(void*);
  26:src/../h/TCB.hpp **** 
  27:src/../h/TCB.hpp ****     ~TCB()
  28:src/../h/TCB.hpp ****     {
  29:src/../h/TCB.hpp ****         delete stack;
  30:src/../h/TCB.hpp ****     }
  31:src/../h/TCB.hpp **** 
  32:src/../h/TCB.hpp ****     static TCB* createThread(Body body, void* arg, uint64* stack);
  33:src/../h/TCB.hpp **** 
  34:src/../h/TCB.hpp ****     static void dispatch();
  35:src/../h/TCB.hpp ****     static int exit();
  36:src/../h/TCB.hpp **** 
  37:src/../h/TCB.hpp ****     bool isFinished() const { return finished;}
  38:src/../h/TCB.hpp **** 
  39:src/../h/TCB.hpp ****     void block() { this->blocked = true; }
  40:src/../h/TCB.hpp ****     void unblock() { this->blocked = false; }
  41:src/../h/TCB.hpp ****     bool isBlocked() const { return blocked; }
  42:src/../h/TCB.hpp **** 
  43:src/../h/TCB.hpp ****     time_t getTimeSlice() const { return timeSlice; }
 490              		.loc 3 43 35 is_stmt 1
 491              		.loc 3 43 42 is_stmt 0
GAS LISTING /tmp/ccbBQbSz.s 			page 15


 492 019c 03370702 		ld	a4,32(a4)
 493              	.LVL21:
 494              	.LBE184:
 495              	.LBE183:
  35:src/Riscv.cpp ****             TCB::dispatch();
 496              		.loc 1 35 9
 497 01a0 63F8E700 		bgeu	a5,a4,.L38
 498              	.L5:
  40:src/Riscv.cpp ****     }
 499              		.loc 1 40 9 is_stmt 1
 500              	.LVL22:
 501              	.LBB185:
 502              	.LBB186:
  85:src/../h/Riscv.hpp **** }
  86:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
  87:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sstatus,%[mask]"::[mask]"r"(mask));
  88:src/../h/Riscv.hpp **** }
  89:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
  90:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sstatus,%[mask]"::[mask]"r"(mask));
  91:src/../h/Riscv.hpp **** }
  92:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
  93:src/../h/Riscv.hpp **** {
  94:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sip, %[mask]":: [mask]"r"(mask));
 503              		.loc 2 94 5
 504              		.loc 2 94 60 is_stmt 0
 505 01a4 93072000 		li	a5,2
 506              	#APP
 507              	# 94 "src/../h/Riscv.hpp" 1
  95              	}
 508              		csrc sip, a5
 509              	# 0 "" 2
 510              		.loc 2 95 1
 511              	#NO_APP
 512 01ac 6F00C004 		j	.L3
 513              	.LVL23:
 514              	.L38:
 515              	.LBE186:
 516              	.LBE185:
  36:src/Riscv.cpp ****             set_sepc(sepc);
 517              		.loc 1 36 13 is_stmt 1
  36:src/Riscv.cpp ****             set_sepc(sepc);
 518              		.loc 1 36 26 is_stmt 0
 519 01b0 97000000 		call	_ZN3TCB8dispatchEv@plt
 519      E7800000 
 520              	.LVL24:
  37:src/Riscv.cpp ****             set_sstatus(sstatus);
 521              		.loc 1 37 13 is_stmt 1
 522              	.LBB187:
 523              	.LBB188:
  57:src/../h/Riscv.hpp **** }
 524              		.loc 2 57 5
  57:src/../h/Riscv.hpp **** }
 525              		.loc 2 57 59 is_stmt 0
 526              	#APP
 527              	# 57 "src/../h/Riscv.hpp" 1
 528              		csrw sepc, s1
 529              	# 0 "" 2
GAS LISTING /tmp/ccbBQbSz.s 			page 16


 530              	.LVL25:
 531              	#NO_APP
 532              	.LBE188:
 533              	.LBE187:
  38:src/Riscv.cpp ****         }
 534              		.loc 1 38 13 is_stmt 1
 535              	.LBB189:
 536              	.LBB190:
  67:src/../h/Riscv.hpp **** }
 537              		.loc 2 67 5
  67:src/../h/Riscv.hpp **** }
 538              		.loc 2 67 65 is_stmt 0
 539              	#APP
 540              	# 67 "src/../h/Riscv.hpp" 1
  68:src/../h/Riscv.hpp **** 
 541              		csrw sstatus, s2
 542              	# 0 "" 2
 543              		.loc 2 68 1
 544              	#NO_APP
 545 01c0 6FF05FFE 		j	.L5
 546              	.LVL26:
 547              	.L26:
 548              	.LBE190:
 549              	.LBE189:
 550              	.LBB191:
  44:src/Riscv.cpp ****     }
 551              		.loc 1 44 9 is_stmt 1
  44:src/Riscv.cpp ****     }
 552              		.loc 1 44 24 is_stmt 0
 553 01c4 97000000 		call	console_handler@plt
 553      E7800000 
 554              	.LVL27:
 555 01cc 6F00C002 		j	.L3
 556              	.LVL28:
 557              	.L27:
 558              	.LBB171:
 559              	.LBB155:
 560              	.LBB143:
  51:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (size_in_blocks));
 561              		.loc 1 51 9 is_stmt 1
  52:src/Riscv.cpp ****         void* ptr = MemoryAllocator::Instance()->mem_alloc(size_in_blocks * MEM_BLOCK_SIZE);
 562              		.loc 1 52 9
  52:src/Riscv.cpp ****         void* ptr = MemoryAllocator::Instance()->mem_alloc(size_in_blocks * MEM_BLOCK_SIZE);
 563              		.loc 1 52 69 is_stmt 0
 564              	#APP
 565              	# 52 "src/Riscv.cpp" 1
 566              		mv s3, a1
 567              	# 0 "" 2
 568              	.LVL29:
  53:src/Riscv.cpp ****         __asm__ volatile ("mv a0,%[x]" :: [x] "r" (ptr));
 569              		.loc 1 53 9 is_stmt 1
  53:src/Riscv.cpp ****         __asm__ volatile ("mv a0,%[x]" :: [x] "r" (ptr));
 570              		.loc 1 53 59 is_stmt 0
 571              	#NO_APP
 572 01d4 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 572      E7800000 
 573              	.LVL30:
GAS LISTING /tmp/ccbBQbSz.s 			page 17


 574 01dc 93952900 		slli	a1,s3,2
 575 01e0 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 575      E7800000 
 576              	.LVL31:
  54:src/Riscv.cpp ****     }
 577              		.loc 1 54 9 is_stmt 1
  54:src/Riscv.cpp ****     }
 578              		.loc 1 54 57 is_stmt 0
 579              	#APP
 580              	# 54 "src/Riscv.cpp" 1
 581              		mv a0,a0
 582              	# 0 "" 2
 583              	.LVL32:
 584              	#NO_APP
 585              	.L9:
 586              	.LBE143:
 587              	.LBE155:
 147:src/Riscv.cpp ****     }
 148:src/Riscv.cpp ****     set_sepc(sepc+4);
 588              		.loc 1 148 5 is_stmt 1
 589              		.loc 1 148 13 is_stmt 0
 590 01ec 93844400 		addi	s1,s1,4
 591              	.LVL33:
 592              	.LBB156:
 593              	.LBB157:
  57:src/../h/Riscv.hpp **** }
 594              		.loc 2 57 5 is_stmt 1
  57:src/../h/Riscv.hpp **** }
 595              		.loc 2 57 59 is_stmt 0
 596              	#APP
 597              	# 57 "src/../h/Riscv.hpp" 1
 598              		csrw sepc, s1
 599              	# 0 "" 2
 600              	.LVL34:
 601              	#NO_APP
 602              	.LBE157:
 603              	.LBE156:
 149:src/Riscv.cpp ****     set_sstatus(sstatus);
 604              		.loc 1 149 5 is_stmt 1
 605              	.LBB158:
 606              	.LBB159:
  67:src/../h/Riscv.hpp **** }
 607              		.loc 2 67 5
  67:src/../h/Riscv.hpp **** }
 608              		.loc 2 67 65 is_stmt 0
 609              	#APP
 610              	# 67 "src/../h/Riscv.hpp" 1
 611              		csrw sstatus, s2
 612              	# 0 "" 2
 613              	.LVL35:
 614              	#NO_APP
 615              	.L3:
 616              	.LBE159:
 617              	.LBE158:
 618              	.LBE171:
 619              	.LBE191:
 620              	.LBE203:
GAS LISTING /tmp/ccbBQbSz.s 			page 18


 150:src/Riscv.cpp ****     }
 151:src/Riscv.cpp **** 
 152:src/Riscv.cpp **** 
 153:src/Riscv.cpp **** }...
 621              		.loc 1 153 1
 622 01f8 83308105 		ld	ra,88(sp)
 623              		.cfi_remember_state
 624              		.cfi_restore 1
 625 01fc 03340105 		ld	s0,80(sp)
 626              		.cfi_restore 8
 627              		.cfi_def_cfa 2, 96
 628 0200 83348104 		ld	s1,72(sp)
 629              		.cfi_restore 9
 630 0204 03390104 		ld	s2,64(sp)
 631              		.cfi_restore 18
 632              	.LVL36:
 633 0208 83398103 		ld	s3,56(sp)
 634              		.cfi_restore 19
 635 020c 033A0103 		ld	s4,48(sp)
 636              		.cfi_restore 20
 637 0210 833A8102 		ld	s5,40(sp)
 638              		.cfi_restore 21
 639 0214 13010106 		addi	sp,sp,96
 640              		.cfi_def_cfa_offset 0
 641 0218 67800000 		jr	ra
 642              	.LVL37:
 643              	.L28:
 644              		.cfi_restore_state
 645              	.LBB204:
 646              	.LBB192:
 647              	.LBB172:
 648              	.LBB160:
 649              	.LBB144:
 650              	.LBB132:
  57:src/Riscv.cpp ****         void* ptr;
 651              		.loc 1 57 9 is_stmt 1
  58:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (ptr));
 652              		.loc 1 58 9
  58:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (ptr));
 653              		.loc 1 58 58 is_stmt 0
 654              	#APP
 655              	# 58 "src/Riscv.cpp" 1
 656              		mv s3, a1
 657              	# 0 "" 2
 658              	.LVL38:
  59:src/Riscv.cpp ****         MemoryAllocator::Instance()->mem_free(ptr);
 659              		.loc 1 59 9 is_stmt 1
  59:src/Riscv.cpp ****         MemoryAllocator::Instance()->mem_free(ptr);
 660              		.loc 1 59 46 is_stmt 0
 661              	#NO_APP
 662 0220 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 662      E7800000 
 663              	.LVL39:
 664 0228 93850900 		mv	a1,s3
 665 022c 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 665      E7800000 
 666              	.LVL40:
GAS LISTING /tmp/ccbBQbSz.s 			page 19


  60:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (0));
 667              		.loc 1 60 9 is_stmt 1
  60:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (0));
 668              		.loc 1 60 56 is_stmt 0
 669 0234 93070000 		li	a5,0
 670              	#APP
 671              	# 60 "src/Riscv.cpp" 1
 672              		mv a0, a5
 673              	# 0 "" 2
 674              	#NO_APP
 675              	.LBE132:
 676 023c 6FF01FFB 		j	.L9
 677              	.LVL41:
 678              	.L29:
 679              	.LBB133:
 680              	.LBB120:
  63:src/Riscv.cpp ****         size_t freeMem = MemoryAllocator::Instance()->getFreeMemSize();
 681              		.loc 1 63 9 is_stmt 1
  63:src/Riscv.cpp ****         size_t freeMem = MemoryAllocator::Instance()->getFreeMemSize();
 682              		.loc 1 63 69 is_stmt 0
 683 0240 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 683      E7800000 
 684              	.LVL42:
 685              	.LBB121:
 686              	.LBB122:
 687              		.file 4 "src/../h/../h/MemoryAllocator.hpp"
   1:src/../h/../h/MemoryAllocator.hpp **** 
   2:src/../h/../h/MemoryAllocator.hpp **** #ifndef PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   3:src/../h/../h/MemoryAllocator.hpp **** #define PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   4:src/../h/../h/MemoryAllocator.hpp **** 
   5:src/../h/../h/MemoryAllocator.hpp **** #include "../lib/hw.h"
   6:src/../h/../h/MemoryAllocator.hpp **** 
   7:src/../h/../h/MemoryAllocator.hpp **** class MemoryAllocator {
   8:src/../h/../h/MemoryAllocator.hpp **** public:
   9:src/../h/../h/MemoryAllocator.hpp ****     static MemoryAllocator* Instance();
  10:src/../h/../h/MemoryAllocator.hpp **** 
  11:src/../h/../h/MemoryAllocator.hpp ****     void* mem_alloc(size_t size);//size in bytes
  12:src/../h/../h/MemoryAllocator.hpp **** 
  13:src/../h/../h/MemoryAllocator.hpp ****     void mem_free(void* ptr);
  14:src/../h/../h/MemoryAllocator.hpp **** 
  15:src/../h/../h/MemoryAllocator.hpp ****     size_t getFreeMemSize() {
  16:src/../h/../h/MemoryAllocator.hpp ****         return this->freeMemSize;
 688              		.loc 4 16 9 is_stmt 1
 689              		.loc 4 16 22 is_stmt 0
 690 0248 83378500 		ld	a5,8(a0)
 691              	.LVL43:
 692              	.LBE122:
 693              	.LBE121:
  64:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (freeMem));
 694              		.loc 1 64 9 is_stmt 1
  64:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (freeMem));
 695              		.loc 1 64 62 is_stmt 0
 696              	#APP
 697              	# 64 "src/Riscv.cpp" 1
 698              		mv a0, a5
 699              	# 0 "" 2
 700              	#NO_APP
GAS LISTING /tmp/ccbBQbSz.s 			page 20


 701              	.LBE120:
 702 0250 6FF0DFF9 		j	.L9
 703              	.LVL44:
 704              	.L30:
 705              	.LBB123:
 706              	.LBB111:
  67:src/Riscv.cpp ****         size_t largestBlock = MemoryAllocator::Instance()->getLargestFreeBlock();
 707              		.loc 1 67 9 is_stmt 1
  67:src/Riscv.cpp ****         size_t largestBlock = MemoryAllocator::Instance()->getLargestFreeBlock();
 708              		.loc 1 67 79 is_stmt 0
 709 0254 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 709      E7800000 
 710              	.LVL45:
 711 025c 97000000 		call	_ZN15MemoryAllocator19getLargestFreeBlockEv@plt
 711      E7800000 
 712              	.LVL46:
  68:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (largestBlock));
 713              		.loc 1 68 9 is_stmt 1
  68:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (largestBlock));
 714              		.loc 1 68 67 is_stmt 0
 715              	#APP
 716              	# 68 "src/Riscv.cpp" 1
 717              		mv a0, a0
 718              	# 0 "" 2
 719              	#NO_APP
 720              	.LBE111:
 721 0268 6FF05FF8 		j	.L9
 722              	.LVL47:
 723              	.L31:
 724              	.LBB112:
 725              	.LBB102:
  71:src/Riscv.cpp ****         thread_t* handle;
 726              		.loc 1 71 9 is_stmt 1
  72:src/Riscv.cpp ****         Body start_routine;
 727              		.loc 1 72 9
  73:src/Riscv.cpp ****         void* arg;
 728              		.loc 1 73 9
  74:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 729              		.loc 1 74 9
  74:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 730              		.loc 1 74 61 is_stmt 0
 731              	#APP
 732              	# 74 "src/Riscv.cpp" 1
 733              		mv s3, a1
 734              	# 0 "" 2
 735              	.LVL48:
  75:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (start_routine));
 736              		.loc 1 75 9 is_stmt 1
  75:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (start_routine));
 737              		.loc 1 75 68 is_stmt 0
 738              	# 75 "src/Riscv.cpp" 1
 739              		mv s4, a2
 740              	# 0 "" 2
 741              	.LVL49:
  76:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a3" : [x] "=r" (arg));
 742              		.loc 1 76 9 is_stmt 1
  76:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a3" : [x] "=r" (arg));
GAS LISTING /tmp/ccbBQbSz.s 			page 21


 743              		.loc 1 76 58 is_stmt 0
 744              	# 76 "src/Riscv.cpp" 1
 745              		mv s5, a3
 746              	# 0 "" 2
 747              	.LVL50:
  78:src/Riscv.cpp ****         uint64 *sp=(uint64*)MemoryAllocator::Instance()->mem_alloc(DEFAULT_STACK_SIZE);
 748              		.loc 1 78 9 is_stmt 1
  78:src/Riscv.cpp ****         uint64 *sp=(uint64*)MemoryAllocator::Instance()->mem_alloc(DEFAULT_STACK_SIZE);
 749              		.loc 1 78 67 is_stmt 0
 750              	#NO_APP
 751 0278 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 751      E7800000 
 752              	.LVL51:
 753 0280 B7150000 		li	a1,4096
 754 0284 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 754      E7800000 
 755              	.LVL52:
 756 028c 13060500 		mv	a2,a0
 757              	.LVL53:
  81:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
 758              		.loc 1 81 9 is_stmt 1
  81:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
 759              		.loc 1 81 34 is_stmt 0
 760 0290 93850A00 		mv	a1,s5
 761 0294 13050A00 		mv	a0,s4
 762              	.LVL54:
 763 0298 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 763      E7800000 
 764              	.LVL55:
  81:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
 765              		.loc 1 81 16
 766 02a0 23B0A900 		sd	a0,0(s3)
  82:src/Riscv.cpp ****         int ret=0;
 767              		.loc 1 82 9 is_stmt 1
 768              	.LVL56:
  83:src/Riscv.cpp ****         if (*handle) {
 769              		.loc 1 83 9
 770 02a4 63080500 		beqz	a0,.L22
  84:src/Riscv.cpp ****             ret=0;
 771              		.loc 1 84 16 is_stmt 0
 772 02a8 93070000 		li	a5,0
 773              	.L14:
 774              	.LVL57:
  89:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 775              		.loc 1 89 9 is_stmt 1
  89:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 776              		.loc 1 89 58 is_stmt 0
 777              	#APP
 778              	# 89 "src/Riscv.cpp" 1
 779              		mv a0, a5
 780              	# 0 "" 2
 781              	#NO_APP
 782              	.LBE102:
 783 02b0 6FF0DFF3 		j	.L9
 784              	.LVL58:
 785              	.L22:
 786              	.LBB103:
GAS LISTING /tmp/ccbBQbSz.s 			page 22


  87:src/Riscv.cpp ****             ret=1;
 787              		.loc 1 87 16
 788 02b4 93071000 		li	a5,1
 789 02b8 6FF05FFF 		j	.L14
 790              	.LVL59:
 791              	.L32:
 792              	.LBE103:
 793              	.LBB104:
 794              	.LBB95:
  92:src/Riscv.cpp ****         int ret = TCB::exit();
 795              		.loc 1 92 9 is_stmt 1
  92:src/Riscv.cpp ****         int ret = TCB::exit();
 796              		.loc 1 92 28 is_stmt 0
 797 02bc 97000000 		call	_ZN3TCB4exitEv@plt
 797      E7800000 
 798              	.LVL60:
  93:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 799              		.loc 1 93 9 is_stmt 1
  93:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 800              		.loc 1 93 58 is_stmt 0
 801              	#APP
 802              	# 93 "src/Riscv.cpp" 1
 803              		mv a0, a0
 804              	# 0 "" 2
 805              	#NO_APP
 806              	.LBE95:
 807 02c8 6FF05FF2 		j	.L9
 808              	.LVL61:
 809              	.L33:
 810              	.LBB96:
  96:src/Riscv.cpp ****         TCB::dispatch();
 811              		.loc 1 96 9 is_stmt 1
  96:src/Riscv.cpp ****         TCB::dispatch();
 812              		.loc 1 96 22 is_stmt 0
 813 02cc 97000000 		call	_ZN3TCB8dispatchEv@plt
 813      E7800000 
 814              	.LVL62:
 815 02d4 6FF09FF1 		j	.L9
 816              	.LVL63:
 817              	.L34:
 818              	.LBB90:
 819              	.LBB84:
  99:src/Riscv.cpp ****         sem_t* handle;
 820              		.loc 1 99 9 is_stmt 1
 100:src/Riscv.cpp ****         unsigned init;
 821              		.loc 1 100 9
 101:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 822              		.loc 1 101 9
 101:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 823              		.loc 1 101 61 is_stmt 0
 824              	#APP
 825              	# 101 "src/Riscv.cpp" 1
 826              		mv s3, a1
 827              	# 0 "" 2
 828              	.LVL64:
 102:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (init));
 829              		.loc 1 102 9 is_stmt 1
GAS LISTING /tmp/ccbBQbSz.s 			page 23


 102:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (init));
 830              		.loc 1 102 59 is_stmt 0
 831              	# 102 "src/Riscv.cpp" 1
 832              		mv a0, a2
 833              	# 0 "" 2
 834              	.LVL65:
 104:src/Riscv.cpp ****         *handle=SEM::open(init);
 835              		.loc 1 104 9 is_stmt 1
 104:src/Riscv.cpp ****         *handle=SEM::open(init);
 836              		.loc 1 104 26 is_stmt 0
 837              	#NO_APP
 838 02e0 1B050500 		sext.w	a0,a0
 839 02e4 97000000 		call	_ZN3SEM4openEj@plt
 839      E7800000 
 840              	.LVL66:
 104:src/Riscv.cpp ****         *handle=SEM::open(init);
 841              		.loc 1 104 16
 842 02ec 23B0A900 		sd	a0,0(s3)
 105:src/Riscv.cpp ****         int ret=0;
 843              		.loc 1 105 9 is_stmt 1
 844              	.LVL67:
 106:src/Riscv.cpp ****         if (*handle) {
 845              		.loc 1 106 9
 846 02f0 63080500 		beqz	a0,.L23
 107:src/Riscv.cpp ****             ret=0;
 847              		.loc 1 107 16 is_stmt 0
 848 02f4 93070000 		li	a5,0
 849              	.L18:
 850              	.LVL68:
 112:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 851              		.loc 1 112 9 is_stmt 1
 112:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 852              		.loc 1 112 58 is_stmt 0
 853              	#APP
 854              	# 112 "src/Riscv.cpp" 1
 855              		mv a0, a5
 856              	# 0 "" 2
 857              	#NO_APP
 858              	.LBE84:
 859 02fc 6FF01FEF 		j	.L9
 860              	.LVL69:
 861              	.L23:
 862              	.LBB85:
 110:src/Riscv.cpp ****             ret=1;
 863              		.loc 1 110 16
 864 0300 93071000 		li	a5,1
 865 0304 6FF05FFF 		j	.L18
 866              	.LVL70:
 867              	.L35:
 868              	.LBE85:
 869              	.LBB86:
 870              	.LBB80:
 115:src/Riscv.cpp ****         sem_t handle;
 871              		.loc 1 115 9 is_stmt 1
 116:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 872              		.loc 1 116 9
 116:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
GAS LISTING /tmp/ccbBQbSz.s 			page 24


 873              		.loc 1 116 61 is_stmt 0
 874              	#APP
 875              	# 116 "src/Riscv.cpp" 1
 876              		mv a0, a1
 877              	# 0 "" 2
 878              	.LVL71:
 117:src/Riscv.cpp ****         int ret=handle->close();
 879              		.loc 1 117 9 is_stmt 1
 117:src/Riscv.cpp ****         int ret=handle->close();
 880              		.loc 1 117 30 is_stmt 0
 881              	#NO_APP
 882 030c 97000000 		call	_ZN3SEM5closeEv@plt
 882      E7800000 
 883              	.LVL72:
 118:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 884              		.loc 1 118 9 is_stmt 1
 118:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 885              		.loc 1 118 58 is_stmt 0
 886              	#APP
 887              	# 118 "src/Riscv.cpp" 1
 888              		mv a0, a0
 889              	# 0 "" 2
 890              	#NO_APP
 891              	.LBE80:
 892 0318 6FF05FED 		j	.L9
 893              	.LVL73:
 894              	.L36:
 895              	.LBB81:
 896              	.LBB77:
 121:src/Riscv.cpp ****         sem_t handle;
 897              		.loc 1 121 9 is_stmt 1
 122:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 898              		.loc 1 122 9
 122:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 899              		.loc 1 122 61 is_stmt 0
 900              	#APP
 901              	# 122 "src/Riscv.cpp" 1
 902              		mv a0, a1
 903              	# 0 "" 2
 904              	.LVL74:
 123:src/Riscv.cpp ****         int ret=handle->wait();
 905              		.loc 1 123 9 is_stmt 1
 123:src/Riscv.cpp ****         int ret=handle->wait();
 906              		.loc 1 123 29 is_stmt 0
 907              	#NO_APP
 908 0320 97000000 		call	_ZN3SEM4waitEv@plt
 908      E7800000 
 909              	.LVL75:
 124:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 910              		.loc 1 124 9 is_stmt 1
 124:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 911              		.loc 1 124 58 is_stmt 0
 912              	#APP
 913              	# 124 "src/Riscv.cpp" 1
 914              		mv a0, a0
 915              	# 0 "" 2
 916              	#NO_APP
GAS LISTING /tmp/ccbBQbSz.s 			page 25


 917              	.LBE77:
 918 032c 6FF01FEC 		j	.L9
 919              	.LVL76:
 920              	.L37:
 921              	.LBB78:
 922              	.LBB76:
 127:src/Riscv.cpp ****         sem_t handle;
 923              		.loc 1 127 9 is_stmt 1
 128:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 924              		.loc 1 128 9
 128:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 925              		.loc 1 128 61 is_stmt 0
 926              	#APP
 927              	# 128 "src/Riscv.cpp" 1
 928              		mv a0, a1
 929              	# 0 "" 2
 930              	.LVL77:
 129:src/Riscv.cpp ****         int ret=handle->signal();
 931              		.loc 1 129 9 is_stmt 1
 129:src/Riscv.cpp ****         int ret=handle->signal();
 932              		.loc 1 129 31 is_stmt 0
 933              	#NO_APP
 934 0334 97000000 		call	_ZN3SEM6signalEv@plt
 934      E7800000 
 935              	.LVL78:
 130:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 936              		.loc 1 130 9 is_stmt 1
 130:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 937              		.loc 1 130 58 is_stmt 0
 938              	#APP
 939              	# 130 "src/Riscv.cpp" 1
 940              		mv a0, a0
 941              	# 0 "" 2
 942              	#NO_APP
 943              	.LBE76:
 944 0340 6FF0DFEA 		j	.L9
 945              	.LBE78:
 946              	.LBE81:
 947              	.LBE86:
 948              	.LBE90:
 949              	.LBE96:
 950              	.LBE104:
 951              	.LBE112:
 952              	.LBE123:
 953              	.LBE133:
 954              	.LBE144:
 955              	.LBE160:
 956              	.LBE172:
 957              	.LBE192:
 958              	.LBE204:
 959              		.cfi_endproc
 960              	.LFE31:
 962              	.Letext0:
 963              		.file 5 "src/../h/../lib/hw.h"
 964              		.file 6 "src/../h/../h/List.hpp"
 965              		.file 7 "src/../h/SEM.hpp"
 966              		.file 8 "src/../h/syscall_c.hpp"
GAS LISTING /tmp/ccbBQbSz.s 			page 26


 967              		.file 9 "src/../h/print.hpp"
 968              		.file 10 "src/../lib/console.h"
GAS LISTING /tmp/ccbBQbSz.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccbBQbSz.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccbBQbSz.s:13     .text:0000000000000000 .L0 
     /tmp/ccbBQbSz.s:14     .text:0000000000000000 .L0 
     /tmp/ccbBQbSz.s:15     .text:0000000000000004 .L0 
     /tmp/ccbBQbSz.s:17     .text:0000000000000008 .L0 
     /tmp/ccbBQbSz.s:19     .text:000000000000000c .L0 
     /tmp/ccbBQbSz.s:21     .text:000000000000000c .L0 
       src/Riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccbBQbSz.s:27     .text:0000000000000010 .L0 
       src/Riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccbBQbSz.s:33     .text:0000000000000014 .L0 
     /tmp/ccbBQbSz.s:34     .text:0000000000000018 .L0 
     /tmp/ccbBQbSz.s:35     .text:0000000000000018 .L0 
     /tmp/ccbBQbSz.s:37     .text:000000000000001c .L0 
     /tmp/ccbBQbSz.s:39     .text:0000000000000020 .L0 
     /tmp/ccbBQbSz.s:59     .text:0000000000000020 _ZN5Riscv21SupervisorTrapHandlerEv
     /tmp/ccbBQbSz.s:62     .text:0000000000000020 .L0 
     /tmp/ccbBQbSz.s:63     .text:0000000000000020 .L0 
     /tmp/ccbBQbSz.s:64     .text:0000000000000024 .L0 
     /tmp/ccbBQbSz.s:72     .text:0000000000000040 .L0 
     /tmp/ccbBQbSz.s:73     .text:0000000000000040 .L0 
     /tmp/ccbBQbSz.s:74     .text:0000000000000040 .L0 
     /tmp/ccbBQbSz.s:75     .text:0000000000000040 .L0 
     /tmp/ccbBQbSz.s:76     .text:0000000000000040 .L0 
     /tmp/ccbBQbSz.s:77     .text:0000000000000040 .L0 
     /tmp/ccbBQbSz.s:78     .text:0000000000000040 .L0 
     /tmp/ccbBQbSz.s:80     .text:0000000000000044 .L0 
     /tmp/ccbBQbSz.s:82     .text:0000000000000044 .L0 
     /tmp/ccbBQbSz.s:83     .text:0000000000000044 .L0 
     /tmp/ccbBQbSz.s:87     .text:0000000000000044 .L0 
     /tmp/ccbBQbSz.s:88     .text:0000000000000044 .L0 
     /tmp/ccbBQbSz.s:89     .text:0000000000000044 .L0 
  src/../h/Riscv.hpp:78     .text:0000000000000044 .L0 
     /tmp/ccbBQbSz.s:97     .text:000000000000004c .L0 
     /tmp/ccbBQbSz.s:98     .text:000000000000004c .L0 
     /tmp/ccbBQbSz.s:105    .text:0000000000000050 .L0 
     /tmp/ccbBQbSz.s:106    .text:0000000000000050 .L0 
     /tmp/ccbBQbSz.s:107    .text:0000000000000050 .L0 
  src/../h/Riscv.hpp:62     .text:0000000000000050 .L0 
     /tmp/ccbBQbSz.s:117    .text:0000000000000054 .L0 
     /tmp/ccbBQbSz.s:120    .text:0000000000000054 .L0 
     /tmp/ccbBQbSz.s:121    .text:0000000000000054 .L0 
     /tmp/ccbBQbSz.s:122    .text:0000000000000054 .L0 
  src/../h/Riscv.hpp:72     .text:0000000000000054 .L0 
     /tmp/ccbBQbSz.s:132    .text:0000000000000058 .L0 
     /tmp/ccbBQbSz.s:134    .text:0000000000000058 .L0 
     /tmp/ccbBQbSz.s:142    .text:0000000000000068 .L0 
     /tmp/ccbBQbSz.s:148    .text:0000000000000078 .L0 
     /tmp/ccbBQbSz.s:149    .text:0000000000000078 .L0 
       src/Riscv.cpp:48     .text:0000000000000078 .L0 
     /tmp/ccbBQbSz.s:158    .text:000000000000007c .L0 
     /tmp/ccbBQbSz.s:171    .text:0000000000000084 .L0 
     /tmp/ccbBQbSz.s:185    .text:000000000000008c .L0 
     /tmp/ccbBQbSz.s:201    .text:0000000000000094 .L0 
     /tmp/ccbBQbSz.s:219    .text:000000000000009c .L0 
GAS LISTING /tmp/ccbBQbSz.s 			page 28


     /tmp/ccbBQbSz.s:239    .text:00000000000000a4 .L0 
     /tmp/ccbBQbSz.s:261    .text:00000000000000ac .L0 
     /tmp/ccbBQbSz.s:285    .text:00000000000000b4 .L0 
     /tmp/ccbBQbSz.s:311    .text:00000000000000bc .L0 
     /tmp/ccbBQbSz.s:339    .text:00000000000000c4 .L0 
     /tmp/ccbBQbSz.s:369    .text:00000000000000cc .L0 
     /tmp/ccbBQbSz.s:375    .text:00000000000000d4 .L0 
     /tmp/ccbBQbSz.s:376    .text:00000000000000d4 .L0 
     /tmp/ccbBQbSz.s:377    .text:00000000000000d4 .L0 
  src/../h/Riscv.hpp:78     .text:00000000000000d4 .L0 
     /tmp/ccbBQbSz.s:386    .text:00000000000000dc .L0 
     /tmp/ccbBQbSz.s:387    .text:00000000000000dc .L0 
     /tmp/ccbBQbSz.s:394    .text:00000000000000e0 .L0 
     /tmp/ccbBQbSz.s:395    .text:00000000000000e0 .L0 
     /tmp/ccbBQbSz.s:396    .text:00000000000000e0 .L0 
  src/../h/Riscv.hpp:83     .text:00000000000000e0 .L0 
     /tmp/ccbBQbSz.s:404    .text:00000000000000e8 .L0 
     /tmp/ccbBQbSz.s:405    .text:00000000000000e8 .L0 
     /tmp/ccbBQbSz.s:410    .text:00000000000000ec .L0 
     /tmp/ccbBQbSz.s:411    .text:00000000000000ec .L0 
     /tmp/ccbBQbSz.s:415    .text:00000000000000fc .L0 
     /tmp/ccbBQbSz.s:416    .text:00000000000000fc .L0 
     /tmp/ccbBQbSz.s:420    .text:0000000000000108 .L0 
     /tmp/ccbBQbSz.s:421    .text:0000000000000108 .L0 
     /tmp/ccbBQbSz.s:425    .text:0000000000000118 .L0 
     /tmp/ccbBQbSz.s:426    .text:0000000000000118 .L0 
     /tmp/ccbBQbSz.s:430    .text:0000000000000128 .L0 
     /tmp/ccbBQbSz.s:431    .text:0000000000000128 .L0 
     /tmp/ccbBQbSz.s:435    .text:0000000000000134 .L0 
     /tmp/ccbBQbSz.s:436    .text:0000000000000134 .L0 
     /tmp/ccbBQbSz.s:440    .text:0000000000000144 .L0 
     /tmp/ccbBQbSz.s:441    .text:0000000000000144 .L0 
     /tmp/ccbBQbSz.s:445    .text:0000000000000154 .L0 
     /tmp/ccbBQbSz.s:446    .text:0000000000000154 .L0 
     /tmp/ccbBQbSz.s:450    .text:0000000000000160 .L0 
     /tmp/ccbBQbSz.s:451    .text:0000000000000160 .L0 
     /tmp/ccbBQbSz.s:455    .text:0000000000000170 .L0 
     /tmp/ccbBQbSz.s:456    .text:0000000000000170 .L0 
     /tmp/ccbBQbSz.s:476    .text:000000000000017c .L0 
     /tmp/ccbBQbSz.s:477    .text:000000000000017c .L0 
     /tmp/ccbBQbSz.s:483    .text:0000000000000190 .L0 
     /tmp/ccbBQbSz.s:484    .text:0000000000000190 .L0 
     /tmp/ccbBQbSz.s:491    .text:000000000000019c .L0 
     /tmp/ccbBQbSz.s:492    .text:000000000000019c .L0 
     /tmp/ccbBQbSz.s:497    .text:00000000000001a0 .L0 
     /tmp/ccbBQbSz.s:503    .text:00000000000001a4 .L0 
     /tmp/ccbBQbSz.s:504    .text:00000000000001a4 .L0 
     /tmp/ccbBQbSz.s:505    .text:00000000000001a4 .L0 
     /tmp/ccbBQbSz.s:512    .text:00000000000001ac .L0 
     /tmp/ccbBQbSz.s:518    .text:00000000000001b0 .L0 
     /tmp/ccbBQbSz.s:519    .text:00000000000001b0 .L0 
     /tmp/ccbBQbSz.s:524    .text:00000000000001b8 .L0 
     /tmp/ccbBQbSz.s:525    .text:00000000000001b8 .L0 
  src/../h/Riscv.hpp:57     .text:00000000000001b8 .L0 
     /tmp/ccbBQbSz.s:537    .text:00000000000001bc .L0 
     /tmp/ccbBQbSz.s:538    .text:00000000000001bc .L0 
  src/../h/Riscv.hpp:67     .text:00000000000001bc .L0 
GAS LISTING /tmp/ccbBQbSz.s 			page 29


     /tmp/ccbBQbSz.s:545    .text:00000000000001c0 .L0 
     /tmp/ccbBQbSz.s:552    .text:00000000000001c4 .L0 
     /tmp/ccbBQbSz.s:553    .text:00000000000001c4 .L0 
     /tmp/ccbBQbSz.s:562    .text:00000000000001d0 .L0 
     /tmp/ccbBQbSz.s:563    .text:00000000000001d0 .L0 
       src/Riscv.cpp:52     .text:00000000000001d0 .L0 
     /tmp/ccbBQbSz.s:570    .text:00000000000001d4 .L0 
     /tmp/ccbBQbSz.s:572    .text:00000000000001d4 .L0 
     /tmp/ccbBQbSz.s:578    .text:00000000000001e8 .L0 
       src/Riscv.cpp:54     .text:00000000000001e8 .L0 
     /tmp/ccbBQbSz.s:589    .text:00000000000001ec .L0 
     /tmp/ccbBQbSz.s:590    .text:00000000000001ec .L0 
     /tmp/ccbBQbSz.s:595    .text:00000000000001f0 .L0 
  src/../h/Riscv.hpp:57     .text:00000000000001f0 .L0 
     /tmp/ccbBQbSz.s:607    .text:00000000000001f4 .L0 
     /tmp/ccbBQbSz.s:608    .text:00000000000001f4 .L0 
  src/../h/Riscv.hpp:67     .text:00000000000001f4 .L0 
     /tmp/ccbBQbSz.s:622    .text:00000000000001f8 .L0 
     /tmp/ccbBQbSz.s:623    .text:00000000000001fc .L0 
     /tmp/ccbBQbSz.s:624    .text:00000000000001fc .L0 
     /tmp/ccbBQbSz.s:626    .text:0000000000000200 .L0 
     /tmp/ccbBQbSz.s:627    .text:0000000000000200 .L0 
     /tmp/ccbBQbSz.s:629    .text:0000000000000204 .L0 
     /tmp/ccbBQbSz.s:631    .text:0000000000000208 .L0 
     /tmp/ccbBQbSz.s:634    .text:000000000000020c .L0 
     /tmp/ccbBQbSz.s:636    .text:0000000000000210 .L0 
     /tmp/ccbBQbSz.s:638    .text:0000000000000214 .L0 
     /tmp/ccbBQbSz.s:640    .text:0000000000000218 .L0 
     /tmp/ccbBQbSz.s:644    .text:000000000000021c .L0 
     /tmp/ccbBQbSz.s:652    .text:000000000000021c .L0 
     /tmp/ccbBQbSz.s:653    .text:000000000000021c .L0 
       src/Riscv.cpp:58     .text:000000000000021c .L0 
     /tmp/ccbBQbSz.s:660    .text:0000000000000220 .L0 
     /tmp/ccbBQbSz.s:662    .text:0000000000000220 .L0 
     /tmp/ccbBQbSz.s:668    .text:0000000000000234 .L0 
     /tmp/ccbBQbSz.s:669    .text:0000000000000234 .L0 
     /tmp/ccbBQbSz.s:682    .text:0000000000000240 .L0 
     /tmp/ccbBQbSz.s:683    .text:0000000000000240 .L0 
     /tmp/ccbBQbSz.s:689    .text:0000000000000248 .L0 
     /tmp/ccbBQbSz.s:690    .text:0000000000000248 .L0 
     /tmp/ccbBQbSz.s:695    .text:000000000000024c .L0 
       src/Riscv.cpp:64     .text:000000000000024c .L0 
     /tmp/ccbBQbSz.s:708    .text:0000000000000254 .L0 
     /tmp/ccbBQbSz.s:709    .text:0000000000000254 .L0 
     /tmp/ccbBQbSz.s:714    .text:0000000000000264 .L0 
       src/Riscv.cpp:68     .text:0000000000000264 .L0 
     /tmp/ccbBQbSz.s:727    .text:000000000000026c .L0 
     /tmp/ccbBQbSz.s:728    .text:000000000000026c .L0 
     /tmp/ccbBQbSz.s:729    .text:000000000000026c .L0 
     /tmp/ccbBQbSz.s:730    .text:000000000000026c .L0 
       src/Riscv.cpp:74     .text:000000000000026c .L0 
     /tmp/ccbBQbSz.s:737    .text:0000000000000270 .L0 
       src/Riscv.cpp:75     .text:0000000000000270 .L0 
     /tmp/ccbBQbSz.s:743    .text:0000000000000274 .L0 
       src/Riscv.cpp:76     .text:0000000000000274 .L0 
     /tmp/ccbBQbSz.s:749    .text:0000000000000278 .L0 
     /tmp/ccbBQbSz.s:751    .text:0000000000000278 .L0 
GAS LISTING /tmp/ccbBQbSz.s 			page 30


     /tmp/ccbBQbSz.s:759    .text:0000000000000290 .L0 
     /tmp/ccbBQbSz.s:760    .text:0000000000000290 .L0 
     /tmp/ccbBQbSz.s:766    .text:00000000000002a0 .L0 
     /tmp/ccbBQbSz.s:769    .text:00000000000002a4 .L0 
     /tmp/ccbBQbSz.s:770    .text:00000000000002a4 .L0 
     /tmp/ccbBQbSz.s:772    .text:00000000000002a8 .L0 
     /tmp/ccbBQbSz.s:776    .text:00000000000002ac .L0 
       src/Riscv.cpp:89     .text:00000000000002ac .L0 
     /tmp/ccbBQbSz.s:788    .text:00000000000002b4 .L0 
     /tmp/ccbBQbSz.s:796    .text:00000000000002bc .L0 
     /tmp/ccbBQbSz.s:797    .text:00000000000002bc .L0 
     /tmp/ccbBQbSz.s:800    .text:00000000000002c4 .L0 
       src/Riscv.cpp:93     .text:00000000000002c4 .L0 
     /tmp/ccbBQbSz.s:812    .text:00000000000002cc .L0 
     /tmp/ccbBQbSz.s:813    .text:00000000000002cc .L0 
     /tmp/ccbBQbSz.s:821    .text:00000000000002d8 .L0 
     /tmp/ccbBQbSz.s:822    .text:00000000000002d8 .L0 
     /tmp/ccbBQbSz.s:823    .text:00000000000002d8 .L0 
       src/Riscv.cpp:101    .text:00000000000002d8 .L0 
     /tmp/ccbBQbSz.s:830    .text:00000000000002dc .L0 
       src/Riscv.cpp:102    .text:00000000000002dc .L0 
     /tmp/ccbBQbSz.s:836    .text:00000000000002e0 .L0 
     /tmp/ccbBQbSz.s:838    .text:00000000000002e0 .L0 
     /tmp/ccbBQbSz.s:842    .text:00000000000002ec .L0 
     /tmp/ccbBQbSz.s:845    .text:00000000000002f0 .L0 
     /tmp/ccbBQbSz.s:846    .text:00000000000002f0 .L0 
     /tmp/ccbBQbSz.s:848    .text:00000000000002f4 .L0 
     /tmp/ccbBQbSz.s:852    .text:00000000000002f8 .L0 
       src/Riscv.cpp:112    .text:00000000000002f8 .L0 
     /tmp/ccbBQbSz.s:864    .text:0000000000000300 .L0 
     /tmp/ccbBQbSz.s:872    .text:0000000000000308 .L0 
     /tmp/ccbBQbSz.s:873    .text:0000000000000308 .L0 
       src/Riscv.cpp:116    .text:0000000000000308 .L0 
     /tmp/ccbBQbSz.s:880    .text:000000000000030c .L0 
     /tmp/ccbBQbSz.s:882    .text:000000000000030c .L0 
     /tmp/ccbBQbSz.s:885    .text:0000000000000314 .L0 
       src/Riscv.cpp:118    .text:0000000000000314 .L0 
     /tmp/ccbBQbSz.s:898    .text:000000000000031c .L0 
     /tmp/ccbBQbSz.s:899    .text:000000000000031c .L0 
       src/Riscv.cpp:122    .text:000000000000031c .L0 
     /tmp/ccbBQbSz.s:906    .text:0000000000000320 .L0 
     /tmp/ccbBQbSz.s:908    .text:0000000000000320 .L0 
     /tmp/ccbBQbSz.s:911    .text:0000000000000328 .L0 
       src/Riscv.cpp:124    .text:0000000000000328 .L0 
     /tmp/ccbBQbSz.s:924    .text:0000000000000330 .L0 
     /tmp/ccbBQbSz.s:925    .text:0000000000000330 .L0 
       src/Riscv.cpp:128    .text:0000000000000330 .L0 
     /tmp/ccbBQbSz.s:932    .text:0000000000000334 .L0 
     /tmp/ccbBQbSz.s:934    .text:0000000000000334 .L0 
     /tmp/ccbBQbSz.s:937    .text:000000000000033c .L0 
       src/Riscv.cpp:130    .text:000000000000033c .L0 
     /tmp/ccbBQbSz.s:959    .text:0000000000000344 .L0 
     /tmp/ccbBQbSz.s:969    .text:0000000000000344 .L0 
     /tmp/ccbBQbSz.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccbBQbSz.s:411    .text:00000000000000ec .L0 
     /tmp/ccbBQbSz.s:47     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccbBQbSz.s:421    .text:0000000000000108 .L0 
GAS LISTING /tmp/ccbBQbSz.s 			page 31


     /tmp/ccbBQbSz.s:50     .rodata.str1.8:0000000000000010 .LC2
     /tmp/ccbBQbSz.s:426    .text:0000000000000118 .L0 
     /tmp/ccbBQbSz.s:436    .text:0000000000000134 .L0 
     /tmp/ccbBQbSz.s:53     .rodata.str1.8:0000000000000018 .LC3
     /tmp/ccbBQbSz.s:441    .text:0000000000000144 .L0 
     /tmp/ccbBQbSz.s:451    .text:0000000000000160 .L0 
     /tmp/ccbBQbSz.s:477    .text:000000000000017c .L0 
     /tmp/ccbBQbSz.s:484    .text:0000000000000190 .L0 
     /tmp/ccbBQbSz.s:460    .text:000000000000017c .L25
     /tmp/ccbBQbSz.s:547    .text:00000000000001c4 .L26
     /tmp/ccbBQbSz.s:557    .text:00000000000001d0 .L27
     /tmp/ccbBQbSz.s:643    .text:000000000000021c .L28
     /tmp/ccbBQbSz.s:678    .text:0000000000000240 .L29
     /tmp/ccbBQbSz.s:704    .text:0000000000000254 .L30
     /tmp/ccbBQbSz.s:723    .text:000000000000026c .L31
     /tmp/ccbBQbSz.s:791    .text:00000000000002bc .L32
     /tmp/ccbBQbSz.s:809    .text:00000000000002cc .L33
     /tmp/ccbBQbSz.s:817    .text:00000000000002d8 .L34
     /tmp/ccbBQbSz.s:867    .text:0000000000000308 .L35
     /tmp/ccbBQbSz.s:894    .text:000000000000031c .L36
     /tmp/ccbBQbSz.s:920    .text:0000000000000330 .L37
     /tmp/ccbBQbSz.s:585    .text:00000000000001ec .L9
     /tmp/ccbBQbSz.s:514    .text:00000000000001b0 .L38
     /tmp/ccbBQbSz.s:615    .text:00000000000001f8 .L3
     /tmp/ccbBQbSz.s:498    .text:00000000000001a4 .L5
     /tmp/ccbBQbSz.s:785    .text:00000000000002b4 .L22
     /tmp/ccbBQbSz.s:773    .text:00000000000002ac .L14
     /tmp/ccbBQbSz.s:861    .text:0000000000000300 .L23
     /tmp/ccbBQbSz.s:849    .text:00000000000002f8 .L18
     /tmp/ccbBQbSz.s:2688   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccbBQbSz.s:4196   .debug_str:00000000000007c3 .LASF157
     /tmp/ccbBQbSz.s:3986   .debug_str:00000000000001b4 .LASF158
     /tmp/ccbBQbSz.s:4116   .debug_str:0000000000000592 .LASF159
     /tmp/ccbBQbSz.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccbBQbSz.s:962    .text:0000000000000344 .Letext0
     /tmp/ccbBQbSz.s:3924   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccbBQbSz.s:4042   .debug_str:000000000000037f .LASF0
     /tmp/ccbBQbSz.s:4060   .debug_str:0000000000000408 .LASF1
     /tmp/ccbBQbSz.s:4124   .debug_str:00000000000005e7 .LASF2
     /tmp/ccbBQbSz.s:4136   .debug_str:0000000000000642 .LASF4
     /tmp/ccbBQbSz.s:4044   .debug_str:000000000000038c .LASF3
     /tmp/ccbBQbSz.s:3938   .debug_str:0000000000000040 .LASF5
     /tmp/ccbBQbSz.s:4108   .debug_str:0000000000000559 .LASF6
     /tmp/ccbBQbSz.s:4100   .debug_str:0000000000000522 .LASF7
     /tmp/ccbBQbSz.s:4050   .debug_str:00000000000003ca .LASF8
     /tmp/ccbBQbSz.s:4018   .debug_str:00000000000002de .LASF9
     /tmp/ccbBQbSz.s:4026   .debug_str:0000000000000314 .LASF10
     /tmp/ccbBQbSz.s:3974   .debug_str:0000000000000167 .LASF11
     /tmp/ccbBQbSz.s:4010   .debug_str:00000000000002b4 .LASF12
     /tmp/ccbBQbSz.s:3988   .debug_str:00000000000001c2 .LASF13
     /tmp/ccbBQbSz.s:3972   .debug_str:0000000000000157 .LASF14
     /tmp/ccbBQbSz.s:4174   .debug_str:000000000000073f .LASF15
     /tmp/ccbBQbSz.s:3998   .debug_str:0000000000000209 .LASF16
     /tmp/ccbBQbSz.s:4156   .debug_str:00000000000006c7 .LASF17
     /tmp/ccbBQbSz.s:4222   .debug_str:00000000000008ff .LASF51
     /tmp/ccbBQbSz.s:4114   .debug_str:0000000000000587 .LASF160
     /tmp/ccbBQbSz.s:4062   .debug_str:000000000000041b .LASF18
GAS LISTING /tmp/ccbBQbSz.s 			page 32


     /tmp/ccbBQbSz.s:4004   .debug_str:000000000000026b .LASF19
     /tmp/ccbBQbSz.s:4230   .debug_str:0000000000000940 .LASF20
     /tmp/ccbBQbSz.s:4106   .debug_str:000000000000054f .LASF21
     /tmp/ccbBQbSz.s:4000   .debug_str:000000000000021f .LASF23
     /tmp/ccbBQbSz.s:3950   .debug_str:00000000000000a8 .LASF22
     /tmp/ccbBQbSz.s:4144   .debug_str:000000000000067c .LASF24
     /tmp/ccbBQbSz.s:3960   .debug_str:00000000000000f4 .LASF27
     /tmp/ccbBQbSz.s:4240   .debug_str:000000000000097b .LASF29
     /tmp/ccbBQbSz.s:4128   .debug_str:00000000000005ff .LASF25
     /tmp/ccbBQbSz.s:4120   .debug_str:00000000000005c3 .LASF26
     /tmp/ccbBQbSz.s:3954   .debug_str:00000000000000cf .LASF28
     /tmp/ccbBQbSz.s:3992   .debug_str:00000000000001e2 .LASF30
     /tmp/ccbBQbSz.s:4160   .debug_str:00000000000006f5 .LASF31
     /tmp/ccbBQbSz.s:3968   .debug_str:0000000000000134 .LASF32
     /tmp/ccbBQbSz.s:4024   .debug_str:000000000000030a .LASF33
     /tmp/ccbBQbSz.s:4070   .debug_str:000000000000044a .LASF34
     /tmp/ccbBQbSz.s:3940   .debug_str:0000000000000047 .LASF35
     /tmp/ccbBQbSz.s:4158   .debug_str:00000000000006dd .LASF36
     /tmp/ccbBQbSz.s:4122   .debug_str:00000000000005dc .LASF37
     /tmp/ccbBQbSz.s:4246   .debug_str:00000000000009b9 .LASF38
     /tmp/ccbBQbSz.s:4140   .debug_str:000000000000064e .LASF39
     /tmp/ccbBQbSz.s:3980   .debug_str:0000000000000184 .LASF40
     /tmp/ccbBQbSz.s:4152   .debug_str:00000000000006b7 .LASF41
     /tmp/ccbBQbSz.s:4132   .debug_str:0000000000000627 .LASF42
     /tmp/ccbBQbSz.s:4236   .debug_str:0000000000000956 .LASF43
     /tmp/ccbBQbSz.s:4130   .debug_str:000000000000060b .LASF45
     /tmp/ccbBQbSz.s:4228   .debug_str:000000000000092f .LASF44
     /tmp/ccbBQbSz.s:3952   .debug_str:00000000000000b1 .LASF46
     /tmp/ccbBQbSz.s:4028   .debug_str:0000000000000322 .LASF47
     /tmp/ccbBQbSz.s:4036   .debug_str:000000000000034d .LASF48
     /tmp/ccbBQbSz.s:4148   .debug_str:000000000000069c .LASF49
     /tmp/ccbBQbSz.s:4242   .debug_str:0000000000000990 .LASF50
     /tmp/ccbBQbSz.s:4182   .debug_str:0000000000000774 .LASF92
     /tmp/ccbBQbSz.s:4248   .debug_str:00000000000009d1 .LASF54
     /tmp/ccbBQbSz.s:4022   .debug_str:00000000000002fe .LASF56
     /tmp/ccbBQbSz.s:3932   .debug_str:000000000000001c .LASF52
     /tmp/ccbBQbSz.s:4064   .debug_str:0000000000000424 .LASF53
     /tmp/ccbBQbSz.s:4138   .debug_str:0000000000000649 .LASF55
     /tmp/ccbBQbSz.s:3936   .debug_str:0000000000000034 .LASF57
     /tmp/ccbBQbSz.s:4172   .debug_str:0000000000000732 .LASF58
     /tmp/ccbBQbSz.s:4226   .debug_str:000000000000090d .LASF59
     /tmp/ccbBQbSz.s:4094   .debug_str:0000000000000500 .LASF110
     /tmp/ccbBQbSz.s:3994   .debug_str:00000000000001fb .LASF60
     /tmp/ccbBQbSz.s:3982   .debug_str:0000000000000197 .LASF61
     /tmp/ccbBQbSz.s:4150   .debug_str:00000000000006b2 .LASF62
     /tmp/ccbBQbSz.s:4046   .debug_str:000000000000039e .LASF63
     /tmp/ccbBQbSz.s:4184   .debug_str:000000000000077c .LASF68
     /tmp/ccbBQbSz.s:4078   .debug_str:0000000000000490 .LASF70
     /tmp/ccbBQbSz.s:4040   .debug_str:0000000000000379 .LASF64
     /tmp/ccbBQbSz.s:4032   .debug_str:0000000000000334 .LASF65
     /tmp/ccbBQbSz.s:3934   .debug_str:000000000000002c .LASF66
     /tmp/ccbBQbSz.s:4092   .debug_str:00000000000004ee .LASF67
     /tmp/ccbBQbSz.s:4126   .debug_str:00000000000005f5 .LASF69
     /tmp/ccbBQbSz.s:3966   .debug_str:000000000000011f .LASF71
     /tmp/ccbBQbSz.s:4068   .debug_str:000000000000043d .LASF72
     /tmp/ccbBQbSz.s:4212   .debug_str:00000000000008c7 .LASF73
     /tmp/ccbBQbSz.s:4194   .debug_str:00000000000007bb .LASF74
GAS LISTING /tmp/ccbBQbSz.s 			page 33


     /tmp/ccbBQbSz.s:4084   .debug_str:00000000000004b5 .LASF75
     /tmp/ccbBQbSz.s:4238   .debug_str:0000000000000965 .LASF121
     /tmp/ccbBQbSz.s:4154   .debug_str:00000000000006be .LASF76
     /tmp/ccbBQbSz.s:4244   .debug_str:00000000000009b3 .LASF77
     /tmp/ccbBQbSz.s:4088   .debug_str:00000000000004c6 .LASF78
     /tmp/ccbBQbSz.s:4200   .debug_str:000000000000088c .LASF79
     /tmp/ccbBQbSz.s:4202   .debug_str:0000000000000896 .LASF80
     /tmp/ccbBQbSz.s:3930   .debug_str:0000000000000017 .LASF81
     /tmp/ccbBQbSz.s:3970   .debug_str:000000000000014c .LASF161
     /tmp/ccbBQbSz.s:3944   .debug_str:0000000000000073 .LASF162
     /tmp/ccbBQbSz.s:4218   .debug_str:00000000000008ee .LASF82
     /tmp/ccbBQbSz.s:4210   .debug_str:00000000000008c2 .LASF163
     /tmp/ccbBQbSz.s:4166   .debug_str:000000000000071a .LASF83
     /tmp/ccbBQbSz.s:4082   .debug_str:00000000000004b0 .LASF84
     /tmp/ccbBQbSz.s:4076   .debug_str:000000000000048b .LASF85
     /tmp/ccbBQbSz.s:4180   .debug_str:0000000000000761 .LASF86
     /tmp/ccbBQbSz.s:4054   .debug_str:00000000000003ec .LASF87
     /tmp/ccbBQbSz.s:3964   .debug_str:0000000000000102 .LASF88
     /tmp/ccbBQbSz.s:4146   .debug_str:0000000000000691 .LASF89
     /tmp/ccbBQbSz.s:4048   .debug_str:00000000000003ad .LASF90
     /tmp/ccbBQbSz.s:4058   .debug_str:0000000000000403 .LASF94
     /tmp/ccbBQbSz.s:4098   .debug_str:0000000000000512 .LASF91
     /tmp/ccbBQbSz.s:4012   .debug_str:00000000000002c3 .LASF93
     /tmp/ccbBQbSz.s:3976   .debug_str:0000000000000176 .LASF95
     /tmp/ccbBQbSz.s:3926   .debug_str:0000000000000000 .LASF96
     /tmp/ccbBQbSz.s:3958   .debug_str:00000000000000eb .LASF97
     /tmp/ccbBQbSz.s:4090   .debug_str:00000000000004ce .LASF98
     /tmp/ccbBQbSz.s:4072   .debug_str:0000000000000460 .LASF99
     /tmp/ccbBQbSz.s:3942   .debug_str:0000000000000052 .LASF100
     /tmp/ccbBQbSz.s:4034   .debug_str:0000000000000344 .LASF101
     /tmp/ccbBQbSz.s:4074   .debug_str:000000000000046a .LASF102
     /tmp/ccbBQbSz.s:4052   .debug_str:00000000000003dd .LASF103
     /tmp/ccbBQbSz.s:4142   .debug_str:0000000000000655 .LASF104
     /tmp/ccbBQbSz.s:4008   .debug_str:00000000000002a0 .LASF105
     /tmp/ccbBQbSz.s:4006   .debug_str:0000000000000274 .LASF106
     /tmp/ccbBQbSz.s:3948   .debug_str:000000000000008f .LASF107
     /tmp/ccbBQbSz.s:4066   .debug_str:0000000000000431 .LASF108
     /tmp/ccbBQbSz.s:4002   .debug_str:0000000000000235 .LASF109
     /tmp/ccbBQbSz.s:4252   .debug_str:00000000000009ef .LASF111
     /tmp/ccbBQbSz.s:4118   .debug_str:00000000000005be .LASF112
     /tmp/ccbBQbSz.s:3996   .debug_str:0000000000000204 .LASF113
     /tmp/ccbBQbSz.s:4176   .debug_str:000000000000074b .LASF114
     /tmp/ccbBQbSz.s:4178   .debug_str:000000000000075a .LASF115
     /tmp/ccbBQbSz.s:4250   .debug_str:00000000000009de .LASF116
     /tmp/ccbBQbSz.s:4086   .debug_str:00000000000004c1 .LASF117
     /tmp/ccbBQbSz.s:4206   .debug_str:00000000000008ab .LASF118
     /tmp/ccbBQbSz.s:3946   .debug_str:0000000000000089 .LASF119
     /tmp/ccbBQbSz.s:3956   .debug_str:00000000000000db .LASF120
     /tmp/ccbBQbSz.s:4192   .debug_str:00000000000007af .LASF122
     /tmp/ccbBQbSz.s:4220   .debug_str:00000000000008f8 .LASF123
     /tmp/ccbBQbSz.s:4204   .debug_str:000000000000089e .LASF124
     /tmp/ccbBQbSz.s:4168   .debug_str:000000000000071f .LASF164
     /tmp/ccbBQbSz.s:4254   .debug_str:00000000000009fb .LASF125
     /tmp/ccbBQbSz.s:4016   .debug_str:00000000000002d5 .LASF126
     /tmp/ccbBQbSz.s:4162   .debug_str:0000000000000700 .LASF127
     /tmp/ccbBQbSz.s:4110   .debug_str:0000000000000560 .LASF128
     /tmp/ccbBQbSz.s:4186   .debug_str:0000000000000787 .LASF129
GAS LISTING /tmp/ccbBQbSz.s 			page 34


     /tmp/ccbBQbSz.s:4112   .debug_str:000000000000057b .LASF130
     /tmp/ccbBQbSz.s:3990   .debug_str:00000000000001d2 .LASF131
     /tmp/ccbBQbSz.s:3978   .debug_str:000000000000017b .LASF132
     /tmp/ccbBQbSz.s:3984   .debug_str:00000000000001aa .LASF133
     /tmp/ccbBQbSz.s:4080   .debug_str:00000000000004a7 .LASF134
     /tmp/ccbBQbSz.s:4188   .debug_str:0000000000000795 .LASF135
     /tmp/ccbBQbSz.s:4216   .debug_str:00000000000008e5 .LASF136
     /tmp/ccbBQbSz.s:4234   .debug_str:0000000000000950 .LASF137
     /tmp/ccbBQbSz.s:60     .text:0000000000000020 .LFB31
     /tmp/ccbBQbSz.s:960    .text:0000000000000344 .LFE31
     /tmp/ccbBQbSz.s:4198   .debug_str:0000000000000887 .LASF138
     /tmp/ccbBQbSz.s:3554   .debug_loc:0000000000000000 .LLST0
     /tmp/ccbBQbSz.s:4224   .debug_str:0000000000000905 .LASF139
     /tmp/ccbBQbSz.s:3571   .debug_loc:000000000000004b .LLST1
     /tmp/ccbBQbSz.s:4164   .debug_str:0000000000000713 .LASF140
     /tmp/ccbBQbSz.s:3582   .debug_loc:0000000000000081 .LLST2
     /tmp/ccbBQbSz.s:3882   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccbBQbSz.s:4134   .debug_str:000000000000063a .LASF141
     /tmp/ccbBQbSz.s:3597   .debug_loc:00000000000000ca .LLST3
     /tmp/ccbBQbSz.s:560    .text:00000000000001d0 .LBB143
     /tmp/ccbBQbSz.s:586    .text:00000000000001ec .LBE143
     /tmp/ccbBQbSz.s:4190   .debug_str:00000000000007a0 .LASF142
     /tmp/ccbBQbSz.s:3648   .debug_loc:00000000000001be .LLST24
     /tmp/ccbBQbSz.s:3655   .debug_loc:00000000000001e1 .LLST25
     /tmp/ccbBQbSz.s:573    .text:00000000000001dc .LVL30
     /tmp/ccbBQbSz.s:576    .text:00000000000001e8 .LVL31
     /tmp/ccbBQbSz.s:650    .text:000000000000021c .LBB132
     /tmp/ccbBQbSz.s:675    .text:000000000000023c .LBE132
     /tmp/ccbBQbSz.s:3662   .debug_loc:0000000000000204 .LLST23
     /tmp/ccbBQbSz.s:663    .text:0000000000000228 .LVL39
     /tmp/ccbBQbSz.s:666    .text:0000000000000234 .LVL40
     /tmp/ccbBQbSz.s:680    .text:0000000000000240 .LBB120
     /tmp/ccbBQbSz.s:701    .text:0000000000000250 .LBE120
     /tmp/ccbBQbSz.s:4208   .debug_str:00000000000008ba .LASF143
     /tmp/ccbBQbSz.s:3669   .debug_loc:0000000000000227 .LLST21
     /tmp/ccbBQbSz.s:685    .text:0000000000000248 .LBB121
     /tmp/ccbBQbSz.s:693    .text:000000000000024c .LBE121
     /tmp/ccbBQbSz.s:3676   .debug_loc:000000000000024a .LLST22
     /tmp/ccbBQbSz.s:684    .text:0000000000000248 .LVL42
     /tmp/ccbBQbSz.s:706    .text:0000000000000254 .LBB111
     /tmp/ccbBQbSz.s:720    .text:0000000000000268 .LBE111
     /tmp/ccbBQbSz.s:4096   .debug_str:0000000000000505 .LASF144
     /tmp/ccbBQbSz.s:3683   .debug_loc:000000000000026d .LLST20
     /tmp/ccbBQbSz.s:710    .text:000000000000025c .LVL45
     /tmp/ccbBQbSz.s:712    .text:0000000000000264 .LVL46
     /tmp/ccbBQbSz.s:4232   .debug_str:0000000000000949 .LASF145
     /tmp/ccbBQbSz.s:3690   .debug_loc:0000000000000290 .LLST15
     /tmp/ccbBQbSz.s:4056   .debug_str:00000000000003f5 .LASF146
     /tmp/ccbBQbSz.s:3697   .debug_loc:00000000000002b3 .LLST16
     /tmp/ccbBQbSz.s:3704   .debug_loc:00000000000002d6 .LLST17
     /tmp/ccbBQbSz.s:3711   .debug_loc:00000000000002f9 .LLST18
     /tmp/ccbBQbSz.s:3722   .debug_loc:000000000000032f .LLST19
     /tmp/ccbBQbSz.s:752    .text:0000000000000280 .LVL51
     /tmp/ccbBQbSz.s:755    .text:000000000000028c .LVL52
     /tmp/ccbBQbSz.s:764    .text:00000000000002a0 .LVL55
     /tmp/ccbBQbSz.s:794    .text:00000000000002bc .LBB95
     /tmp/ccbBQbSz.s:806    .text:00000000000002c8 .LBE95
GAS LISTING /tmp/ccbBQbSz.s 			page 35


     /tmp/ccbBQbSz.s:3739   .debug_loc:000000000000037a .LLST14
     /tmp/ccbBQbSz.s:798    .text:00000000000002c4 .LVL60
     /tmp/ccbBQbSz.s:3746   .debug_loc:000000000000039d .LLST11
     /tmp/ccbBQbSz.s:3962   .debug_str:00000000000000fd .LASF147
     /tmp/ccbBQbSz.s:3753   .debug_loc:00000000000003c0 .LLST12
     /tmp/ccbBQbSz.s:3760   .debug_loc:00000000000003e3 .LLST13
     /tmp/ccbBQbSz.s:840    .text:00000000000002ec .LVL66
     /tmp/ccbBQbSz.s:870    .text:0000000000000308 .LBB80
     /tmp/ccbBQbSz.s:891    .text:0000000000000318 .LBE80
     /tmp/ccbBQbSz.s:3777   .debug_loc:000000000000042e .LLST9
     /tmp/ccbBQbSz.s:3784   .debug_loc:0000000000000451 .LLST10
     /tmp/ccbBQbSz.s:883    .text:0000000000000314 .LVL72
     /tmp/ccbBQbSz.s:896    .text:000000000000031c .LBB77
     /tmp/ccbBQbSz.s:917    .text:000000000000032c .LBE77
     /tmp/ccbBQbSz.s:3791   .debug_loc:0000000000000474 .LLST7
     /tmp/ccbBQbSz.s:3798   .debug_loc:0000000000000497 .LLST8
     /tmp/ccbBQbSz.s:909    .text:0000000000000328 .LVL75
     /tmp/ccbBQbSz.s:922    .text:0000000000000330 .LBB76
     /tmp/ccbBQbSz.s:943    .text:0000000000000340 .LBE76
     /tmp/ccbBQbSz.s:3805   .debug_loc:00000000000004ba .LLST6
     /tmp/ccbBQbSz.s:935    .text:000000000000033c .LVL78
     /tmp/ccbBQbSz.s:371    .text:00000000000000d4 .LBB71
     /tmp/ccbBQbSz.s:461    .text:000000000000017c .LBE71
     /tmp/ccbBQbSz.s:3812   .debug_loc:00000000000004dd .LLST4
     /tmp/ccbBQbSz.s:4170   .debug_str:000000000000072c .LASF148
     /tmp/ccbBQbSz.s:3819   .debug_loc:0000000000000500 .LLST5
     /tmp/ccbBQbSz.s:373    .text:00000000000000d4 .LBB72
     /tmp/ccbBQbSz.s:390    .text:00000000000000e0 .LBE72
     /tmp/ccbBQbSz.s:392    .text:00000000000000e0 .LBB74
     /tmp/ccbBQbSz.s:408    .text:00000000000000ec .LBE74
     /tmp/ccbBQbSz.s:413    .text:00000000000000fc .LVL8
     /tmp/ccbBQbSz.s:418    .text:0000000000000108 .LVL9
     /tmp/ccbBQbSz.s:423    .text:0000000000000118 .LVL10
     /tmp/ccbBQbSz.s:428    .text:0000000000000128 .LVL11
     /tmp/ccbBQbSz.s:433    .text:0000000000000134 .LVL12
     /tmp/ccbBQbSz.s:438    .text:0000000000000144 .LVL13
     /tmp/ccbBQbSz.s:443    .text:0000000000000154 .LVL14
     /tmp/ccbBQbSz.s:448    .text:0000000000000160 .LVL15
     /tmp/ccbBQbSz.s:453    .text:0000000000000170 .LVL16
     /tmp/ccbBQbSz.s:457    .text:0000000000000178 .LVL17
     /tmp/ccbBQbSz.s:592    .text:00000000000001f0 .LBB156
     /tmp/ccbBQbSz.s:603    .text:00000000000001f4 .LBE156
     /tmp/ccbBQbSz.s:3826   .debug_loc:0000000000000523 .LLST26
     /tmp/ccbBQbSz.s:605    .text:00000000000001f4 .LBB158
     /tmp/ccbBQbSz.s:617    .text:00000000000001f8 .LBE158
     /tmp/ccbBQbSz.s:3833   .debug_loc:0000000000000546 .LLST27
     /tmp/ccbBQbSz.s:814    .text:00000000000002d4 .LVL62
     /tmp/ccbBQbSz.s:84     .text:0000000000000044 .LBB51
     /tmp/ccbBQbSz.s:101    .text:0000000000000050 .LBE51
     /tmp/ccbBQbSz.s:103    .text:0000000000000050 .LBB53
     /tmp/ccbBQbSz.s:116    .text:0000000000000054 .LBE53
     /tmp/ccbBQbSz.s:118    .text:0000000000000054 .LBB55
     /tmp/ccbBQbSz.s:131    .text:0000000000000058 .LBE55
     /tmp/ccbBQbSz.s:487    .text:000000000000019c .LBB183
     /tmp/ccbBQbSz.s:495    .text:00000000000001a0 .LBE183
     /tmp/ccbBQbSz.s:3840   .debug_loc:0000000000000569 .LLST28
     /tmp/ccbBQbSz.s:501    .text:00000000000001a4 .LBB185
GAS LISTING /tmp/ccbBQbSz.s 			page 36


     /tmp/ccbBQbSz.s:516    .text:00000000000001b0 .LBE185
     /tmp/ccbBQbSz.s:3847   .debug_loc:000000000000058c .LLST29
     /tmp/ccbBQbSz.s:522    .text:00000000000001b8 .LBB187
     /tmp/ccbBQbSz.s:533    .text:00000000000001bc .LBE187
     /tmp/ccbBQbSz.s:3855   .debug_loc:00000000000005b0 .LLST30
     /tmp/ccbBQbSz.s:535    .text:00000000000001bc .LBB189
     /tmp/ccbBQbSz.s:549    .text:00000000000001c4 .LBE189
     /tmp/ccbBQbSz.s:3862   .debug_loc:00000000000005d3 .LLST31
     /tmp/ccbBQbSz.s:520    .text:00000000000001b8 .LVL24
     /tmp/ccbBQbSz.s:554    .text:00000000000001cc .LVL27
     /tmp/ccbBQbSz.s:10     .text:0000000000000000 .LFB30
     /tmp/ccbBQbSz.s:40     .text:0000000000000020 .LFE30
     /tmp/ccbBQbSz.s:4014   .debug_str:00000000000002d0 .LASF149
     /tmp/ccbBQbSz.s:4214   .debug_str:00000000000008e0 .LASF150
     /tmp/ccbBQbSz.s:4038   .debug_str:0000000000000365 .LASF151
     /tmp/ccbBQbSz.s:4104   .debug_str:0000000000000542 .LASF153
     /tmp/ccbBQbSz.s:3928   .debug_str:0000000000000005 .LASF152
     /tmp/ccbBQbSz.s:4102   .debug_str:0000000000000535 .LASF154
     /tmp/ccbBQbSz.s:4030   .debug_str:000000000000032d .LASF155
     /tmp/ccbBQbSz.s:4020   .debug_str:00000000000002ee .LASF156
     /tmp/ccbBQbSz.s:112    .text:0000000000000054 .LVL1
     /tmp/ccbBQbSz.s:591    .text:00000000000001f0 .LVL33
     /tmp/ccbBQbSz.s:613    .text:00000000000001f8 .LVL35
     /tmp/ccbBQbSz.s:642    .text:000000000000021c .LVL37
     /tmp/ccbBQbSz.s:127    .text:0000000000000058 .LVL2
     /tmp/ccbBQbSz.s:632    .text:0000000000000208 .LVL36
     /tmp/ccbBQbSz.s:99     .text:0000000000000050 .LVL0
     /tmp/ccbBQbSz.s:159    .text:0000000000000080 .LVL4
     /tmp/ccbBQbSz.s:459    .text:000000000000017c .LVL18
     /tmp/ccbBQbSz.s:478    .text:0000000000000184 .LVL19
     /tmp/ccbBQbSz.s:546    .text:00000000000001c4 .LVL26
     /tmp/ccbBQbSz.s:154    .text:000000000000007c .LVL3
     /tmp/ccbBQbSz.s:382    .text:00000000000000d8 .LVL5
     /tmp/ccbBQbSz.s:556    .text:00000000000001d0 .LVL28
     /tmp/ccbBQbSz.s:677    .text:0000000000000240 .LVL41
     /tmp/ccbBQbSz.s:703    .text:0000000000000254 .LVL44
     /tmp/ccbBQbSz.s:722    .text:000000000000026c .LVL47
     /tmp/ccbBQbSz.s:790    .text:00000000000002bc .LVL59
     /tmp/ccbBQbSz.s:808    .text:00000000000002cc .LVL61
     /tmp/ccbBQbSz.s:816    .text:00000000000002d8 .LVL63
     /tmp/ccbBQbSz.s:866    .text:0000000000000308 .LVL70
     /tmp/ccbBQbSz.s:893    .text:000000000000031c .LVL73
     /tmp/ccbBQbSz.s:919    .text:0000000000000330 .LVL76
     /tmp/ccbBQbSz.s:568    .text:00000000000001d4 .LVL29
     /tmp/ccbBQbSz.s:583    .text:00000000000001ec .LVL32
     /tmp/ccbBQbSz.s:658    .text:0000000000000220 .LVL38
     /tmp/ccbBQbSz.s:691    .text:000000000000024c .LVL43
     /tmp/ccbBQbSz.s:735    .text:0000000000000270 .LVL48
     /tmp/ccbBQbSz.s:741    .text:0000000000000274 .LVL49
     /tmp/ccbBQbSz.s:747    .text:0000000000000278 .LVL50
     /tmp/ccbBQbSz.s:757    .text:0000000000000290 .LVL53
     /tmp/ccbBQbSz.s:762    .text:0000000000000298 .LVL54
     /tmp/ccbBQbSz.s:768    .text:00000000000002a4 .LVL56
     /tmp/ccbBQbSz.s:774    .text:00000000000002ac .LVL57
     /tmp/ccbBQbSz.s:784    .text:00000000000002b4 .LVL58
     /tmp/ccbBQbSz.s:828    .text:00000000000002dc .LVL64
     /tmp/ccbBQbSz.s:834    .text:00000000000002e0 .LVL65
GAS LISTING /tmp/ccbBQbSz.s 			page 37


     /tmp/ccbBQbSz.s:844    .text:00000000000002f0 .LVL67
     /tmp/ccbBQbSz.s:850    .text:00000000000002f8 .LVL68
     /tmp/ccbBQbSz.s:860    .text:0000000000000300 .LVL69
     /tmp/ccbBQbSz.s:878    .text:000000000000030c .LVL71
     /tmp/ccbBQbSz.s:904    .text:0000000000000320 .LVL74
     /tmp/ccbBQbSz.s:930    .text:0000000000000334 .LVL77
     /tmp/ccbBQbSz.s:388    .text:00000000000000e0 .LVL6
     /tmp/ccbBQbSz.s:406    .text:00000000000000ec .LVL7
     /tmp/ccbBQbSz.s:600    .text:00000000000001f4 .LVL34
     /tmp/ccbBQbSz.s:486    .text:000000000000019c .LVL20
     /tmp/ccbBQbSz.s:493    .text:00000000000001a0 .LVL21
     /tmp/ccbBQbSz.s:500    .text:00000000000001a4 .LVL22
     /tmp/ccbBQbSz.s:513    .text:00000000000001b0 .LVL23
     /tmp/ccbBQbSz.s:530    .text:00000000000001bc .LVL25
     /tmp/ccbBQbSz.s:970    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccbBQbSz.s:146    .text:0000000000000078 .LBB59
     /tmp/ccbBQbSz.s:162    .text:0000000000000084 .LBE59
     /tmp/ccbBQbSz.s:168    .text:0000000000000084 .LBB161
     /tmp/ccbBQbSz.s:175    .text:000000000000008c .LBE161
     /tmp/ccbBQbSz.s:181    .text:000000000000008c .LBB162
     /tmp/ccbBQbSz.s:190    .text:0000000000000094 .LBE162
     /tmp/ccbBQbSz.s:196    .text:0000000000000094 .LBB163
     /tmp/ccbBQbSz.s:207    .text:000000000000009c .LBE163
     /tmp/ccbBQbSz.s:213    .text:000000000000009c .LBB164
     /tmp/ccbBQbSz.s:226    .text:00000000000000a4 .LBE164
     /tmp/ccbBQbSz.s:232    .text:00000000000000a4 .LBB165
     /tmp/ccbBQbSz.s:247    .text:00000000000000ac .LBE165
     /tmp/ccbBQbSz.s:253    .text:00000000000000ac .LBB166
     /tmp/ccbBQbSz.s:270    .text:00000000000000b4 .LBE166
     /tmp/ccbBQbSz.s:276    .text:00000000000000b4 .LBB167
     /tmp/ccbBQbSz.s:295    .text:00000000000000bc .LBE167
     /tmp/ccbBQbSz.s:301    .text:00000000000000bc .LBB168
     /tmp/ccbBQbSz.s:322    .text:00000000000000c4 .LBE168
     /tmp/ccbBQbSz.s:328    .text:00000000000000c4 .LBB169
     /tmp/ccbBQbSz.s:351    .text:00000000000000cc .LBE169
     /tmp/ccbBQbSz.s:357    .text:00000000000000cc .LBB170
     /tmp/ccbBQbSz.s:473    .text:000000000000017c .LBE170
     /tmp/ccbBQbSz.s:558    .text:00000000000001d0 .LBB171
     /tmp/ccbBQbSz.s:618    .text:00000000000001f8 .LBE171
     /tmp/ccbBQbSz.s:647    .text:000000000000021c .LBB172
     /tmp/ccbBQbSz.s:956    .text:0000000000000344 .LBE172
     /tmp/ccbBQbSz.s:819    .text:00000000000002d8 .LBB84
     /tmp/ccbBQbSz.s:858    .text:00000000000002fc .LBE84
     /tmp/ccbBQbSz.s:862    .text:0000000000000300 .LBB85
     /tmp/ccbBQbSz.s:868    .text:0000000000000308 .LBE85
     /tmp/ccbBQbSz.s:725    .text:000000000000026c .LBB102
     /tmp/ccbBQbSz.s:782    .text:00000000000002b0 .LBE102
     /tmp/ccbBQbSz.s:786    .text:00000000000002b4 .LBB103
     /tmp/ccbBQbSz.s:792    .text:00000000000002bc .LBE103

UNDEFINED SYMBOLS
_Z12pprintStringPKc
_Z12printIntegerm
__getc
_ZN3TCB11timeCounterE
_ZN3TCB7runningE
_ZN3TCB8dispatchEv
GAS LISTING /tmp/ccbBQbSz.s 			page 38


console_handler
_ZN15MemoryAllocator8InstanceEv
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator19getLargestFreeBlockEv
_ZN3TCB12createThreadEPFvPvES0_Pm
_ZN3TCB4exitEv
_ZN3SEM4openEj
_ZN3SEM5closeEv
_ZN3SEM4waitEv
_ZN3SEM6signalEv
