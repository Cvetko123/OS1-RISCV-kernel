GAS LISTING /tmp/ccTDOAKR.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB34:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 9/8/25.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../lib/console.h"
   7:src/Riscv.cpp **** #include "../h/syscall_c.hpp"
   8:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   9:src/Riscv.cpp **** #include  "../h/print.hpp"
  10:src/Riscv.cpp **** #include "../h/SList.hpp"
  11:src/Riscv.cpp **** using Body=void(*)(void*);
  12:src/Riscv.cpp **** 
  13:src/Riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 13 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  14:src/Riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 14 5
  21              		.loc 1 14 38 is_stmt 0
  22              	#APP
  23              	# 14 "src/Riscv.cpp" 1
  15              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 15 5 is_stmt 1
  27              		.loc 1 15 29 is_stmt 0
  28              	# 15 "src/Riscv.cpp" 1
  16              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 16 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE34:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
GAS LISTING /tmp/ccTDOAKR.s 			page 2


  44              	.LC0:
  45 0000 73636175 		.string	"scause:"
  45      73653A00 
  46              		.align	3
  47              	.LC1:
  48 0008 0A00     		.string	"\n"
  49 000a 00000000 		.align	3
  49      0000
  50              	.LC2:
  51 0010 73747661 		.string	"stval:"
  51      6C3A00
  52 0017 00       		.align	3
  53              	.LC3:
  54 0018 73657063 		.string	"sepc:"
  54      3A00
  55              		.text
  56              		.align	2
  57              		.globl	_ZN5Riscv21SupervisorTrapHandlerEv
  59              	_ZN5Riscv21SupervisorTrapHandlerEv:
  60              	.LFB35:
  17:src/Riscv.cpp **** 
  18:src/Riscv.cpp **** // void Riscv::restorePrivilege()
  19:src/Riscv.cpp **** // {
  20:src/Riscv.cpp **** //     if(TCB::running->isSysThread())
  21:src/Riscv.cpp **** //         ms_sstatus(SSTATUS_SPP);
  22:src/Riscv.cpp **** //     else
  23:src/Riscv.cpp **** //         mc_sstatus(SSTATUS_SPP);
  24:src/Riscv.cpp **** // }
  25:src/Riscv.cpp **** 
  26:src/Riscv.cpp **** 
  27:src/Riscv.cpp **** void Riscv::SupervisorTrapHandler() {
  61              		.loc 1 27 37 is_stmt 1
  62              		.cfi_startproc
  63 0020 130101FA 		addi	sp,sp,-96
  64              		.cfi_def_cfa_offset 96
  65 0024 233C1104 		sd	ra,88(sp)
  66 0028 23388104 		sd	s0,80(sp)
  67 002c 23349104 		sd	s1,72(sp)
  68 0030 23302105 		sd	s2,64(sp)
  69 0034 233C3103 		sd	s3,56(sp)
  70 0038 23384103 		sd	s4,48(sp)
  71 003c 23345103 		sd	s5,40(sp)
  72              		.cfi_offset 1, -8
  73              		.cfi_offset 8, -16
  74              		.cfi_offset 9, -24
  75              		.cfi_offset 18, -32
  76              		.cfi_offset 19, -40
  77              		.cfi_offset 20, -48
  78              		.cfi_offset 21, -56
  79 0040 13040106 		addi	s0,sp,96
  80              		.cfi_def_cfa 8, 0
  28:src/Riscv.cpp ****     uint64 sepc;
  81              		.loc 1 28 5
  29:src/Riscv.cpp ****     uint64 sstatus;
  82              		.loc 1 29 5
  30:src/Riscv.cpp ****     uint64 scause=get_scause();
  83              		.loc 1 30 5
GAS LISTING /tmp/ccTDOAKR.s 			page 3


  84              	.LBB53:
  85              	.LBB54:
  86              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 9/8/25.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_COPY_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_COPY_RISCV_HPP
   7:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   8:src/../h/Riscv.hpp **** 
   9:src/../h/Riscv.hpp **** class Riscv {
  10:src/../h/Riscv.hpp **** public:
  11:src/../h/Riscv.hpp ****     static void set_stvec(uint64 stvec);
  12:src/../h/Riscv.hpp ****     static void set_sepc(uint64 sepc);
  13:src/../h/Riscv.hpp ****     static uint64 get_sepc();
  14:src/../h/Riscv.hpp ****     static void set_sstatus(uint64 sstatus);
  15:src/../h/Riscv.hpp ****     static uint64 get_sstatus();
  16:src/../h/Riscv.hpp ****     static uint64 get_scause();
  17:src/../h/Riscv.hpp ****     static uint64 get_stval();
  18:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  19:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  20:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  21:src/../h/Riscv.hpp ****     static void ms_sie(uint64 mask);
  22:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  23:src/../h/Riscv.hpp ****     {
  24:src/../h/Riscv.hpp ****         SSTATUS_SIE=(1UL<<1),
  25:src/../h/Riscv.hpp ****         SSTATUS_SPIE=(1UL<<5),
  26:src/../h/Riscv.hpp ****         SSTATUS_SPP=(1UL<<8)
  27:src/../h/Riscv.hpp ****     };
  28:src/../h/Riscv.hpp ****     enum BitMaskSip: uint64
  29:src/../h/Riscv.hpp ****     {
  30:src/../h/Riscv.hpp ****         SIP_SSIP=(1UL<<1),
  31:src/../h/Riscv.hpp ****         SIP_STIP=(1UL<<5),
  32:src/../h/Riscv.hpp ****         SIP_SEIP=(1UL<<9)
  33:src/../h/Riscv.hpp ****     };
  34:src/../h/Riscv.hpp ****     enum BitMaskSie: uint64
  35:src/../h/Riscv.hpp ****     {
  36:src/../h/Riscv.hpp ****         SIE_SSIE=(1UL<<1),
  37:src/../h/Riscv.hpp ****         SIE_SEIE=(1UL<<9)
  38:src/../h/Riscv.hpp ****     };
  39:src/../h/Riscv.hpp **** 
  40:src/../h/Riscv.hpp **** 
  41:src/../h/Riscv.hpp ****     static void SupervisorTrap();
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp ****     static void restorePrivilege();
  44:src/../h/Riscv.hpp ****     static void popSppSpie();
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp **** 
  47:src/../h/Riscv.hpp **** 
  48:src/../h/Riscv.hpp ****     static void SupervisorTrapHandler();
  49:src/../h/Riscv.hpp **** 
  50:src/../h/Riscv.hpp **** 
  51:src/../h/Riscv.hpp **** };
  52:src/../h/Riscv.hpp **** 
  53:src/../h/Riscv.hpp **** 
  54:src/../h/Riscv.hpp **** inline void Riscv::set_stvec(uint64 stvec) {
GAS LISTING /tmp/ccTDOAKR.s 			page 4


  55:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[x]" :: [x] "r" (stvec));
  56:src/../h/Riscv.hpp **** }
  57:src/../h/Riscv.hpp **** 
  58:src/../h/Riscv.hpp **** inline void Riscv::set_sepc(uint64 sepc) {
  59:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[x]" :: [x] "r" (sepc));
  60:src/../h/Riscv.hpp **** }
  61:src/../h/Riscv.hpp **** 
  62:src/../h/Riscv.hpp **** inline uint64 Riscv::get_sepc() {
  63:src/../h/Riscv.hpp ****     uint64 sepc;
  64:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sepc" : [x] "=r" (sepc));
  65:src/../h/Riscv.hpp ****     return sepc;
  66:src/../h/Riscv.hpp **** }
  67:src/../h/Riscv.hpp **** 
  68:src/../h/Riscv.hpp **** inline void Riscv::set_sstatus(uint64 sstatus) {
  69:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[x]" :: [x] "r" (sstatus));
  70:src/../h/Riscv.hpp **** }
  71:src/../h/Riscv.hpp **** 
  72:src/../h/Riscv.hpp **** inline uint64 Riscv::get_sstatus() {
  73:src/../h/Riscv.hpp ****     uint64 sstatus;
  74:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sstatus" : [x] "=r" (sstatus));
  75:src/../h/Riscv.hpp ****     return sstatus;
  76:src/../h/Riscv.hpp **** }
  77:src/../h/Riscv.hpp **** 
  78:src/../h/Riscv.hpp **** inline uint64 Riscv::get_scause() {
  79:src/../h/Riscv.hpp ****     uint64 volatile scause;
  87              		.loc 2 79 5
  80:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %[scause], scause":[scause]"=r"(scause));
  88              		.loc 2 80 5
  89              		.loc 2 80 68 is_stmt 0
  90              	#APP
  91              	# 80 "src/../h/Riscv.hpp" 1
  81              	    return scause;
  92              		csrr a5, scause
  93              	# 0 "" 2
  94              	#NO_APP
  95 0048 2334F4FA 		sd	a5,-88(s0)
  96              		.loc 2 81 5 is_stmt 1
  97              		.loc 2 81 12 is_stmt 0
  98 004c 033784FA 		ld	a4,-88(s0)
  99              	.LVL0:
 100              	.LBE54:
 101              	.LBE53:
  31:src/Riscv.cpp ****     sepc=get_sepc();
 102              		.loc 1 31 5 is_stmt 1
 103              	.LBB55:
 104              	.LBB56:
  63:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sepc" : [x] "=r" (sepc));
 105              		.loc 2 63 5
  64:src/../h/Riscv.hpp ****     return sepc;
 106              		.loc 2 64 5
  64:src/../h/Riscv.hpp ****     return sepc;
 107              		.loc 2 64 58 is_stmt 0
 108              	#APP
 109              	# 64 "src/../h/Riscv.hpp" 1
 110              		csrr s1,sepc
 111              	# 0 "" 2
 112              	.LVL1:
GAS LISTING /tmp/ccTDOAKR.s 			page 5


  65:src/../h/Riscv.hpp **** }
 113              		.loc 2 65 5 is_stmt 1
 114              	#NO_APP
 115              	.LBE56:
 116              	.LBE55:
  32:src/Riscv.cpp ****     sstatus=get_sstatus();
 117              		.loc 1 32 5
 118              	.LBB57:
 119              	.LBB58:
  73:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sstatus" : [x] "=r" (sstatus));
 120              		.loc 2 73 5
  74:src/../h/Riscv.hpp ****     return sstatus;
 121              		.loc 2 74 5
  74:src/../h/Riscv.hpp ****     return sstatus;
 122              		.loc 2 74 64 is_stmt 0
 123              	#APP
 124              	# 74 "src/../h/Riscv.hpp" 1
 125              		csrr s2,sstatus
 126              	# 0 "" 2
 127              	.LVL2:
  75:src/../h/Riscv.hpp **** }
 128              		.loc 2 75 5 is_stmt 1
 129              	#NO_APP
 130              	.LBE58:
 131              	.LBE57:
  33:src/Riscv.cpp ****     if (scause == 0x8000000000000001UL) {
 132              		.loc 1 33 5
 133              	.LBB59:
 134 0058 9307F0FF 		li	a5,-1
 135 005c 9397F703 		slli	a5,a5,63
 136 0060 93871700 		addi	a5,a5,1
 137 0064 6300F712 		beq	a4,a5,.L26
 138              	.LBE59:
  34:src/Riscv.cpp ****         // interrupt from timer
  35:src/Riscv.cpp ****         TCB::timeCounter++;
  36:src/Riscv.cpp ****         SList::oneTick();
  37:src/Riscv.cpp ****         if (TCB::timeCounter >= TCB::running->getTimeSlice()) {
  38:src/Riscv.cpp ****             TCB::dispatch();
  39:src/Riscv.cpp ****             set_sepc(sepc);
  40:src/Riscv.cpp ****             set_sstatus(sstatus);
  41:src/Riscv.cpp ****         }
  42:src/Riscv.cpp ****         mc_sip(SIP_SSIP);
  43:src/Riscv.cpp ****     }
  44:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL) {
 139              		.loc 1 44 10
 140              	.LBB211:
 141              	.LBB60:
 142 0068 9307F0FF 		li	a5,-1
 143 006c 9397F703 		slli	a5,a5,63
 144 0070 93879700 		addi	a5,a5,9
 145 0074 6302F716 		beq	a4,a5,.L27
 146              	.LBB61:
  45:src/Riscv.cpp ****         // interrupt from keyboard
  46:src/Riscv.cpp ****         console_handler();
  47:src/Riscv.cpp ****     }
  48:src/Riscv.cpp ****     else {
  49:src/Riscv.cpp ****         uint64 syscode;
GAS LISTING /tmp/ccTDOAKR.s 			page 6


 147              		.loc 1 49 9
  50:src/Riscv.cpp ****     __asm__ volatile ("mv %[x], a0" : [x] "=r" (syscode));
 148              		.loc 1 50 5
 149              		.loc 1 50 58 is_stmt 0
 150              	#APP
 151              	# 50 "src/Riscv.cpp" 1
  51              	
 152              		mv a5, a0
 153              	# 0 "" 2
 154              	.LVL3:
  52:src/Riscv.cpp ****     if (syscode==MEM_ALLOC) {
 155              		.loc 1 52 5 is_stmt 1
 156              	#NO_APP
 157              	.LBB62:
 158 007c 13071000 		li	a4,1
 159              	.LVL4:
 160 0080 6382E716 		beq	a5,a4,.L28
 161              	.LBE62:
 162              	.LBE61:
 163              	.LBE60:
 164              	.LBE211:
  53:src/Riscv.cpp ****         size_t size_in_blocks;
  54:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (size_in_blocks));
  55:src/Riscv.cpp ****         void* ptr = MemoryAllocator::Instance()->mem_alloc(size_in_blocks * MEM_BLOCK_SIZE);
  56:src/Riscv.cpp ****         __asm__ volatile ("mv a0,%[x]" :: [x] "r" (ptr));
  57:src/Riscv.cpp ****     }
  58:src/Riscv.cpp ****     else if (syscode==MEM_FREE) {
 165              		.loc 1 58 10
 166              	.LBB212:
 167              	.LBB190:
 168              	.LBB177:
 169              	.LBB160:
 170              	.LBB63:
 171 0084 13072000 		li	a4,2
 172 0088 6384E71A 		beq	a5,a4,.L29
 173              	.LBE63:
 174              	.LBE160:
 175              	.LBE177:
 176              	.LBE190:
 177              	.LBE212:
  59:src/Riscv.cpp ****         void* ptr;
  60:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (ptr));
  61:src/Riscv.cpp ****         MemoryAllocator::Instance()->mem_free(ptr);
  62:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (0));
  63:src/Riscv.cpp ****     }
  64:src/Riscv.cpp ****     else if (syscode==MEM_GET_FREE_SPACE) {
 178              		.loc 1 64 10
 179              	.LBB213:
 180              	.LBB191:
 181              	.LBB178:
 182              	.LBB161:
 183              	.LBB148:
 184              	.LBB64:
 185 008c 13073000 		li	a4,3
 186 0090 6382E71C 		beq	a5,a4,.L30
 187              	.LBE64:
 188              	.LBE148:
GAS LISTING /tmp/ccTDOAKR.s 			page 7


 189              	.LBE161:
 190              	.LBE178:
 191              	.LBE191:
 192              	.LBE213:
  65:src/Riscv.cpp ****         size_t freeMem = MemoryAllocator::Instance()->getFreeMemSize();
  66:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (freeMem));
  67:src/Riscv.cpp ****     }
  68:src/Riscv.cpp ****     else if (syscode==MEM_GET_LARGEST_FREE_BLOCK) {
 193              		.loc 1 68 10
 194              	.LBB214:
 195              	.LBB192:
 196              	.LBB179:
 197              	.LBB162:
 198              	.LBB149:
 199              	.LBB137:
 200              	.LBB65:
 201 0094 13074000 		li	a4,4
 202 0098 6388E71C 		beq	a5,a4,.L31
 203              	.LBE65:
 204              	.LBE137:
 205              	.LBE149:
 206              	.LBE162:
 207              	.LBE179:
 208              	.LBE192:
 209              	.LBE214:
  69:src/Riscv.cpp ****         size_t largestBlock = MemoryAllocator::Instance()->getLargestFreeBlock();
  70:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (largestBlock));
  71:src/Riscv.cpp ****     }
  72:src/Riscv.cpp ****     else if (syscode==THREAD_CREATE) {
 210              		.loc 1 72 10
 211              	.LBB215:
 212              	.LBB193:
 213              	.LBB180:
 214              	.LBB163:
 215              	.LBB150:
 216              	.LBB138:
 217              	.LBB125:
 218              	.LBB66:
 219 009c 13071001 		li	a4,17
 220 00a0 6380E71E 		beq	a5,a4,.L32
 221              	.LBE66:
 222              	.LBE125:
 223              	.LBE138:
 224              	.LBE150:
 225              	.LBE163:
 226              	.LBE180:
 227              	.LBE193:
 228              	.LBE215:
  73:src/Riscv.cpp ****         thread_t* handle;
  74:src/Riscv.cpp ****         Body start_routine;
  75:src/Riscv.cpp ****         void* arg;
  76:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
  77:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (start_routine));
  78:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a3" : [x] "=r" (arg));
  79:src/Riscv.cpp **** 
  80:src/Riscv.cpp ****         uint64 *sp=(uint64*)MemoryAllocator::Instance()->mem_alloc(DEFAULT_STACK_SIZE);
  81:src/Riscv.cpp **** 
GAS LISTING /tmp/ccTDOAKR.s 			page 8


  82:src/Riscv.cpp **** 
  83:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
  84:src/Riscv.cpp ****         int ret=0;
  85:src/Riscv.cpp ****         if (*handle) {
  86:src/Riscv.cpp ****             ret=0;
  87:src/Riscv.cpp ****         }
  88:src/Riscv.cpp ****         else {
  89:src/Riscv.cpp ****             ret=1;
  90:src/Riscv.cpp ****         }
  91:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
  92:src/Riscv.cpp ****     }
  93:src/Riscv.cpp ****     else if (syscode==THREAD_EXIT) {
 229              		.loc 1 93 10
 230              	.LBB216:
 231              	.LBB194:
 232              	.LBB181:
 233              	.LBB164:
 234              	.LBB151:
 235              	.LBB139:
 236              	.LBB126:
 237              	.LBB116:
 238              	.LBB67:
 239 00a4 13072001 		li	a4,18
 240 00a8 6384E722 		beq	a5,a4,.L33
 241              	.LBE67:
 242              	.LBE116:
 243              	.LBE126:
 244              	.LBE139:
 245              	.LBE151:
 246              	.LBE164:
 247              	.LBE181:
 248              	.LBE194:
 249              	.LBE216:
  94:src/Riscv.cpp ****         int ret = TCB::exit();
  95:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
  96:src/Riscv.cpp ****     }
  97:src/Riscv.cpp ****     else if (syscode==THREAD_DISPATCH) {
 250              		.loc 1 97 10
 251              	.LBB217:
 252              	.LBB195:
 253              	.LBB182:
 254              	.LBB165:
 255              	.LBB152:
 256              	.LBB140:
 257              	.LBB127:
 258              	.LBB117:
 259              	.LBB107:
 260              	.LBB68:
 261 00ac 13073001 		li	a4,19
 262 00b0 6388E722 		beq	a5,a4,.L34
 263              	.LBE68:
 264              	.LBE107:
 265              	.LBE117:
 266              	.LBE127:
 267              	.LBE140:
 268              	.LBE152:
 269              	.LBE165:
GAS LISTING /tmp/ccTDOAKR.s 			page 9


 270              	.LBE182:
 271              	.LBE195:
 272              	.LBE217:
  98:src/Riscv.cpp ****         TCB::dispatch();
  99:src/Riscv.cpp ****     }
 100:src/Riscv.cpp ****     else if (syscode==SEM_OPEN) {
 273              		.loc 1 100 10
 274              	.LBB218:
 275              	.LBB196:
 276              	.LBB183:
 277              	.LBB166:
 278              	.LBB153:
 279              	.LBB141:
 280              	.LBB128:
 281              	.LBB118:
 282              	.LBB108:
 283              	.LBB100:
 284              	.LBB69:
 285 00b4 13071002 		li	a4,33
 286 00b8 638AE722 		beq	a5,a4,.L35
 287              	.LBE69:
 288              	.LBE100:
 289              	.LBE108:
 290              	.LBE118:
 291              	.LBE128:
 292              	.LBE141:
 293              	.LBE153:
 294              	.LBE166:
 295              	.LBE183:
 296              	.LBE196:
 297              	.LBE218:
 101:src/Riscv.cpp ****         sem_t* handle;
 102:src/Riscv.cpp ****         unsigned init;
 103:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 104:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (init));
 105:src/Riscv.cpp **** 
 106:src/Riscv.cpp ****         *handle=SEM::open(init);
 107:src/Riscv.cpp ****         int ret=0;
 108:src/Riscv.cpp ****         if (*handle) {
 109:src/Riscv.cpp ****             ret=0;
 110:src/Riscv.cpp ****         }
 111:src/Riscv.cpp ****         else {
 112:src/Riscv.cpp ****             ret=1;
 113:src/Riscv.cpp ****         }
 114:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 115:src/Riscv.cpp ****     }
 116:src/Riscv.cpp ****     else if (syscode==SEM_CLOSE) {
 298              		.loc 1 116 10
 299              	.LBB219:
 300              	.LBB197:
 301              	.LBB184:
 302              	.LBB167:
 303              	.LBB154:
 304              	.LBB142:
 305              	.LBB129:
 306              	.LBB119:
 307              	.LBB109:
GAS LISTING /tmp/ccTDOAKR.s 			page 10


 308              	.LBB101:
 309              	.LBB95:
 310              	.LBB70:
 311 00bc 13072002 		li	a4,34
 312 00c0 638EE724 		beq	a5,a4,.L36
 313              	.LBE70:
 314              	.LBE95:
 315              	.LBE101:
 316              	.LBE109:
 317              	.LBE119:
 318              	.LBE129:
 319              	.LBE142:
 320              	.LBE154:
 321              	.LBE167:
 322              	.LBE184:
 323              	.LBE197:
 324              	.LBE219:
 117:src/Riscv.cpp ****         sem_t handle;
 118:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 119:src/Riscv.cpp ****         int ret=handle->close();
 120:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 121:src/Riscv.cpp ****     }
 122:src/Riscv.cpp ****     else if (syscode==SEM_WAIT) {
 325              		.loc 1 122 10
 326              	.LBB220:
 327              	.LBB198:
 328              	.LBB185:
 329              	.LBB168:
 330              	.LBB155:
 331              	.LBB143:
 332              	.LBB130:
 333              	.LBB120:
 334              	.LBB110:
 335              	.LBB102:
 336              	.LBB96:
 337              	.LBB89:
 338              	.LBB71:
 339 00c4 13073002 		li	a4,35
 340 00c8 6384E726 		beq	a5,a4,.L37
 341              	.LBE71:
 342              	.LBE89:
 343              	.LBE96:
 344              	.LBE102:
 345              	.LBE110:
 346              	.LBE120:
 347              	.LBE130:
 348              	.LBE143:
 349              	.LBE155:
 350              	.LBE168:
 351              	.LBE185:
 352              	.LBE198:
 353              	.LBE220:
 123:src/Riscv.cpp ****         sem_t handle;
 124:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 125:src/Riscv.cpp ****         int ret=handle->wait();
 126:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 127:src/Riscv.cpp ****     }
GAS LISTING /tmp/ccTDOAKR.s 			page 11


 128:src/Riscv.cpp ****     else if (syscode==SEM_SIGNAL) {
 354              		.loc 1 128 10
 355              	.LBB221:
 356              	.LBB199:
 357              	.LBB186:
 358              	.LBB169:
 359              	.LBB156:
 360              	.LBB144:
 361              	.LBB131:
 362              	.LBB121:
 363              	.LBB111:
 364              	.LBB103:
 365              	.LBB97:
 366              	.LBB90:
 367              	.LBB85:
 368              	.LBB72:
 369 00cc 13074002 		li	a4,36
 370 00d0 638AE726 		beq	a5,a4,.L38
 371              	.LBE72:
 372              	.LBE85:
 373              	.LBE90:
 374              	.LBE97:
 375              	.LBE103:
 376              	.LBE111:
 377              	.LBE121:
 378              	.LBE131:
 379              	.LBE144:
 380              	.LBE156:
 381              	.LBE169:
 382              	.LBE186:
 383              	.LBE199:
 384              	.LBE221:
 129:src/Riscv.cpp ****         sem_t handle;
 130:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 131:src/Riscv.cpp ****         int ret=handle->signal();
 132:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 133:src/Riscv.cpp ****     }
 134:src/Riscv.cpp ****     else if (syscode==TIME_SLEEP) {
 385              		.loc 1 134 10
 386              	.LBB222:
 387              	.LBB200:
 388              	.LBB187:
 389              	.LBB170:
 390              	.LBB157:
 391              	.LBB145:
 392              	.LBB132:
 393              	.LBB122:
 394              	.LBB112:
 395              	.LBB104:
 396              	.LBB98:
 397              	.LBB91:
 398              	.LBB86:
 399              	.LBB82:
 400              	.LBB73:
 401 00d4 13071003 		li	a4,49
 402 00d8 6380E728 		beq	a5,a4,.L39
 403              	.LBB74:
GAS LISTING /tmp/ccTDOAKR.s 			page 12


 135:src/Riscv.cpp ****         time_t sleepTime;
 136:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (sleepTime));
 137:src/Riscv.cpp ****         int ret=TCB::sleep(sleepTime);
 138:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 139:src/Riscv.cpp ****     }
 140:src/Riscv.cpp ****     else {
 141:src/Riscv.cpp ****         uint64 scause= get_scause();
 404              		.loc 1 141 9
 405              	.LBB75:
 406              	.LBB76:
  79:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %[scause], scause":[scause]"=r"(scause));
 407              		.loc 2 79 5
  80:src/../h/Riscv.hpp ****     return scause;
 408              		.loc 2 80 5
  80:src/../h/Riscv.hpp ****     return scause;
 409              		.loc 2 80 68 is_stmt 0
 410              	#APP
 411              	# 80 "src/../h/Riscv.hpp" 1
 412              		csrr a5, scause
 413              	# 0 "" 2
 414              	.LVL5:
 415              	#NO_APP
 416 00e0 233CF4FA 		sd	a5,-72(s0)
 417              		.loc 2 81 5 is_stmt 1
 418              		.loc 2 81 12 is_stmt 0
 419 00e4 033A84FB 		ld	s4,-72(s0)
 420              	.LVL6:
 421              	.LBE76:
 422              	.LBE75:
 142:src/Riscv.cpp ****         uint64 stval= get_stval();
 423              		.loc 1 142 9 is_stmt 1
 424              	.LBB77:
 425              	.LBB78:
  82:src/../h/Riscv.hpp **** }
  83:src/../h/Riscv.hpp **** inline uint64 Riscv::get_stval() {
  84:src/../h/Riscv.hpp ****     uint64 volatile stval;
 426              		.loc 2 84 5
  85:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %[stval], stval":[stval]"=r"(stval));
 427              		.loc 2 85 5
 428              		.loc 2 85 64 is_stmt 0
 429              	#APP
 430              	# 85 "src/../h/Riscv.hpp" 1
  86              	    return stval;
 431              		csrr a5, stval
 432              	# 0 "" 2
 433              	#NO_APP
 434 00ec 2338F4FA 		sd	a5,-80(s0)
 435              		.loc 2 86 5 is_stmt 1
 436              		.loc 2 86 12 is_stmt 0
 437 00f0 833904FB 		ld	s3,-80(s0)
 438              	.LVL7:
 439              	.LBE78:
 440              	.LBE77:
 143:src/Riscv.cpp ****         pprintString("scause:");
 441              		.loc 1 143 9 is_stmt 1
 442              		.loc 1 143 21 is_stmt 0
 443 00f4 17050000 		lla	a0,.LC0
GAS LISTING /tmp/ccTDOAKR.s 			page 13


 443      13050500 
 444 00fc 97000000 		call	_Z12pprintStringPKc@plt
 444      E7800000 
 445              	.LVL8:
 144:src/Riscv.cpp ****         printInteger(scause);
 446              		.loc 1 144 9 is_stmt 1
 447              		.loc 1 144 21 is_stmt 0
 448 0104 13050A00 		mv	a0,s4
 449 0108 97000000 		call	_Z12printIntegerm@plt
 449      E7800000 
 450              	.LVL9:
 145:src/Riscv.cpp ****         pprintString("\n");
 451              		.loc 1 145 9 is_stmt 1
 452              		.loc 1 145 21 is_stmt 0
 453 0110 17050000 		lla	a0,.LC1
 453      13050500 
 454 0118 97000000 		call	_Z12pprintStringPKc@plt
 454      E7800000 
 455              	.LVL10:
 146:src/Riscv.cpp **** 
 147:src/Riscv.cpp ****         pprintString("stval:");
 456              		.loc 1 147 9 is_stmt 1
 457              		.loc 1 147 21 is_stmt 0
 458 0120 17050000 		lla	a0,.LC2
 458      13050500 
 459 0128 97000000 		call	_Z12pprintStringPKc@plt
 459      E7800000 
 460              	.LVL11:
 148:src/Riscv.cpp ****         printInteger(stval);
 461              		.loc 1 148 9 is_stmt 1
 462              		.loc 1 148 21 is_stmt 0
 463 0130 13850900 		mv	a0,s3
 464 0134 97000000 		call	_Z12printIntegerm@plt
 464      E7800000 
 465              	.LVL12:
 149:src/Riscv.cpp ****         pprintString("\n");
 466              		.loc 1 149 9 is_stmt 1
 467              		.loc 1 149 21 is_stmt 0
 468 013c 17050000 		lla	a0,.LC1
 468      13050500 
 469 0144 97000000 		call	_Z12pprintStringPKc@plt
 469      E7800000 
 470              	.LVL13:
 150:src/Riscv.cpp **** 
 151:src/Riscv.cpp ****         pprintString("sepc:");
 471              		.loc 1 151 9 is_stmt 1
 472              		.loc 1 151 21 is_stmt 0
 473 014c 17050000 		lla	a0,.LC3
 473      13050500 
 474 0154 97000000 		call	_Z12pprintStringPKc@plt
 474      E7800000 
 475              	.LVL14:
 152:src/Riscv.cpp ****         printInteger(sepc);
 476              		.loc 1 152 9 is_stmt 1
 477              		.loc 1 152 21 is_stmt 0
 478 015c 13850400 		mv	a0,s1
 479 0160 97000000 		call	_Z12printIntegerm@plt
GAS LISTING /tmp/ccTDOAKR.s 			page 14


 479      E7800000 
 480              	.LVL15:
 153:src/Riscv.cpp ****         pprintString("\n");
 481              		.loc 1 153 9 is_stmt 1
 482              		.loc 1 153 21 is_stmt 0
 483 0168 17050000 		lla	a0,.LC1
 483      13050500 
 484 0170 97000000 		call	_Z12pprintStringPKc@plt
 484      E7800000 
 485              	.LVL16:
 154:src/Riscv.cpp ****         __getc();
 486              		.loc 1 154 9 is_stmt 1
 487              		.loc 1 154 15 is_stmt 0
 488 0178 97000000 		call	__getc@plt
 488      E7800000 
 489              	.LVL17:
 490 0180 6F000008 		j	.L9
 491              	.LVL18:
 492              	.L26:
 493              	.LBE74:
 494              	.LBE73:
 495              	.LBE82:
 496              	.LBE86:
 497              	.LBE91:
 498              	.LBE98:
 499              	.LBE104:
 500              	.LBE112:
 501              	.LBE122:
 502              	.LBE132:
 503              	.LBE145:
 504              	.LBE157:
 505              	.LBE170:
 506              	.LBE187:
 507              	.LBE200:
  35:src/Riscv.cpp ****         SList::oneTick();
 508              		.loc 1 35 9 is_stmt 1
  35:src/Riscv.cpp ****         SList::oneTick();
 509              		.loc 1 35 25 is_stmt 0
 510 0184 97090000 		la	s3,_ZN3TCB11timeCounterE
 510      83B90900 
 511 018c 83B70900 		ld	a5,0(s3)
 512 0190 93871700 		addi	a5,a5,1
 513 0194 23B0F900 		sd	a5,0(s3)
  36:src/Riscv.cpp ****         if (TCB::timeCounter >= TCB::running->getTimeSlice()) {
 514              		.loc 1 36 9 is_stmt 1
  36:src/Riscv.cpp ****         if (TCB::timeCounter >= TCB::running->getTimeSlice()) {
 515              		.loc 1 36 23 is_stmt 0
 516 0198 97000000 		call	_ZN5SList7oneTickEv@plt
 516      E7800000 
 517              	.LVL19:
  37:src/Riscv.cpp ****             TCB::dispatch();
 518              		.loc 1 37 9 is_stmt 1
  37:src/Riscv.cpp ****             TCB::dispatch();
 519              		.loc 1 37 59 is_stmt 0
 520 01a0 97070000 		la	a5,_ZN3TCB7runningE
 520      83B70700 
 521 01a8 83B70700 		ld	a5,0(a5)
GAS LISTING /tmp/ccTDOAKR.s 			page 15


 522              	.LVL20:
 523              	.LBB201:
 524              	.LBB202:
 525              		.file 3 "src/../h/TCB.hpp"
   1:src/../h/TCB.hpp **** //
   2:src/../h/TCB.hpp **** // Created by os on 9/23/25.
   3:src/../h/TCB.hpp **** //
   4:src/../h/TCB.hpp **** 
   5:src/../h/TCB.hpp **** #ifndef PROJECT_BASE_V1_1_COPY_TCB_HPP
   6:src/../h/TCB.hpp **** #define PROJECT_BASE_V1_1_COPY_TCB_HPP
   7:src/../h/TCB.hpp **** #include "../lib/hw.h"
   8:src/../h/TCB.hpp **** #include "../h/Scheduler.hpp"
   9:src/../h/TCB.hpp **** #include "../h/MemoryAllocator.hpp"
  10:src/../h/TCB.hpp **** 
  11:src/../h/TCB.hpp **** class TCB
  12:src/../h/TCB.hpp **** {
  13:src/../h/TCB.hpp **** public:
  14:src/../h/TCB.hpp ****     void* operator new(size_t size)
  15:src/../h/TCB.hpp **** {
  16:src/../h/TCB.hpp ****     return MemoryAllocator::Instance()->mem_alloc(size);
  17:src/../h/TCB.hpp **** }
  18:src/../h/TCB.hpp **** 
  19:src/../h/TCB.hpp ****     void operator delete(void* ptr)
  20:src/../h/TCB.hpp ****     {
  21:src/../h/TCB.hpp ****         return MemoryAllocator::Instance()->mem_free(ptr);
  22:src/../h/TCB.hpp ****     }
  23:src/../h/TCB.hpp **** 
  24:src/../h/TCB.hpp **** 
  25:src/../h/TCB.hpp ****     using Body=void(*)(void*);
  26:src/../h/TCB.hpp **** 
  27:src/../h/TCB.hpp ****     ~TCB()
  28:src/../h/TCB.hpp ****     {
  29:src/../h/TCB.hpp ****         delete stack;
  30:src/../h/TCB.hpp ****     }
  31:src/../h/TCB.hpp **** 
  32:src/../h/TCB.hpp ****     static TCB* createThread(Body body, void* arg, uint64* stack);
  33:src/../h/TCB.hpp **** 
  34:src/../h/TCB.hpp ****     static void dispatch();
  35:src/../h/TCB.hpp ****     static int exit();
  36:src/../h/TCB.hpp **** 
  37:src/../h/TCB.hpp **** 
  38:src/../h/TCB.hpp ****     bool isFinished() const { return finished;}
  39:src/../h/TCB.hpp **** 
  40:src/../h/TCB.hpp ****     void block() { this->blocked = true; }
  41:src/../h/TCB.hpp ****     void unblock() { this->blocked = false; }
  42:src/../h/TCB.hpp ****     bool isBlocked() const { return blocked; }
  43:src/../h/TCB.hpp **** 
  44:src/../h/TCB.hpp ****     time_t getTimeSlice() const { return timeSlice; }
 526              		.loc 3 44 35 is_stmt 1
 527              		.loc 3 44 42 is_stmt 0
 528 01ac 83B78703 		ld	a5,56(a5)
 529              	.LVL21:
 530              	.LBE202:
 531              	.LBE201:
  37:src/Riscv.cpp ****             TCB::dispatch();
 532              		.loc 1 37 30
 533 01b0 03B70900 		ld	a4,0(s3)
GAS LISTING /tmp/ccTDOAKR.s 			page 16


  37:src/Riscv.cpp ****             TCB::dispatch();
 534              		.loc 1 37 9
 535 01b4 6378F700 		bgeu	a4,a5,.L40
 536              	.L5:
  42:src/Riscv.cpp ****     }
 537              		.loc 1 42 9 is_stmt 1
 538              	.LVL22:
 539              	.LBB203:
 540              	.LBB204:
  87:src/../h/Riscv.hpp **** }
  88:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
  89:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sstatus,%[mask]"::[mask]"r"(mask));
  90:src/../h/Riscv.hpp **** }
  91:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
  92:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sstatus,%[mask]"::[mask]"r"(mask));
  93:src/../h/Riscv.hpp **** }
  94:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
  95:src/../h/Riscv.hpp **** {
  96:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sip, %[mask]":: [mask]"r"(mask));
 541              		.loc 2 96 5
 542              		.loc 2 96 60 is_stmt 0
 543 01b8 93072000 		li	a5,2
 544              	#APP
 545              	# 96 "src/../h/Riscv.hpp" 1
  97              	}
 546              		csrc sip, a5
 547              	# 0 "" 2
 548              		.loc 2 97 1
 549              	#NO_APP
 550 01c0 6F00C004 		j	.L3
 551              	.LVL23:
 552              	.L40:
 553              	.LBE204:
 554              	.LBE203:
  38:src/Riscv.cpp ****             set_sepc(sepc);
 555              		.loc 1 38 13 is_stmt 1
  38:src/Riscv.cpp ****             set_sepc(sepc);
 556              		.loc 1 38 26 is_stmt 0
 557 01c4 97000000 		call	_ZN3TCB8dispatchEv@plt
 557      E7800000 
 558              	.LVL24:
  39:src/Riscv.cpp ****             set_sstatus(sstatus);
 559              		.loc 1 39 13 is_stmt 1
 560              	.LBB205:
 561              	.LBB206:
  59:src/../h/Riscv.hpp **** }
 562              		.loc 2 59 5
  59:src/../h/Riscv.hpp **** }
 563              		.loc 2 59 59 is_stmt 0
 564              	#APP
 565              	# 59 "src/../h/Riscv.hpp" 1
 566              		csrw sepc, s1
 567              	# 0 "" 2
 568              	.LVL25:
 569              	#NO_APP
 570              	.LBE206:
 571              	.LBE205:
GAS LISTING /tmp/ccTDOAKR.s 			page 17


  40:src/Riscv.cpp ****         }
 572              		.loc 1 40 13 is_stmt 1
 573              	.LBB207:
 574              	.LBB208:
  69:src/../h/Riscv.hpp **** }
 575              		.loc 2 69 5
  69:src/../h/Riscv.hpp **** }
 576              		.loc 2 69 65 is_stmt 0
 577              	#APP
 578              	# 69 "src/../h/Riscv.hpp" 1
  70:src/../h/Riscv.hpp **** 
 579              		csrw sstatus, s2
 580              	# 0 "" 2
 581              		.loc 2 70 1
 582              	#NO_APP
 583 01d4 6FF05FFE 		j	.L5
 584              	.LVL26:
 585              	.L27:
 586              	.LBE208:
 587              	.LBE207:
 588              	.LBB209:
  46:src/Riscv.cpp ****     }
 589              		.loc 1 46 9 is_stmt 1
  46:src/Riscv.cpp ****     }
 590              		.loc 1 46 24 is_stmt 0
 591 01d8 97000000 		call	console_handler@plt
 591      E7800000 
 592              	.LVL27:
 593 01e0 6F00C002 		j	.L3
 594              	.LVL28:
 595              	.L28:
 596              	.LBB188:
 597              	.LBB171:
 598              	.LBB158:
  53:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (size_in_blocks));
 599              		.loc 1 53 9 is_stmt 1
  54:src/Riscv.cpp ****         void* ptr = MemoryAllocator::Instance()->mem_alloc(size_in_blocks * MEM_BLOCK_SIZE);
 600              		.loc 1 54 9
  54:src/Riscv.cpp ****         void* ptr = MemoryAllocator::Instance()->mem_alloc(size_in_blocks * MEM_BLOCK_SIZE);
 601              		.loc 1 54 69 is_stmt 0
 602              	#APP
 603              	# 54 "src/Riscv.cpp" 1
 604              		mv s3, a1
 605              	# 0 "" 2
 606              	.LVL29:
  55:src/Riscv.cpp ****         __asm__ volatile ("mv a0,%[x]" :: [x] "r" (ptr));
 607              		.loc 1 55 9 is_stmt 1
  55:src/Riscv.cpp ****         __asm__ volatile ("mv a0,%[x]" :: [x] "r" (ptr));
 608              		.loc 1 55 59 is_stmt 0
 609              	#NO_APP
 610 01e8 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 610      E7800000 
 611              	.LVL30:
 612 01f0 93952900 		slli	a1,s3,2
 613 01f4 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 613      E7800000 
 614              	.LVL31:
GAS LISTING /tmp/ccTDOAKR.s 			page 18


  56:src/Riscv.cpp ****     }
 615              		.loc 1 56 9 is_stmt 1
  56:src/Riscv.cpp ****     }
 616              		.loc 1 56 57 is_stmt 0
 617              	#APP
 618              	# 56 "src/Riscv.cpp" 1
 619              		mv a0,a0
 620              	# 0 "" 2
 621              	.LVL32:
 622              	#NO_APP
 623              	.L9:
 624              	.LBE158:
 625              	.LBE171:
 155:src/Riscv.cpp ****     }
 156:src/Riscv.cpp ****     set_sepc(sepc+4);
 626              		.loc 1 156 5 is_stmt 1
 627              		.loc 1 156 13 is_stmt 0
 628 0200 93844400 		addi	s1,s1,4
 629              	.LVL33:
 630              	.LBB172:
 631              	.LBB173:
  59:src/../h/Riscv.hpp **** }
 632              		.loc 2 59 5 is_stmt 1
  59:src/../h/Riscv.hpp **** }
 633              		.loc 2 59 59 is_stmt 0
 634              	#APP
 635              	# 59 "src/../h/Riscv.hpp" 1
 636              		csrw sepc, s1
 637              	# 0 "" 2
 638              	.LVL34:
 639              	#NO_APP
 640              	.LBE173:
 641              	.LBE172:
 157:src/Riscv.cpp ****     set_sstatus(sstatus);
 642              		.loc 1 157 5 is_stmt 1
 643              	.LBB174:
 644              	.LBB175:
  69:src/../h/Riscv.hpp **** }
 645              		.loc 2 69 5
  69:src/../h/Riscv.hpp **** }
 646              		.loc 2 69 65 is_stmt 0
 647              	#APP
 648              	# 69 "src/../h/Riscv.hpp" 1
 649              		csrw sstatus, s2
 650              	# 0 "" 2
 651              	.LVL35:
 652              	#NO_APP
 653              	.L3:
 654              	.LBE175:
 655              	.LBE174:
 656              	.LBE188:
 657              	.LBE209:
 658              	.LBE222:
 158:src/Riscv.cpp ****     }
 159:src/Riscv.cpp **** 
 160:src/Riscv.cpp **** 
 161:src/Riscv.cpp **** }...
GAS LISTING /tmp/ccTDOAKR.s 			page 19


 659              		.loc 1 161 1
 660 020c 83308105 		ld	ra,88(sp)
 661              		.cfi_remember_state
 662              		.cfi_restore 1
 663 0210 03340105 		ld	s0,80(sp)
 664              		.cfi_restore 8
 665              		.cfi_def_cfa 2, 96
 666 0214 83348104 		ld	s1,72(sp)
 667              		.cfi_restore 9
 668 0218 03390104 		ld	s2,64(sp)
 669              		.cfi_restore 18
 670              	.LVL36:
 671 021c 83398103 		ld	s3,56(sp)
 672              		.cfi_restore 19
 673 0220 033A0103 		ld	s4,48(sp)
 674              		.cfi_restore 20
 675 0224 833A8102 		ld	s5,40(sp)
 676              		.cfi_restore 21
 677 0228 13010106 		addi	sp,sp,96
 678              		.cfi_def_cfa_offset 0
 679 022c 67800000 		jr	ra
 680              	.LVL37:
 681              	.L29:
 682              		.cfi_restore_state
 683              	.LBB223:
 684              	.LBB210:
 685              	.LBB189:
 686              	.LBB176:
 687              	.LBB159:
 688              	.LBB146:
  59:src/Riscv.cpp ****         void* ptr;
 689              		.loc 1 59 9 is_stmt 1
  60:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (ptr));
 690              		.loc 1 60 9
  60:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (ptr));
 691              		.loc 1 60 58 is_stmt 0
 692              	#APP
 693              	# 60 "src/Riscv.cpp" 1
 694              		mv s3, a1
 695              	# 0 "" 2
 696              	.LVL38:
  61:src/Riscv.cpp ****         MemoryAllocator::Instance()->mem_free(ptr);
 697              		.loc 1 61 9 is_stmt 1
  61:src/Riscv.cpp ****         MemoryAllocator::Instance()->mem_free(ptr);
 698              		.loc 1 61 46 is_stmt 0
 699              	#NO_APP
 700 0234 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 700      E7800000 
 701              	.LVL39:
 702 023c 93850900 		mv	a1,s3
 703 0240 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 703      E7800000 
 704              	.LVL40:
  62:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (0));
 705              		.loc 1 62 9 is_stmt 1
  62:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (0));
 706              		.loc 1 62 56 is_stmt 0
GAS LISTING /tmp/ccTDOAKR.s 			page 20


 707 0248 93070000 		li	a5,0
 708              	#APP
 709              	# 62 "src/Riscv.cpp" 1
 710              		mv a0, a5
 711              	# 0 "" 2
 712              	#NO_APP
 713              	.LBE146:
 714 0250 6FF01FFB 		j	.L9
 715              	.LVL41:
 716              	.L30:
 717              	.LBB147:
 718              	.LBB133:
  65:src/Riscv.cpp ****         size_t freeMem = MemoryAllocator::Instance()->getFreeMemSize();
 719              		.loc 1 65 9 is_stmt 1
  65:src/Riscv.cpp ****         size_t freeMem = MemoryAllocator::Instance()->getFreeMemSize();
 720              		.loc 1 65 69 is_stmt 0
 721 0254 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 721      E7800000 
 722              	.LVL42:
 723              	.LBB134:
 724              	.LBB135:
 725              		.file 4 "src/../h/../h/MemoryAllocator.hpp"
   1:src/../h/../h/MemoryAllocator.hpp **** 
   2:src/../h/../h/MemoryAllocator.hpp **** #ifndef PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   3:src/../h/../h/MemoryAllocator.hpp **** #define PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   4:src/../h/../h/MemoryAllocator.hpp **** 
   5:src/../h/../h/MemoryAllocator.hpp **** #include "../lib/hw.h"
   6:src/../h/../h/MemoryAllocator.hpp **** 
   7:src/../h/../h/MemoryAllocator.hpp **** class MemoryAllocator {
   8:src/../h/../h/MemoryAllocator.hpp **** public:
   9:src/../h/../h/MemoryAllocator.hpp ****     static MemoryAllocator* Instance();
  10:src/../h/../h/MemoryAllocator.hpp **** 
  11:src/../h/../h/MemoryAllocator.hpp ****     void* mem_alloc(size_t size);//size in bytes
  12:src/../h/../h/MemoryAllocator.hpp **** 
  13:src/../h/../h/MemoryAllocator.hpp ****     void mem_free(void* ptr);
  14:src/../h/../h/MemoryAllocator.hpp **** 
  15:src/../h/../h/MemoryAllocator.hpp ****     size_t getFreeMemSize() {
  16:src/../h/../h/MemoryAllocator.hpp ****         return this->freeMemSize;
 726              		.loc 4 16 9 is_stmt 1
 727              		.loc 4 16 22 is_stmt 0
 728 025c 83378500 		ld	a5,8(a0)
 729              	.LVL43:
 730              	.LBE135:
 731              	.LBE134:
  66:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (freeMem));
 732              		.loc 1 66 9 is_stmt 1
  66:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (freeMem));
 733              		.loc 1 66 62 is_stmt 0
 734              	#APP
 735              	# 66 "src/Riscv.cpp" 1
 736              		mv a0, a5
 737              	# 0 "" 2
 738              	#NO_APP
 739              	.LBE133:
 740 0264 6FF0DFF9 		j	.L9
 741              	.LVL44:
 742              	.L31:
GAS LISTING /tmp/ccTDOAKR.s 			page 21


 743              	.LBB136:
 744              	.LBB123:
  69:src/Riscv.cpp ****         size_t largestBlock = MemoryAllocator::Instance()->getLargestFreeBlock();
 745              		.loc 1 69 9 is_stmt 1
  69:src/Riscv.cpp ****         size_t largestBlock = MemoryAllocator::Instance()->getLargestFreeBlock();
 746              		.loc 1 69 79 is_stmt 0
 747 0268 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 747      E7800000 
 748              	.LVL45:
 749 0270 97000000 		call	_ZN15MemoryAllocator19getLargestFreeBlockEv@plt
 749      E7800000 
 750              	.LVL46:
  70:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (largestBlock));
 751              		.loc 1 70 9 is_stmt 1
  70:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (largestBlock));
 752              		.loc 1 70 67 is_stmt 0
 753              	#APP
 754              	# 70 "src/Riscv.cpp" 1
 755              		mv a0, a0
 756              	# 0 "" 2
 757              	#NO_APP
 758              	.LBE123:
 759 027c 6FF05FF8 		j	.L9
 760              	.LVL47:
 761              	.L32:
 762              	.LBB124:
 763              	.LBB113:
  73:src/Riscv.cpp ****         thread_t* handle;
 764              		.loc 1 73 9 is_stmt 1
  74:src/Riscv.cpp ****         Body start_routine;
 765              		.loc 1 74 9
  75:src/Riscv.cpp ****         void* arg;
 766              		.loc 1 75 9
  76:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 767              		.loc 1 76 9
  76:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 768              		.loc 1 76 61 is_stmt 0
 769              	#APP
 770              	# 76 "src/Riscv.cpp" 1
 771              		mv s3, a1
 772              	# 0 "" 2
 773              	.LVL48:
  77:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (start_routine));
 774              		.loc 1 77 9 is_stmt 1
  77:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (start_routine));
 775              		.loc 1 77 68 is_stmt 0
 776              	# 77 "src/Riscv.cpp" 1
 777              		mv s4, a2
 778              	# 0 "" 2
 779              	.LVL49:
  78:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a3" : [x] "=r" (arg));
 780              		.loc 1 78 9 is_stmt 1
  78:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a3" : [x] "=r" (arg));
 781              		.loc 1 78 58 is_stmt 0
 782              	# 78 "src/Riscv.cpp" 1
 783              		mv s5, a3
 784              	# 0 "" 2
GAS LISTING /tmp/ccTDOAKR.s 			page 22


 785              	.LVL50:
  80:src/Riscv.cpp ****         uint64 *sp=(uint64*)MemoryAllocator::Instance()->mem_alloc(DEFAULT_STACK_SIZE);
 786              		.loc 1 80 9 is_stmt 1
  80:src/Riscv.cpp ****         uint64 *sp=(uint64*)MemoryAllocator::Instance()->mem_alloc(DEFAULT_STACK_SIZE);
 787              		.loc 1 80 67 is_stmt 0
 788              	#NO_APP
 789 028c 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 789      E7800000 
 790              	.LVL51:
 791 0294 B7150000 		li	a1,4096
 792 0298 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 792      E7800000 
 793              	.LVL52:
 794 02a0 13060500 		mv	a2,a0
 795              	.LVL53:
  83:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
 796              		.loc 1 83 9 is_stmt 1
  83:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
 797              		.loc 1 83 34 is_stmt 0
 798 02a4 93850A00 		mv	a1,s5
 799 02a8 13050A00 		mv	a0,s4
 800              	.LVL54:
 801 02ac 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 801      E7800000 
 802              	.LVL55:
  83:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
 803              		.loc 1 83 16
 804 02b4 23B0A900 		sd	a0,0(s3)
  84:src/Riscv.cpp ****         int ret=0;
 805              		.loc 1 84 9 is_stmt 1
 806              	.LVL56:
  85:src/Riscv.cpp ****         if (*handle) {
 807              		.loc 1 85 9
 808 02b8 63080500 		beqz	a0,.L23
  86:src/Riscv.cpp ****             ret=0;
 809              		.loc 1 86 16 is_stmt 0
 810 02bc 93070000 		li	a5,0
 811              	.L14:
 812              	.LVL57:
  91:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 813              		.loc 1 91 9 is_stmt 1
  91:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 814              		.loc 1 91 58 is_stmt 0
 815              	#APP
 816              	# 91 "src/Riscv.cpp" 1
 817              		mv a0, a5
 818              	# 0 "" 2
 819              	#NO_APP
 820              	.LBE113:
 821 02c4 6FF0DFF3 		j	.L9
 822              	.LVL58:
 823              	.L23:
 824              	.LBB114:
  89:src/Riscv.cpp ****             ret=1;
 825              		.loc 1 89 16
 826 02c8 93071000 		li	a5,1
 827 02cc 6FF05FFF 		j	.L14
GAS LISTING /tmp/ccTDOAKR.s 			page 23


 828              	.LVL59:
 829              	.L33:
 830              	.LBE114:
 831              	.LBB115:
 832              	.LBB105:
  94:src/Riscv.cpp ****         int ret = TCB::exit();
 833              		.loc 1 94 9 is_stmt 1
  94:src/Riscv.cpp ****         int ret = TCB::exit();
 834              		.loc 1 94 28 is_stmt 0
 835 02d0 97000000 		call	_ZN3TCB4exitEv@plt
 835      E7800000 
 836              	.LVL60:
  95:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 837              		.loc 1 95 9 is_stmt 1
  95:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 838              		.loc 1 95 58 is_stmt 0
 839              	#APP
 840              	# 95 "src/Riscv.cpp" 1
 841              		mv a0, a0
 842              	# 0 "" 2
 843              	#NO_APP
 844              	.LBE105:
 845 02dc 6FF05FF2 		j	.L9
 846              	.LVL61:
 847              	.L34:
 848              	.LBB106:
  98:src/Riscv.cpp ****         TCB::dispatch();
 849              		.loc 1 98 9 is_stmt 1
  98:src/Riscv.cpp ****         TCB::dispatch();
 850              		.loc 1 98 22 is_stmt 0
 851 02e0 97000000 		call	_ZN3TCB8dispatchEv@plt
 851      E7800000 
 852              	.LVL62:
 853 02e8 6FF09FF1 		j	.L9
 854              	.LVL63:
 855              	.L35:
 856              	.LBB99:
 857              	.LBB92:
 101:src/Riscv.cpp ****         sem_t* handle;
 858              		.loc 1 101 9 is_stmt 1
 102:src/Riscv.cpp ****         unsigned init;
 859              		.loc 1 102 9
 103:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 860              		.loc 1 103 9
 103:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 861              		.loc 1 103 61 is_stmt 0
 862              	#APP
 863              	# 103 "src/Riscv.cpp" 1
 864              		mv s3, a1
 865              	# 0 "" 2
 866              	.LVL64:
 104:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (init));
 867              		.loc 1 104 9 is_stmt 1
 104:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (init));
 868              		.loc 1 104 59 is_stmt 0
 869              	# 104 "src/Riscv.cpp" 1
 870              		mv a0, a2
GAS LISTING /tmp/ccTDOAKR.s 			page 24


 871              	# 0 "" 2
 872              	.LVL65:
 106:src/Riscv.cpp ****         *handle=SEM::open(init);
 873              		.loc 1 106 9 is_stmt 1
 106:src/Riscv.cpp ****         *handle=SEM::open(init);
 874              		.loc 1 106 26 is_stmt 0
 875              	#NO_APP
 876 02f4 1B050500 		sext.w	a0,a0
 877 02f8 97000000 		call	_ZN3SEM4openEj@plt
 877      E7800000 
 878              	.LVL66:
 106:src/Riscv.cpp ****         *handle=SEM::open(init);
 879              		.loc 1 106 16
 880 0300 23B0A900 		sd	a0,0(s3)
 107:src/Riscv.cpp ****         int ret=0;
 881              		.loc 1 107 9 is_stmt 1
 882              	.LVL67:
 108:src/Riscv.cpp ****         if (*handle) {
 883              		.loc 1 108 9
 884 0304 63080500 		beqz	a0,.L24
 109:src/Riscv.cpp ****             ret=0;
 885              		.loc 1 109 16 is_stmt 0
 886 0308 93070000 		li	a5,0
 887              	.L18:
 888              	.LVL68:
 114:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 889              		.loc 1 114 9 is_stmt 1
 114:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 890              		.loc 1 114 58 is_stmt 0
 891              	#APP
 892              	# 114 "src/Riscv.cpp" 1
 893              		mv a0, a5
 894              	# 0 "" 2
 895              	#NO_APP
 896              	.LBE92:
 897 0310 6FF01FEF 		j	.L9
 898              	.LVL69:
 899              	.L24:
 900              	.LBB93:
 112:src/Riscv.cpp ****             ret=1;
 901              		.loc 1 112 16
 902 0314 93071000 		li	a5,1
 903 0318 6FF05FFF 		j	.L18
 904              	.LVL70:
 905              	.L36:
 906              	.LBE93:
 907              	.LBB94:
 908              	.LBB87:
 117:src/Riscv.cpp ****         sem_t handle;
 909              		.loc 1 117 9 is_stmt 1
 118:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 910              		.loc 1 118 9
 118:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 911              		.loc 1 118 61 is_stmt 0
 912              	#APP
 913              	# 118 "src/Riscv.cpp" 1
 914              		mv a0, a1
GAS LISTING /tmp/ccTDOAKR.s 			page 25


 915              	# 0 "" 2
 916              	.LVL71:
 119:src/Riscv.cpp ****         int ret=handle->close();
 917              		.loc 1 119 9 is_stmt 1
 119:src/Riscv.cpp ****         int ret=handle->close();
 918              		.loc 1 119 30 is_stmt 0
 919              	#NO_APP
 920 0320 97000000 		call	_ZN3SEM5closeEv@plt
 920      E7800000 
 921              	.LVL72:
 120:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 922              		.loc 1 120 9 is_stmt 1
 120:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 923              		.loc 1 120 58 is_stmt 0
 924              	#APP
 925              	# 120 "src/Riscv.cpp" 1
 926              		mv a0, a0
 927              	# 0 "" 2
 928              	#NO_APP
 929              	.LBE87:
 930 032c 6FF05FED 		j	.L9
 931              	.LVL73:
 932              	.L37:
 933              	.LBB88:
 934              	.LBB83:
 123:src/Riscv.cpp ****         sem_t handle;
 935              		.loc 1 123 9 is_stmt 1
 124:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 936              		.loc 1 124 9
 124:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 937              		.loc 1 124 61 is_stmt 0
 938              	#APP
 939              	# 124 "src/Riscv.cpp" 1
 940              		mv a0, a1
 941              	# 0 "" 2
 942              	.LVL74:
 125:src/Riscv.cpp ****         int ret=handle->wait();
 943              		.loc 1 125 9 is_stmt 1
 125:src/Riscv.cpp ****         int ret=handle->wait();
 944              		.loc 1 125 29 is_stmt 0
 945              	#NO_APP
 946 0334 97000000 		call	_ZN3SEM4waitEv@plt
 946      E7800000 
 947              	.LVL75:
 126:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 948              		.loc 1 126 9 is_stmt 1
 126:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 949              		.loc 1 126 58 is_stmt 0
 950              	#APP
 951              	# 126 "src/Riscv.cpp" 1
 952              		mv a0, a0
 953              	# 0 "" 2
 954              	#NO_APP
 955              	.LBE83:
 956 0340 6FF01FEC 		j	.L9
 957              	.LVL76:
 958              	.L38:
GAS LISTING /tmp/ccTDOAKR.s 			page 26


 959              	.LBB84:
 960              	.LBB80:
 129:src/Riscv.cpp ****         sem_t handle;
 961              		.loc 1 129 9 is_stmt 1
 130:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 962              		.loc 1 130 9
 130:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 963              		.loc 1 130 61 is_stmt 0
 964              	#APP
 965              	# 130 "src/Riscv.cpp" 1
 966              		mv a0, a1
 967              	# 0 "" 2
 968              	.LVL77:
 131:src/Riscv.cpp ****         int ret=handle->signal();
 969              		.loc 1 131 9 is_stmt 1
 131:src/Riscv.cpp ****         int ret=handle->signal();
 970              		.loc 1 131 31 is_stmt 0
 971              	#NO_APP
 972 0348 97000000 		call	_ZN3SEM6signalEv@plt
 972      E7800000 
 973              	.LVL78:
 132:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 974              		.loc 1 132 9 is_stmt 1
 132:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 975              		.loc 1 132 58 is_stmt 0
 976              	#APP
 977              	# 132 "src/Riscv.cpp" 1
 978              		mv a0, a0
 979              	# 0 "" 2
 980              	#NO_APP
 981              	.LBE80:
 982 0354 6FF0DFEA 		j	.L9
 983              	.LVL79:
 984              	.L39:
 985              	.LBB81:
 986              	.LBB79:
 135:src/Riscv.cpp ****         time_t sleepTime;
 987              		.loc 1 135 9 is_stmt 1
 136:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (sleepTime));
 988              		.loc 1 136 9
 136:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (sleepTime));
 989              		.loc 1 136 64 is_stmt 0
 990              	#APP
 991              	# 136 "src/Riscv.cpp" 1
 992              		mv a0, a1
 993              	# 0 "" 2
 994              	.LVL80:
 137:src/Riscv.cpp ****         int ret=TCB::sleep(sleepTime);
 995              		.loc 1 137 9 is_stmt 1
 137:src/Riscv.cpp ****         int ret=TCB::sleep(sleepTime);
 996              		.loc 1 137 27 is_stmt 0
 997              	#NO_APP
 998 035c 97000000 		call	_ZN3TCB5sleepEm@plt
 998      E7800000 
 999              	.LVL81:
 138:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 1000              		.loc 1 138 9 is_stmt 1
GAS LISTING /tmp/ccTDOAKR.s 			page 27


 138:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 1001              		.loc 1 138 58 is_stmt 0
 1002              	#APP
 1003              	# 138 "src/Riscv.cpp" 1
 1004              		mv a0, a0
 1005              	# 0 "" 2
 1006              	#NO_APP
 1007              	.LBE79:
 1008 0368 6FF09FE9 		j	.L9
 1009              	.LBE81:
 1010              	.LBE84:
 1011              	.LBE88:
 1012              	.LBE94:
 1013              	.LBE99:
 1014              	.LBE106:
 1015              	.LBE115:
 1016              	.LBE124:
 1017              	.LBE136:
 1018              	.LBE147:
 1019              	.LBE159:
 1020              	.LBE176:
 1021              	.LBE189:
 1022              	.LBE210:
 1023              	.LBE223:
 1024              		.cfi_endproc
 1025              	.LFE35:
 1027              	.Letext0:
 1028              		.file 5 "src/../h/../lib/hw.h"
 1029              		.file 6 "src/../h/../h/List.hpp"
 1030              		.file 7 "src/../h/SEM.hpp"
 1031              		.file 8 "src/../h/syscall_c.hpp"
 1032              		.file 9 "src/../h/SList.hpp"
 1033              		.file 10 "src/../h/print.hpp"
 1034              		.file 11 "src/../lib/console.h"
GAS LISTING /tmp/ccTDOAKR.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccTDOAKR.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccTDOAKR.s:13     .text:0000000000000000 .L0 
     /tmp/ccTDOAKR.s:14     .text:0000000000000000 .L0 
     /tmp/ccTDOAKR.s:15     .text:0000000000000004 .L0 
     /tmp/ccTDOAKR.s:17     .text:0000000000000008 .L0 
     /tmp/ccTDOAKR.s:19     .text:000000000000000c .L0 
     /tmp/ccTDOAKR.s:21     .text:000000000000000c .L0 
       src/Riscv.cpp:14     .text:000000000000000c .L0 
     /tmp/ccTDOAKR.s:27     .text:0000000000000010 .L0 
       src/Riscv.cpp:15     .text:0000000000000010 .L0 
     /tmp/ccTDOAKR.s:33     .text:0000000000000014 .L0 
     /tmp/ccTDOAKR.s:34     .text:0000000000000018 .L0 
     /tmp/ccTDOAKR.s:35     .text:0000000000000018 .L0 
     /tmp/ccTDOAKR.s:37     .text:000000000000001c .L0 
     /tmp/ccTDOAKR.s:39     .text:0000000000000020 .L0 
     /tmp/ccTDOAKR.s:59     .text:0000000000000020 _ZN5Riscv21SupervisorTrapHandlerEv
     /tmp/ccTDOAKR.s:62     .text:0000000000000020 .L0 
     /tmp/ccTDOAKR.s:63     .text:0000000000000020 .L0 
     /tmp/ccTDOAKR.s:64     .text:0000000000000024 .L0 
     /tmp/ccTDOAKR.s:72     .text:0000000000000040 .L0 
     /tmp/ccTDOAKR.s:73     .text:0000000000000040 .L0 
     /tmp/ccTDOAKR.s:74     .text:0000000000000040 .L0 
     /tmp/ccTDOAKR.s:75     .text:0000000000000040 .L0 
     /tmp/ccTDOAKR.s:76     .text:0000000000000040 .L0 
     /tmp/ccTDOAKR.s:77     .text:0000000000000040 .L0 
     /tmp/ccTDOAKR.s:78     .text:0000000000000040 .L0 
     /tmp/ccTDOAKR.s:80     .text:0000000000000044 .L0 
     /tmp/ccTDOAKR.s:82     .text:0000000000000044 .L0 
     /tmp/ccTDOAKR.s:83     .text:0000000000000044 .L0 
     /tmp/ccTDOAKR.s:87     .text:0000000000000044 .L0 
     /tmp/ccTDOAKR.s:88     .text:0000000000000044 .L0 
     /tmp/ccTDOAKR.s:89     .text:0000000000000044 .L0 
  src/../h/Riscv.hpp:80     .text:0000000000000044 .L0 
     /tmp/ccTDOAKR.s:97     .text:000000000000004c .L0 
     /tmp/ccTDOAKR.s:98     .text:000000000000004c .L0 
     /tmp/ccTDOAKR.s:105    .text:0000000000000050 .L0 
     /tmp/ccTDOAKR.s:106    .text:0000000000000050 .L0 
     /tmp/ccTDOAKR.s:107    .text:0000000000000050 .L0 
  src/../h/Riscv.hpp:64     .text:0000000000000050 .L0 
     /tmp/ccTDOAKR.s:117    .text:0000000000000054 .L0 
     /tmp/ccTDOAKR.s:120    .text:0000000000000054 .L0 
     /tmp/ccTDOAKR.s:121    .text:0000000000000054 .L0 
     /tmp/ccTDOAKR.s:122    .text:0000000000000054 .L0 
  src/../h/Riscv.hpp:74     .text:0000000000000054 .L0 
     /tmp/ccTDOAKR.s:132    .text:0000000000000058 .L0 
     /tmp/ccTDOAKR.s:134    .text:0000000000000058 .L0 
     /tmp/ccTDOAKR.s:142    .text:0000000000000068 .L0 
     /tmp/ccTDOAKR.s:148    .text:0000000000000078 .L0 
     /tmp/ccTDOAKR.s:149    .text:0000000000000078 .L0 
       src/Riscv.cpp:50     .text:0000000000000078 .L0 
     /tmp/ccTDOAKR.s:158    .text:000000000000007c .L0 
     /tmp/ccTDOAKR.s:171    .text:0000000000000084 .L0 
     /tmp/ccTDOAKR.s:185    .text:000000000000008c .L0 
     /tmp/ccTDOAKR.s:201    .text:0000000000000094 .L0 
     /tmp/ccTDOAKR.s:219    .text:000000000000009c .L0 
GAS LISTING /tmp/ccTDOAKR.s 			page 29


     /tmp/ccTDOAKR.s:239    .text:00000000000000a4 .L0 
     /tmp/ccTDOAKR.s:261    .text:00000000000000ac .L0 
     /tmp/ccTDOAKR.s:285    .text:00000000000000b4 .L0 
     /tmp/ccTDOAKR.s:311    .text:00000000000000bc .L0 
     /tmp/ccTDOAKR.s:339    .text:00000000000000c4 .L0 
     /tmp/ccTDOAKR.s:369    .text:00000000000000cc .L0 
     /tmp/ccTDOAKR.s:401    .text:00000000000000d4 .L0 
     /tmp/ccTDOAKR.s:407    .text:00000000000000dc .L0 
     /tmp/ccTDOAKR.s:408    .text:00000000000000dc .L0 
     /tmp/ccTDOAKR.s:409    .text:00000000000000dc .L0 
  src/../h/Riscv.hpp:80     .text:00000000000000dc .L0 
     /tmp/ccTDOAKR.s:418    .text:00000000000000e4 .L0 
     /tmp/ccTDOAKR.s:419    .text:00000000000000e4 .L0 
     /tmp/ccTDOAKR.s:426    .text:00000000000000e8 .L0 
     /tmp/ccTDOAKR.s:427    .text:00000000000000e8 .L0 
     /tmp/ccTDOAKR.s:428    .text:00000000000000e8 .L0 
  src/../h/Riscv.hpp:85     .text:00000000000000e8 .L0 
     /tmp/ccTDOAKR.s:436    .text:00000000000000f0 .L0 
     /tmp/ccTDOAKR.s:437    .text:00000000000000f0 .L0 
     /tmp/ccTDOAKR.s:442    .text:00000000000000f4 .L0 
     /tmp/ccTDOAKR.s:443    .text:00000000000000f4 .L0 
     /tmp/ccTDOAKR.s:447    .text:0000000000000104 .L0 
     /tmp/ccTDOAKR.s:448    .text:0000000000000104 .L0 
     /tmp/ccTDOAKR.s:452    .text:0000000000000110 .L0 
     /tmp/ccTDOAKR.s:453    .text:0000000000000110 .L0 
     /tmp/ccTDOAKR.s:457    .text:0000000000000120 .L0 
     /tmp/ccTDOAKR.s:458    .text:0000000000000120 .L0 
     /tmp/ccTDOAKR.s:462    .text:0000000000000130 .L0 
     /tmp/ccTDOAKR.s:463    .text:0000000000000130 .L0 
     /tmp/ccTDOAKR.s:467    .text:000000000000013c .L0 
     /tmp/ccTDOAKR.s:468    .text:000000000000013c .L0 
     /tmp/ccTDOAKR.s:472    .text:000000000000014c .L0 
     /tmp/ccTDOAKR.s:473    .text:000000000000014c .L0 
     /tmp/ccTDOAKR.s:477    .text:000000000000015c .L0 
     /tmp/ccTDOAKR.s:478    .text:000000000000015c .L0 
     /tmp/ccTDOAKR.s:482    .text:0000000000000168 .L0 
     /tmp/ccTDOAKR.s:483    .text:0000000000000168 .L0 
     /tmp/ccTDOAKR.s:487    .text:0000000000000178 .L0 
     /tmp/ccTDOAKR.s:488    .text:0000000000000178 .L0 
     /tmp/ccTDOAKR.s:509    .text:0000000000000184 .L0 
     /tmp/ccTDOAKR.s:510    .text:0000000000000184 .L0 
     /tmp/ccTDOAKR.s:515    .text:0000000000000198 .L0 
     /tmp/ccTDOAKR.s:516    .text:0000000000000198 .L0 
     /tmp/ccTDOAKR.s:519    .text:00000000000001a0 .L0 
     /tmp/ccTDOAKR.s:520    .text:00000000000001a0 .L0 
     /tmp/ccTDOAKR.s:527    .text:00000000000001ac .L0 
     /tmp/ccTDOAKR.s:528    .text:00000000000001ac .L0 
     /tmp/ccTDOAKR.s:533    .text:00000000000001b0 .L0 
     /tmp/ccTDOAKR.s:535    .text:00000000000001b4 .L0 
     /tmp/ccTDOAKR.s:541    .text:00000000000001b8 .L0 
     /tmp/ccTDOAKR.s:542    .text:00000000000001b8 .L0 
     /tmp/ccTDOAKR.s:543    .text:00000000000001b8 .L0 
     /tmp/ccTDOAKR.s:550    .text:00000000000001c0 .L0 
     /tmp/ccTDOAKR.s:556    .text:00000000000001c4 .L0 
     /tmp/ccTDOAKR.s:557    .text:00000000000001c4 .L0 
     /tmp/ccTDOAKR.s:562    .text:00000000000001cc .L0 
     /tmp/ccTDOAKR.s:563    .text:00000000000001cc .L0 
GAS LISTING /tmp/ccTDOAKR.s 			page 30


  src/../h/Riscv.hpp:59     .text:00000000000001cc .L0 
     /tmp/ccTDOAKR.s:575    .text:00000000000001d0 .L0 
     /tmp/ccTDOAKR.s:576    .text:00000000000001d0 .L0 
  src/../h/Riscv.hpp:69     .text:00000000000001d0 .L0 
     /tmp/ccTDOAKR.s:583    .text:00000000000001d4 .L0 
     /tmp/ccTDOAKR.s:590    .text:00000000000001d8 .L0 
     /tmp/ccTDOAKR.s:591    .text:00000000000001d8 .L0 
     /tmp/ccTDOAKR.s:600    .text:00000000000001e4 .L0 
     /tmp/ccTDOAKR.s:601    .text:00000000000001e4 .L0 
       src/Riscv.cpp:54     .text:00000000000001e4 .L0 
     /tmp/ccTDOAKR.s:608    .text:00000000000001e8 .L0 
     /tmp/ccTDOAKR.s:610    .text:00000000000001e8 .L0 
     /tmp/ccTDOAKR.s:616    .text:00000000000001fc .L0 
       src/Riscv.cpp:56     .text:00000000000001fc .L0 
     /tmp/ccTDOAKR.s:627    .text:0000000000000200 .L0 
     /tmp/ccTDOAKR.s:628    .text:0000000000000200 .L0 
     /tmp/ccTDOAKR.s:633    .text:0000000000000204 .L0 
  src/../h/Riscv.hpp:59     .text:0000000000000204 .L0 
     /tmp/ccTDOAKR.s:645    .text:0000000000000208 .L0 
     /tmp/ccTDOAKR.s:646    .text:0000000000000208 .L0 
  src/../h/Riscv.hpp:69     .text:0000000000000208 .L0 
     /tmp/ccTDOAKR.s:660    .text:000000000000020c .L0 
     /tmp/ccTDOAKR.s:661    .text:0000000000000210 .L0 
     /tmp/ccTDOAKR.s:662    .text:0000000000000210 .L0 
     /tmp/ccTDOAKR.s:664    .text:0000000000000214 .L0 
     /tmp/ccTDOAKR.s:665    .text:0000000000000214 .L0 
     /tmp/ccTDOAKR.s:667    .text:0000000000000218 .L0 
     /tmp/ccTDOAKR.s:669    .text:000000000000021c .L0 
     /tmp/ccTDOAKR.s:672    .text:0000000000000220 .L0 
     /tmp/ccTDOAKR.s:674    .text:0000000000000224 .L0 
     /tmp/ccTDOAKR.s:676    .text:0000000000000228 .L0 
     /tmp/ccTDOAKR.s:678    .text:000000000000022c .L0 
     /tmp/ccTDOAKR.s:682    .text:0000000000000230 .L0 
     /tmp/ccTDOAKR.s:690    .text:0000000000000230 .L0 
     /tmp/ccTDOAKR.s:691    .text:0000000000000230 .L0 
       src/Riscv.cpp:60     .text:0000000000000230 .L0 
     /tmp/ccTDOAKR.s:698    .text:0000000000000234 .L0 
     /tmp/ccTDOAKR.s:700    .text:0000000000000234 .L0 
     /tmp/ccTDOAKR.s:706    .text:0000000000000248 .L0 
     /tmp/ccTDOAKR.s:707    .text:0000000000000248 .L0 
     /tmp/ccTDOAKR.s:720    .text:0000000000000254 .L0 
     /tmp/ccTDOAKR.s:721    .text:0000000000000254 .L0 
     /tmp/ccTDOAKR.s:727    .text:000000000000025c .L0 
     /tmp/ccTDOAKR.s:728    .text:000000000000025c .L0 
     /tmp/ccTDOAKR.s:733    .text:0000000000000260 .L0 
       src/Riscv.cpp:66     .text:0000000000000260 .L0 
     /tmp/ccTDOAKR.s:746    .text:0000000000000268 .L0 
     /tmp/ccTDOAKR.s:747    .text:0000000000000268 .L0 
     /tmp/ccTDOAKR.s:752    .text:0000000000000278 .L0 
       src/Riscv.cpp:70     .text:0000000000000278 .L0 
     /tmp/ccTDOAKR.s:765    .text:0000000000000280 .L0 
     /tmp/ccTDOAKR.s:766    .text:0000000000000280 .L0 
     /tmp/ccTDOAKR.s:767    .text:0000000000000280 .L0 
     /tmp/ccTDOAKR.s:768    .text:0000000000000280 .L0 
       src/Riscv.cpp:76     .text:0000000000000280 .L0 
     /tmp/ccTDOAKR.s:775    .text:0000000000000284 .L0 
       src/Riscv.cpp:77     .text:0000000000000284 .L0 
GAS LISTING /tmp/ccTDOAKR.s 			page 31


     /tmp/ccTDOAKR.s:781    .text:0000000000000288 .L0 
       src/Riscv.cpp:78     .text:0000000000000288 .L0 
     /tmp/ccTDOAKR.s:787    .text:000000000000028c .L0 
     /tmp/ccTDOAKR.s:789    .text:000000000000028c .L0 
     /tmp/ccTDOAKR.s:797    .text:00000000000002a4 .L0 
     /tmp/ccTDOAKR.s:798    .text:00000000000002a4 .L0 
     /tmp/ccTDOAKR.s:804    .text:00000000000002b4 .L0 
     /tmp/ccTDOAKR.s:807    .text:00000000000002b8 .L0 
     /tmp/ccTDOAKR.s:808    .text:00000000000002b8 .L0 
     /tmp/ccTDOAKR.s:810    .text:00000000000002bc .L0 
     /tmp/ccTDOAKR.s:814    .text:00000000000002c0 .L0 
       src/Riscv.cpp:91     .text:00000000000002c0 .L0 
     /tmp/ccTDOAKR.s:826    .text:00000000000002c8 .L0 
     /tmp/ccTDOAKR.s:834    .text:00000000000002d0 .L0 
     /tmp/ccTDOAKR.s:835    .text:00000000000002d0 .L0 
     /tmp/ccTDOAKR.s:838    .text:00000000000002d8 .L0 
       src/Riscv.cpp:95     .text:00000000000002d8 .L0 
     /tmp/ccTDOAKR.s:850    .text:00000000000002e0 .L0 
     /tmp/ccTDOAKR.s:851    .text:00000000000002e0 .L0 
     /tmp/ccTDOAKR.s:859    .text:00000000000002ec .L0 
     /tmp/ccTDOAKR.s:860    .text:00000000000002ec .L0 
     /tmp/ccTDOAKR.s:861    .text:00000000000002ec .L0 
       src/Riscv.cpp:103    .text:00000000000002ec .L0 
     /tmp/ccTDOAKR.s:868    .text:00000000000002f0 .L0 
       src/Riscv.cpp:104    .text:00000000000002f0 .L0 
     /tmp/ccTDOAKR.s:874    .text:00000000000002f4 .L0 
     /tmp/ccTDOAKR.s:876    .text:00000000000002f4 .L0 
     /tmp/ccTDOAKR.s:880    .text:0000000000000300 .L0 
     /tmp/ccTDOAKR.s:883    .text:0000000000000304 .L0 
     /tmp/ccTDOAKR.s:884    .text:0000000000000304 .L0 
     /tmp/ccTDOAKR.s:886    .text:0000000000000308 .L0 
     /tmp/ccTDOAKR.s:890    .text:000000000000030c .L0 
       src/Riscv.cpp:114    .text:000000000000030c .L0 
     /tmp/ccTDOAKR.s:902    .text:0000000000000314 .L0 
     /tmp/ccTDOAKR.s:910    .text:000000000000031c .L0 
     /tmp/ccTDOAKR.s:911    .text:000000000000031c .L0 
       src/Riscv.cpp:118    .text:000000000000031c .L0 
     /tmp/ccTDOAKR.s:918    .text:0000000000000320 .L0 
     /tmp/ccTDOAKR.s:920    .text:0000000000000320 .L0 
     /tmp/ccTDOAKR.s:923    .text:0000000000000328 .L0 
       src/Riscv.cpp:120    .text:0000000000000328 .L0 
     /tmp/ccTDOAKR.s:936    .text:0000000000000330 .L0 
     /tmp/ccTDOAKR.s:937    .text:0000000000000330 .L0 
       src/Riscv.cpp:124    .text:0000000000000330 .L0 
     /tmp/ccTDOAKR.s:944    .text:0000000000000334 .L0 
     /tmp/ccTDOAKR.s:946    .text:0000000000000334 .L0 
     /tmp/ccTDOAKR.s:949    .text:000000000000033c .L0 
       src/Riscv.cpp:126    .text:000000000000033c .L0 
     /tmp/ccTDOAKR.s:962    .text:0000000000000344 .L0 
     /tmp/ccTDOAKR.s:963    .text:0000000000000344 .L0 
       src/Riscv.cpp:130    .text:0000000000000344 .L0 
     /tmp/ccTDOAKR.s:970    .text:0000000000000348 .L0 
     /tmp/ccTDOAKR.s:972    .text:0000000000000348 .L0 
     /tmp/ccTDOAKR.s:975    .text:0000000000000350 .L0 
       src/Riscv.cpp:132    .text:0000000000000350 .L0 
     /tmp/ccTDOAKR.s:988    .text:0000000000000358 .L0 
     /tmp/ccTDOAKR.s:989    .text:0000000000000358 .L0 
GAS LISTING /tmp/ccTDOAKR.s 			page 32


       src/Riscv.cpp:136    .text:0000000000000358 .L0 
     /tmp/ccTDOAKR.s:996    .text:000000000000035c .L0 
     /tmp/ccTDOAKR.s:998    .text:000000000000035c .L0 
     /tmp/ccTDOAKR.s:1001   .text:0000000000000364 .L0 
       src/Riscv.cpp:138    .text:0000000000000364 .L0 
     /tmp/ccTDOAKR.s:1024   .text:000000000000036c .L0 
     /tmp/ccTDOAKR.s:1035   .text:000000000000036c .L0 
     /tmp/ccTDOAKR.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccTDOAKR.s:443    .text:00000000000000f4 .L0 
     /tmp/ccTDOAKR.s:47     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccTDOAKR.s:453    .text:0000000000000110 .L0 
     /tmp/ccTDOAKR.s:50     .rodata.str1.8:0000000000000010 .LC2
     /tmp/ccTDOAKR.s:458    .text:0000000000000120 .L0 
     /tmp/ccTDOAKR.s:468    .text:000000000000013c .L0 
     /tmp/ccTDOAKR.s:53     .rodata.str1.8:0000000000000018 .LC3
     /tmp/ccTDOAKR.s:473    .text:000000000000014c .L0 
     /tmp/ccTDOAKR.s:483    .text:0000000000000168 .L0 
     /tmp/ccTDOAKR.s:510    .text:0000000000000184 .L0 
     /tmp/ccTDOAKR.s:520    .text:00000000000001a0 .L0 
     /tmp/ccTDOAKR.s:492    .text:0000000000000184 .L26
     /tmp/ccTDOAKR.s:585    .text:00000000000001d8 .L27
     /tmp/ccTDOAKR.s:595    .text:00000000000001e4 .L28
     /tmp/ccTDOAKR.s:681    .text:0000000000000230 .L29
     /tmp/ccTDOAKR.s:716    .text:0000000000000254 .L30
     /tmp/ccTDOAKR.s:742    .text:0000000000000268 .L31
     /tmp/ccTDOAKR.s:761    .text:0000000000000280 .L32
     /tmp/ccTDOAKR.s:829    .text:00000000000002d0 .L33
     /tmp/ccTDOAKR.s:847    .text:00000000000002e0 .L34
     /tmp/ccTDOAKR.s:855    .text:00000000000002ec .L35
     /tmp/ccTDOAKR.s:905    .text:000000000000031c .L36
     /tmp/ccTDOAKR.s:932    .text:0000000000000330 .L37
     /tmp/ccTDOAKR.s:958    .text:0000000000000344 .L38
     /tmp/ccTDOAKR.s:984    .text:0000000000000358 .L39
     /tmp/ccTDOAKR.s:623    .text:0000000000000200 .L9
     /tmp/ccTDOAKR.s:552    .text:00000000000001c4 .L40
     /tmp/ccTDOAKR.s:653    .text:000000000000020c .L3
     /tmp/ccTDOAKR.s:536    .text:00000000000001b8 .L5
     /tmp/ccTDOAKR.s:823    .text:00000000000002c8 .L23
     /tmp/ccTDOAKR.s:811    .text:00000000000002c0 .L14
     /tmp/ccTDOAKR.s:899    .text:0000000000000314 .L24
     /tmp/ccTDOAKR.s:887    .text:000000000000030c .L18
     /tmp/ccTDOAKR.s:2888   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccTDOAKR.s:4514   .debug_str:0000000000000837 .LASF167
     /tmp/ccTDOAKR.s:4288   .debug_str:00000000000001d7 .LASF168
     /tmp/ccTDOAKR.s:4428   .debug_str:00000000000005e6 .LASF169
     /tmp/ccTDOAKR.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccTDOAKR.s:1027   .text:000000000000036c .Letext0
     /tmp/ccTDOAKR.s:4224   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccTDOAKR.s:4346   .debug_str:00000000000003aa .LASF0
     /tmp/ccTDOAKR.s:4364   .debug_str:0000000000000433 .LASF1
     /tmp/ccTDOAKR.s:4436   .debug_str:000000000000063b .LASF2
     /tmp/ccTDOAKR.s:4448   .debug_str:0000000000000696 .LASF4
     /tmp/ccTDOAKR.s:4348   .debug_str:00000000000003b7 .LASF3
     /tmp/ccTDOAKR.s:4238   .debug_str:0000000000000040 .LASF5
     /tmp/ccTDOAKR.s:4416   .debug_str:0000000000000590 .LASF6
     /tmp/ccTDOAKR.s:4408   .debug_str:0000000000000559 .LASF7
     /tmp/ccTDOAKR.s:4354   .debug_str:00000000000003f5 .LASF8
GAS LISTING /tmp/ccTDOAKR.s 			page 33


     /tmp/ccTDOAKR.s:4322   .debug_str:0000000000000309 .LASF9
     /tmp/ccTDOAKR.s:4330   .debug_str:000000000000033f .LASF10
     /tmp/ccTDOAKR.s:4276   .debug_str:000000000000018a .LASF11
     /tmp/ccTDOAKR.s:4314   .debug_str:00000000000002df .LASF12
     /tmp/ccTDOAKR.s:4290   .debug_str:00000000000001e5 .LASF13
     /tmp/ccTDOAKR.s:4274   .debug_str:000000000000017a .LASF14
     /tmp/ccTDOAKR.s:4490   .debug_str:00000000000007a3 .LASF15
     /tmp/ccTDOAKR.s:4300   .debug_str:000000000000022c .LASF16
     /tmp/ccTDOAKR.s:4472   .debug_str:000000000000072b .LASF17
     /tmp/ccTDOAKR.s:4544   .debug_str:000000000000098f .LASF51
     /tmp/ccTDOAKR.s:4426   .debug_str:00000000000005db .LASF170
     /tmp/ccTDOAKR.s:4368   .debug_str:000000000000044c .LASF18
     /tmp/ccTDOAKR.s:4306   .debug_str:000000000000028e .LASF19
     /tmp/ccTDOAKR.s:4552   .debug_str:00000000000009d0 .LASF20
     /tmp/ccTDOAKR.s:4414   .debug_str:0000000000000586 .LASF21
     /tmp/ccTDOAKR.s:4302   .debug_str:0000000000000242 .LASF23
     /tmp/ccTDOAKR.s:4250   .debug_str:00000000000000a8 .LASF22
     /tmp/ccTDOAKR.s:4460   .debug_str:00000000000006e0 .LASF24
     /tmp/ccTDOAKR.s:4262   .debug_str:0000000000000108 .LASF27
     /tmp/ccTDOAKR.s:4564   .debug_str:0000000000000a16 .LASF29
     /tmp/ccTDOAKR.s:4440   .debug_str:0000000000000653 .LASF25
     /tmp/ccTDOAKR.s:4432   .debug_str:0000000000000617 .LASF26
     /tmp/ccTDOAKR.s:4254   .debug_str:00000000000000cf .LASF28
     /tmp/ccTDOAKR.s:4294   .debug_str:0000000000000205 .LASF30
     /tmp/ccTDOAKR.s:4476   .debug_str:0000000000000759 .LASF31
     /tmp/ccTDOAKR.s:4270   .debug_str:0000000000000157 .LASF32
     /tmp/ccTDOAKR.s:4328   .debug_str:0000000000000335 .LASF33
     /tmp/ccTDOAKR.s:4378   .debug_str:0000000000000481 .LASF34
     /tmp/ccTDOAKR.s:4240   .debug_str:0000000000000047 .LASF35
     /tmp/ccTDOAKR.s:4474   .debug_str:0000000000000741 .LASF36
     /tmp/ccTDOAKR.s:4434   .debug_str:0000000000000630 .LASF37
     /tmp/ccTDOAKR.s:4570   .debug_str:0000000000000a54 .LASF38
     /tmp/ccTDOAKR.s:4454   .debug_str:00000000000006aa .LASF39
     /tmp/ccTDOAKR.s:4282   .debug_str:00000000000001a7 .LASF40
     /tmp/ccTDOAKR.s:4468   .debug_str:000000000000071b .LASF41
     /tmp/ccTDOAKR.s:4444   .debug_str:000000000000067b .LASF42
     /tmp/ccTDOAKR.s:4558   .debug_str:00000000000009e6 .LASF43
     /tmp/ccTDOAKR.s:4442   .debug_str:000000000000065f .LASF45
     /tmp/ccTDOAKR.s:4550   .debug_str:00000000000009bf .LASF44
     /tmp/ccTDOAKR.s:4252   .debug_str:00000000000000b1 .LASF46
     /tmp/ccTDOAKR.s:4332   .debug_str:000000000000034d .LASF47
     /tmp/ccTDOAKR.s:4340   .debug_str:0000000000000378 .LASF48
     /tmp/ccTDOAKR.s:4464   .debug_str:0000000000000700 .LASF49
     /tmp/ccTDOAKR.s:4566   .debug_str:0000000000000a2b .LASF50
     /tmp/ccTDOAKR.s:4498   .debug_str:00000000000007d8 .LASF94
     /tmp/ccTDOAKR.s:4572   .debug_str:0000000000000a6c .LASF54
     /tmp/ccTDOAKR.s:4326   .debug_str:0000000000000329 .LASF56
     /tmp/ccTDOAKR.s:4232   .debug_str:000000000000001c .LASF52
     /tmp/ccTDOAKR.s:4372   .debug_str:000000000000045b .LASF53
     /tmp/ccTDOAKR.s:4450   .debug_str:000000000000069d .LASF55
     /tmp/ccTDOAKR.s:4236   .debug_str:0000000000000034 .LASF57
     /tmp/ccTDOAKR.s:4488   .debug_str:0000000000000796 .LASF58
     /tmp/ccTDOAKR.s:4548   .debug_str:000000000000099d .LASF59
     /tmp/ccTDOAKR.s:4402   .debug_str:0000000000000537 .LASF112
     /tmp/ccTDOAKR.s:4296   .debug_str:000000000000021e .LASF60
     /tmp/ccTDOAKR.s:4284   .debug_str:00000000000001ba .LASF61
     /tmp/ccTDOAKR.s:4466   .debug_str:0000000000000716 .LASF62
GAS LISTING /tmp/ccTDOAKR.s 			page 34


     /tmp/ccTDOAKR.s:4350   .debug_str:00000000000003c9 .LASF63
     /tmp/ccTDOAKR.s:4500   .debug_str:00000000000007e0 .LASF68
     /tmp/ccTDOAKR.s:4386   .debug_str:00000000000004c7 .LASF70
     /tmp/ccTDOAKR.s:4344   .debug_str:00000000000003a4 .LASF64
     /tmp/ccTDOAKR.s:4336   .debug_str:000000000000035f .LASF65
     /tmp/ccTDOAKR.s:4234   .debug_str:000000000000002c .LASF66
     /tmp/ccTDOAKR.s:4400   .debug_str:0000000000000525 .LASF67
     /tmp/ccTDOAKR.s:4438   .debug_str:0000000000000649 .LASF69
     /tmp/ccTDOAKR.s:4268   .debug_str:0000000000000142 .LASF71
     /tmp/ccTDOAKR.s:4376   .debug_str:0000000000000474 .LASF72
     /tmp/ccTDOAKR.s:4532   .debug_str:0000000000000952 .LASF73
     /tmp/ccTDOAKR.s:4512   .debug_str:000000000000082f .LASF74
     /tmp/ccTDOAKR.s:4392   .debug_str:00000000000004ec .LASF75
     /tmp/ccTDOAKR.s:4366   .debug_str:0000000000000446 .LASF76
     /tmp/ccTDOAKR.s:4510   .debug_str:000000000000081f .LASF77
     /tmp/ccTDOAKR.s:4562   .debug_str:0000000000000a00 .LASF123
     /tmp/ccTDOAKR.s:4470   .debug_str:0000000000000722 .LASF78
     /tmp/ccTDOAKR.s:4568   .debug_str:0000000000000a4e .LASF79
     /tmp/ccTDOAKR.s:4522   .debug_str:0000000000000914 .LASF80
     /tmp/ccTDOAKR.s:4230   .debug_str:0000000000000017 .LASF81
     /tmp/ccTDOAKR.s:4396   .debug_str:00000000000004fd .LASF82
     /tmp/ccTDOAKR.s:4518   .debug_str:0000000000000900 .LASF83
     /tmp/ccTDOAKR.s:4272   .debug_str:000000000000016f .LASF171
     /tmp/ccTDOAKR.s:4244   .debug_str:0000000000000073 .LASF172
     /tmp/ccTDOAKR.s:4540   .debug_str:000000000000097e .LASF84
     /tmp/ccTDOAKR.s:4530   .debug_str:000000000000094d .LASF173
     /tmp/ccTDOAKR.s:4482   .debug_str:000000000000077e .LASF85
     /tmp/ccTDOAKR.s:4390   .debug_str:00000000000004e7 .LASF86
     /tmp/ccTDOAKR.s:4384   .debug_str:00000000000004c2 .LASF87
     /tmp/ccTDOAKR.s:4496   .debug_str:00000000000007c5 .LASF88
     /tmp/ccTDOAKR.s:4358   .debug_str:0000000000000417 .LASF89
     /tmp/ccTDOAKR.s:4266   .debug_str:0000000000000125 .LASF90
     /tmp/ccTDOAKR.s:4462   .debug_str:00000000000006f5 .LASF91
     /tmp/ccTDOAKR.s:4352   .debug_str:00000000000003d8 .LASF92
     /tmp/ccTDOAKR.s:4362   .debug_str:000000000000042e .LASF96
     /tmp/ccTDOAKR.s:4406   .debug_str:0000000000000549 .LASF93
     /tmp/ccTDOAKR.s:4316   .debug_str:00000000000002ee .LASF95
     /tmp/ccTDOAKR.s:4278   .debug_str:0000000000000199 .LASF97
     /tmp/ccTDOAKR.s:4226   .debug_str:0000000000000000 .LASF98
     /tmp/ccTDOAKR.s:4258   .debug_str:00000000000000eb .LASF99
     /tmp/ccTDOAKR.s:4398   .debug_str:0000000000000505 .LASF100
     /tmp/ccTDOAKR.s:4380   .debug_str:0000000000000497 .LASF101
     /tmp/ccTDOAKR.s:4242   .debug_str:0000000000000052 .LASF102
     /tmp/ccTDOAKR.s:4338   .debug_str:000000000000036f .LASF103
     /tmp/ccTDOAKR.s:4382   .debug_str:00000000000004a1 .LASF104
     /tmp/ccTDOAKR.s:4356   .debug_str:0000000000000408 .LASF105
     /tmp/ccTDOAKR.s:4458   .debug_str:00000000000006b9 .LASF106
     /tmp/ccTDOAKR.s:4312   .debug_str:00000000000002cb .LASF107
     /tmp/ccTDOAKR.s:4308   .debug_str:0000000000000297 .LASF108
     /tmp/ccTDOAKR.s:4248   .debug_str:000000000000008f .LASF109
     /tmp/ccTDOAKR.s:4374   .debug_str:0000000000000468 .LASF110
     /tmp/ccTDOAKR.s:4304   .debug_str:0000000000000258 .LASF111
     /tmp/ccTDOAKR.s:4576   .debug_str:0000000000000a8a .LASF113
     /tmp/ccTDOAKR.s:4430   .debug_str:0000000000000612 .LASF114
     /tmp/ccTDOAKR.s:4298   .debug_str:0000000000000227 .LASF115
     /tmp/ccTDOAKR.s:4492   .debug_str:00000000000007af .LASF116
     /tmp/ccTDOAKR.s:4494   .debug_str:00000000000007be .LASF117
GAS LISTING /tmp/ccTDOAKR.s 			page 35


     /tmp/ccTDOAKR.s:4574   .debug_str:0000000000000a79 .LASF118
     /tmp/ccTDOAKR.s:4394   .debug_str:00000000000004f8 .LASF119
     /tmp/ccTDOAKR.s:4528   .debug_str:000000000000093e .LASF120
     /tmp/ccTDOAKR.s:4246   .debug_str:0000000000000089 .LASF121
     /tmp/ccTDOAKR.s:4256   .debug_str:00000000000000db .LASF122
     /tmp/ccTDOAKR.s:4508   .debug_str:0000000000000813 .LASF124
     /tmp/ccTDOAKR.s:4542   .debug_str:0000000000000988 .LASF125
     /tmp/ccTDOAKR.s:4526   .debug_str:0000000000000931 .LASF126
     /tmp/ccTDOAKR.s:4484   .debug_str:0000000000000783 .LASF174
     /tmp/ccTDOAKR.s:4578   .debug_str:0000000000000a96 .LASF127
     /tmp/ccTDOAKR.s:4320   .debug_str:0000000000000300 .LASF128
     /tmp/ccTDOAKR.s:4478   .debug_str:0000000000000764 .LASF129
     /tmp/ccTDOAKR.s:4418   .debug_str:0000000000000597 .LASF130
     /tmp/ccTDOAKR.s:4502   .debug_str:00000000000007eb .LASF131
     /tmp/ccTDOAKR.s:4420   .debug_str:00000000000005b2 .LASF132
     /tmp/ccTDOAKR.s:4292   .debug_str:00000000000001f5 .LASF133
     /tmp/ccTDOAKR.s:4280   .debug_str:000000000000019e .LASF134
     /tmp/ccTDOAKR.s:4286   .debug_str:00000000000001cd .LASF135
     /tmp/ccTDOAKR.s:4388   .debug_str:00000000000004de .LASF136
     /tmp/ccTDOAKR.s:4504   .debug_str:00000000000007f9 .LASF137
     /tmp/ccTDOAKR.s:4560   .debug_str:00000000000009f5 .LASF138
     /tmp/ccTDOAKR.s:4538   .debug_str:0000000000000975 .LASF139
     /tmp/ccTDOAKR.s:4556   .debug_str:00000000000009e0 .LASF140
     /tmp/ccTDOAKR.s:4370   .debug_str:0000000000000455 .LASF141
     /tmp/ccTDOAKR.s:4536   .debug_str:0000000000000970 .LASF175
     /tmp/ccTDOAKR.s:4520   .debug_str:000000000000090a .LASF142
     /tmp/ccTDOAKR.s:4424   .debug_str:00000000000005c3 .LASF176
     /tmp/ccTDOAKR.s:4524   .debug_str:000000000000091c .LASF143
     /tmp/ccTDOAKR.s:4310   .debug_str:00000000000002c3 .LASF144
     /tmp/ccTDOAKR.s:4264   .debug_str:0000000000000111 .LASF145
     /tmp/ccTDOAKR.s:4456   .debug_str:00000000000006b1 .LASF146
     /tmp/ccTDOAKR.s:4260   .debug_str:00000000000000f4 .LASF147
     /tmp/ccTDOAKR.s:60     .text:0000000000000020 .LFB35
     /tmp/ccTDOAKR.s:1025   .text:000000000000036c .LFE35
     /tmp/ccTDOAKR.s:4516   .debug_str:00000000000008fb .LASF148
     /tmp/ccTDOAKR.s:3834   .debug_loc:0000000000000000 .LLST0
     /tmp/ccTDOAKR.s:4546   .debug_str:0000000000000995 .LASF149
     /tmp/ccTDOAKR.s:3851   .debug_loc:000000000000004b .LLST1
     /tmp/ccTDOAKR.s:4480   .debug_str:0000000000000777 .LASF150
     /tmp/ccTDOAKR.s:3862   .debug_loc:0000000000000081 .LLST2
     /tmp/ccTDOAKR.s:4180   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccTDOAKR.s:4446   .debug_str:000000000000068e .LASF151
     /tmp/ccTDOAKR.s:3877   .debug_loc:00000000000000ca .LLST3
     /tmp/ccTDOAKR.s:598    .text:00000000000001e4 .LBB158
     /tmp/ccTDOAKR.s:624    .text:0000000000000200 .LBE158
     /tmp/ccTDOAKR.s:4506   .debug_str:0000000000000804 .LASF152
     /tmp/ccTDOAKR.s:3932   .debug_loc:00000000000001d1 .LLST26
     /tmp/ccTDOAKR.s:3939   .debug_loc:00000000000001f4 .LLST27
     /tmp/ccTDOAKR.s:611    .text:00000000000001f0 .LVL30
     /tmp/ccTDOAKR.s:614    .text:00000000000001fc .LVL31
     /tmp/ccTDOAKR.s:688    .text:0000000000000230 .LBB146
     /tmp/ccTDOAKR.s:713    .text:0000000000000250 .LBE146
     /tmp/ccTDOAKR.s:3946   .debug_loc:0000000000000217 .LLST25
     /tmp/ccTDOAKR.s:701    .text:000000000000023c .LVL39
     /tmp/ccTDOAKR.s:704    .text:0000000000000248 .LVL40
     /tmp/ccTDOAKR.s:718    .text:0000000000000254 .LBB133
     /tmp/ccTDOAKR.s:739    .text:0000000000000264 .LBE133
GAS LISTING /tmp/ccTDOAKR.s 			page 36


     /tmp/ccTDOAKR.s:4452   .debug_str:00000000000006a2 .LASF153
     /tmp/ccTDOAKR.s:3953   .debug_loc:000000000000023a .LLST23
     /tmp/ccTDOAKR.s:723    .text:000000000000025c .LBB134
     /tmp/ccTDOAKR.s:731    .text:0000000000000260 .LBE134
     /tmp/ccTDOAKR.s:3960   .debug_loc:000000000000025d .LLST24
     /tmp/ccTDOAKR.s:722    .text:000000000000025c .LVL42
     /tmp/ccTDOAKR.s:744    .text:0000000000000268 .LBB123
     /tmp/ccTDOAKR.s:758    .text:000000000000027c .LBE123
     /tmp/ccTDOAKR.s:4404   .debug_str:000000000000053c .LASF154
     /tmp/ccTDOAKR.s:3967   .debug_loc:0000000000000280 .LLST22
     /tmp/ccTDOAKR.s:748    .text:0000000000000270 .LVL45
     /tmp/ccTDOAKR.s:750    .text:0000000000000278 .LVL46
     /tmp/ccTDOAKR.s:4554   .debug_str:00000000000009d9 .LASF155
     /tmp/ccTDOAKR.s:3974   .debug_loc:00000000000002a3 .LLST17
     /tmp/ccTDOAKR.s:4360   .debug_str:0000000000000420 .LASF156
     /tmp/ccTDOAKR.s:3981   .debug_loc:00000000000002c6 .LLST18
     /tmp/ccTDOAKR.s:3988   .debug_loc:00000000000002e9 .LLST19
     /tmp/ccTDOAKR.s:3995   .debug_loc:000000000000030c .LLST20
     /tmp/ccTDOAKR.s:4006   .debug_loc:0000000000000342 .LLST21
     /tmp/ccTDOAKR.s:790    .text:0000000000000294 .LVL51
     /tmp/ccTDOAKR.s:793    .text:00000000000002a0 .LVL52
     /tmp/ccTDOAKR.s:802    .text:00000000000002b4 .LVL55
     /tmp/ccTDOAKR.s:832    .text:00000000000002d0 .LBB105
     /tmp/ccTDOAKR.s:844    .text:00000000000002dc .LBE105
     /tmp/ccTDOAKR.s:4023   .debug_loc:000000000000038d .LLST16
     /tmp/ccTDOAKR.s:836    .text:00000000000002d8 .LVL60
     /tmp/ccTDOAKR.s:4030   .debug_loc:00000000000003b0 .LLST13
     /tmp/ccTDOAKR.s:4422   .debug_str:00000000000005be .LASF157
     /tmp/ccTDOAKR.s:4037   .debug_loc:00000000000003d3 .LLST14
     /tmp/ccTDOAKR.s:4044   .debug_loc:00000000000003f6 .LLST15
     /tmp/ccTDOAKR.s:878    .text:0000000000000300 .LVL66
     /tmp/ccTDOAKR.s:908    .text:000000000000031c .LBB87
     /tmp/ccTDOAKR.s:929    .text:000000000000032c .LBE87
     /tmp/ccTDOAKR.s:4061   .debug_loc:0000000000000441 .LLST11
     /tmp/ccTDOAKR.s:4068   .debug_loc:0000000000000464 .LLST12
     /tmp/ccTDOAKR.s:921    .text:0000000000000328 .LVL72
     /tmp/ccTDOAKR.s:934    .text:0000000000000330 .LBB83
     /tmp/ccTDOAKR.s:955    .text:0000000000000340 .LBE83
     /tmp/ccTDOAKR.s:4075   .debug_loc:0000000000000487 .LLST9
     /tmp/ccTDOAKR.s:4082   .debug_loc:00000000000004aa .LLST10
     /tmp/ccTDOAKR.s:947    .text:000000000000033c .LVL75
     /tmp/ccTDOAKR.s:960    .text:0000000000000344 .LBB80
     /tmp/ccTDOAKR.s:981    .text:0000000000000354 .LBE80
     /tmp/ccTDOAKR.s:4089   .debug_loc:00000000000004cd .LLST7
     /tmp/ccTDOAKR.s:4096   .debug_loc:00000000000004f0 .LLST8
     /tmp/ccTDOAKR.s:973    .text:0000000000000350 .LVL78
     /tmp/ccTDOAKR.s:986    .text:0000000000000358 .LBB79
     /tmp/ccTDOAKR.s:1007   .text:0000000000000368 .LBE79
     /tmp/ccTDOAKR.s:4103   .debug_loc:0000000000000513 .LLST6
     /tmp/ccTDOAKR.s:999    .text:0000000000000364 .LVL81
     /tmp/ccTDOAKR.s:403    .text:00000000000000dc .LBB74
     /tmp/ccTDOAKR.s:493    .text:0000000000000184 .LBE74
     /tmp/ccTDOAKR.s:4110   .debug_loc:0000000000000536 .LLST4
     /tmp/ccTDOAKR.s:4486   .debug_str:0000000000000790 .LASF158
     /tmp/ccTDOAKR.s:4117   .debug_loc:0000000000000559 .LLST5
     /tmp/ccTDOAKR.s:405    .text:00000000000000dc .LBB75
     /tmp/ccTDOAKR.s:422    .text:00000000000000e8 .LBE75
GAS LISTING /tmp/ccTDOAKR.s 			page 37


     /tmp/ccTDOAKR.s:424    .text:00000000000000e8 .LBB77
     /tmp/ccTDOAKR.s:440    .text:00000000000000f4 .LBE77
     /tmp/ccTDOAKR.s:445    .text:0000000000000104 .LVL8
     /tmp/ccTDOAKR.s:450    .text:0000000000000110 .LVL9
     /tmp/ccTDOAKR.s:455    .text:0000000000000120 .LVL10
     /tmp/ccTDOAKR.s:460    .text:0000000000000130 .LVL11
     /tmp/ccTDOAKR.s:465    .text:000000000000013c .LVL12
     /tmp/ccTDOAKR.s:470    .text:000000000000014c .LVL13
     /tmp/ccTDOAKR.s:475    .text:000000000000015c .LVL14
     /tmp/ccTDOAKR.s:480    .text:0000000000000168 .LVL15
     /tmp/ccTDOAKR.s:485    .text:0000000000000178 .LVL16
     /tmp/ccTDOAKR.s:489    .text:0000000000000180 .LVL17
     /tmp/ccTDOAKR.s:630    .text:0000000000000204 .LBB172
     /tmp/ccTDOAKR.s:641    .text:0000000000000208 .LBE172
     /tmp/ccTDOAKR.s:4124   .debug_loc:000000000000057c .LLST28
     /tmp/ccTDOAKR.s:643    .text:0000000000000208 .LBB174
     /tmp/ccTDOAKR.s:655    .text:000000000000020c .LBE174
     /tmp/ccTDOAKR.s:4131   .debug_loc:000000000000059f .LLST29
     /tmp/ccTDOAKR.s:852    .text:00000000000002e8 .LVL62
     /tmp/ccTDOAKR.s:84     .text:0000000000000044 .LBB53
     /tmp/ccTDOAKR.s:101    .text:0000000000000050 .LBE53
     /tmp/ccTDOAKR.s:103    .text:0000000000000050 .LBB55
     /tmp/ccTDOAKR.s:116    .text:0000000000000054 .LBE55
     /tmp/ccTDOAKR.s:118    .text:0000000000000054 .LBB57
     /tmp/ccTDOAKR.s:131    .text:0000000000000058 .LBE57
     /tmp/ccTDOAKR.s:523    .text:00000000000001ac .LBB201
     /tmp/ccTDOAKR.s:531    .text:00000000000001b0 .LBE201
     /tmp/ccTDOAKR.s:4138   .debug_loc:00000000000005c2 .LLST30
     /tmp/ccTDOAKR.s:539    .text:00000000000001b8 .LBB203
     /tmp/ccTDOAKR.s:554    .text:00000000000001c4 .LBE203
     /tmp/ccTDOAKR.s:4145   .debug_loc:00000000000005e5 .LLST31
     /tmp/ccTDOAKR.s:560    .text:00000000000001cc .LBB205
     /tmp/ccTDOAKR.s:571    .text:00000000000001d0 .LBE205
     /tmp/ccTDOAKR.s:4153   .debug_loc:0000000000000609 .LLST32
     /tmp/ccTDOAKR.s:573    .text:00000000000001d0 .LBB207
     /tmp/ccTDOAKR.s:587    .text:00000000000001d8 .LBE207
     /tmp/ccTDOAKR.s:4160   .debug_loc:000000000000062c .LLST33
     /tmp/ccTDOAKR.s:517    .text:00000000000001a0 .LVL19
     /tmp/ccTDOAKR.s:558    .text:00000000000001cc .LVL24
     /tmp/ccTDOAKR.s:592    .text:00000000000001e0 .LVL27
     /tmp/ccTDOAKR.s:10     .text:0000000000000000 .LFB34
     /tmp/ccTDOAKR.s:40     .text:0000000000000020 .LFE34
     /tmp/ccTDOAKR.s:4318   .debug_str:00000000000002fb .LASF159
     /tmp/ccTDOAKR.s:4534   .debug_str:000000000000096b .LASF160
     /tmp/ccTDOAKR.s:4342   .debug_str:0000000000000390 .LASF161
     /tmp/ccTDOAKR.s:4412   .debug_str:0000000000000579 .LASF163
     /tmp/ccTDOAKR.s:4228   .debug_str:0000000000000005 .LASF162
     /tmp/ccTDOAKR.s:4410   .debug_str:000000000000056c .LASF164
     /tmp/ccTDOAKR.s:4334   .debug_str:0000000000000358 .LASF165
     /tmp/ccTDOAKR.s:4324   .debug_str:0000000000000319 .LASF166
     /tmp/ccTDOAKR.s:112    .text:0000000000000054 .LVL1
     /tmp/ccTDOAKR.s:629    .text:0000000000000204 .LVL33
     /tmp/ccTDOAKR.s:651    .text:000000000000020c .LVL35
     /tmp/ccTDOAKR.s:680    .text:0000000000000230 .LVL37
     /tmp/ccTDOAKR.s:127    .text:0000000000000058 .LVL2
     /tmp/ccTDOAKR.s:670    .text:000000000000021c .LVL36
     /tmp/ccTDOAKR.s:99     .text:0000000000000050 .LVL0
GAS LISTING /tmp/ccTDOAKR.s 			page 38


     /tmp/ccTDOAKR.s:159    .text:0000000000000080 .LVL4
     /tmp/ccTDOAKR.s:491    .text:0000000000000184 .LVL18
     /tmp/ccTDOAKR.s:584    .text:00000000000001d8 .LVL26
     /tmp/ccTDOAKR.s:154    .text:000000000000007c .LVL3
     /tmp/ccTDOAKR.s:414    .text:00000000000000e0 .LVL5
     /tmp/ccTDOAKR.s:594    .text:00000000000001e4 .LVL28
     /tmp/ccTDOAKR.s:715    .text:0000000000000254 .LVL41
     /tmp/ccTDOAKR.s:741    .text:0000000000000268 .LVL44
     /tmp/ccTDOAKR.s:760    .text:0000000000000280 .LVL47
     /tmp/ccTDOAKR.s:828    .text:00000000000002d0 .LVL59
     /tmp/ccTDOAKR.s:846    .text:00000000000002e0 .LVL61
     /tmp/ccTDOAKR.s:854    .text:00000000000002ec .LVL63
     /tmp/ccTDOAKR.s:904    .text:000000000000031c .LVL70
     /tmp/ccTDOAKR.s:931    .text:0000000000000330 .LVL73
     /tmp/ccTDOAKR.s:957    .text:0000000000000344 .LVL76
     /tmp/ccTDOAKR.s:983    .text:0000000000000358 .LVL79
     /tmp/ccTDOAKR.s:606    .text:00000000000001e8 .LVL29
     /tmp/ccTDOAKR.s:621    .text:0000000000000200 .LVL32
     /tmp/ccTDOAKR.s:696    .text:0000000000000234 .LVL38
     /tmp/ccTDOAKR.s:729    .text:0000000000000260 .LVL43
     /tmp/ccTDOAKR.s:773    .text:0000000000000284 .LVL48
     /tmp/ccTDOAKR.s:779    .text:0000000000000288 .LVL49
     /tmp/ccTDOAKR.s:785    .text:000000000000028c .LVL50
     /tmp/ccTDOAKR.s:795    .text:00000000000002a4 .LVL53
     /tmp/ccTDOAKR.s:800    .text:00000000000002ac .LVL54
     /tmp/ccTDOAKR.s:806    .text:00000000000002b8 .LVL56
     /tmp/ccTDOAKR.s:812    .text:00000000000002c0 .LVL57
     /tmp/ccTDOAKR.s:822    .text:00000000000002c8 .LVL58
     /tmp/ccTDOAKR.s:866    .text:00000000000002f0 .LVL64
     /tmp/ccTDOAKR.s:872    .text:00000000000002f4 .LVL65
     /tmp/ccTDOAKR.s:882    .text:0000000000000304 .LVL67
     /tmp/ccTDOAKR.s:888    .text:000000000000030c .LVL68
     /tmp/ccTDOAKR.s:898    .text:0000000000000314 .LVL69
     /tmp/ccTDOAKR.s:916    .text:0000000000000320 .LVL71
     /tmp/ccTDOAKR.s:942    .text:0000000000000334 .LVL74
     /tmp/ccTDOAKR.s:968    .text:0000000000000348 .LVL77
     /tmp/ccTDOAKR.s:994    .text:000000000000035c .LVL80
     /tmp/ccTDOAKR.s:420    .text:00000000000000e8 .LVL6
     /tmp/ccTDOAKR.s:438    .text:00000000000000f4 .LVL7
     /tmp/ccTDOAKR.s:638    .text:0000000000000208 .LVL34
     /tmp/ccTDOAKR.s:522    .text:00000000000001ac .LVL20
     /tmp/ccTDOAKR.s:529    .text:00000000000001b0 .LVL21
     /tmp/ccTDOAKR.s:538    .text:00000000000001b8 .LVL22
     /tmp/ccTDOAKR.s:551    .text:00000000000001c4 .LVL23
     /tmp/ccTDOAKR.s:568    .text:00000000000001d0 .LVL25
     /tmp/ccTDOAKR.s:1036   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccTDOAKR.s:146    .text:0000000000000078 .LBB61
     /tmp/ccTDOAKR.s:162    .text:0000000000000084 .LBE61
     /tmp/ccTDOAKR.s:168    .text:0000000000000084 .LBB177
     /tmp/ccTDOAKR.s:175    .text:000000000000008c .LBE177
     /tmp/ccTDOAKR.s:181    .text:000000000000008c .LBB178
     /tmp/ccTDOAKR.s:190    .text:0000000000000094 .LBE178
     /tmp/ccTDOAKR.s:196    .text:0000000000000094 .LBB179
     /tmp/ccTDOAKR.s:207    .text:000000000000009c .LBE179
     /tmp/ccTDOAKR.s:213    .text:000000000000009c .LBB180
     /tmp/ccTDOAKR.s:226    .text:00000000000000a4 .LBE180
     /tmp/ccTDOAKR.s:232    .text:00000000000000a4 .LBB181
GAS LISTING /tmp/ccTDOAKR.s 			page 39


     /tmp/ccTDOAKR.s:247    .text:00000000000000ac .LBE181
     /tmp/ccTDOAKR.s:253    .text:00000000000000ac .LBB182
     /tmp/ccTDOAKR.s:270    .text:00000000000000b4 .LBE182
     /tmp/ccTDOAKR.s:276    .text:00000000000000b4 .LBB183
     /tmp/ccTDOAKR.s:295    .text:00000000000000bc .LBE183
     /tmp/ccTDOAKR.s:301    .text:00000000000000bc .LBB184
     /tmp/ccTDOAKR.s:322    .text:00000000000000c4 .LBE184
     /tmp/ccTDOAKR.s:328    .text:00000000000000c4 .LBB185
     /tmp/ccTDOAKR.s:351    .text:00000000000000cc .LBE185
     /tmp/ccTDOAKR.s:357    .text:00000000000000cc .LBB186
     /tmp/ccTDOAKR.s:382    .text:00000000000000d4 .LBE186
     /tmp/ccTDOAKR.s:388    .text:00000000000000d4 .LBB187
     /tmp/ccTDOAKR.s:506    .text:0000000000000184 .LBE187
     /tmp/ccTDOAKR.s:596    .text:00000000000001e4 .LBB188
     /tmp/ccTDOAKR.s:656    .text:000000000000020c .LBE188
     /tmp/ccTDOAKR.s:685    .text:0000000000000230 .LBB189
     /tmp/ccTDOAKR.s:1021   .text:000000000000036c .LBE189
     /tmp/ccTDOAKR.s:857    .text:00000000000002ec .LBB92
     /tmp/ccTDOAKR.s:896    .text:0000000000000310 .LBE92
     /tmp/ccTDOAKR.s:900    .text:0000000000000314 .LBB93
     /tmp/ccTDOAKR.s:906    .text:000000000000031c .LBE93
     /tmp/ccTDOAKR.s:763    .text:0000000000000280 .LBB113
     /tmp/ccTDOAKR.s:820    .text:00000000000002c4 .LBE113
     /tmp/ccTDOAKR.s:824    .text:00000000000002c8 .LBB114
     /tmp/ccTDOAKR.s:830    .text:00000000000002d0 .LBE114

UNDEFINED SYMBOLS
_Z12pprintStringPKc
_Z12printIntegerm
__getc
_ZN3TCB11timeCounterE
_ZN5SList7oneTickEv
_ZN3TCB7runningE
_ZN3TCB8dispatchEv
console_handler
_ZN15MemoryAllocator8InstanceEv
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator19getLargestFreeBlockEv
_ZN3TCB12createThreadEPFvPvES0_Pm
_ZN3TCB4exitEv
_ZN3SEM4openEj
_ZN3SEM5closeEv
_ZN3SEM4waitEv
_ZN3SEM6signalEv
_ZN3TCB5sleepEm
