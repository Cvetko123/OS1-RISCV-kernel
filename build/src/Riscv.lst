GAS LISTING /tmp/ccJ3qHFz.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB29:
  11              		.file 1 "src/Riscv.cpp"
   1:src/Riscv.cpp **** //
   2:src/Riscv.cpp **** // Created by os on 9/8/25.
   3:src/Riscv.cpp **** //
   4:src/Riscv.cpp **** 
   5:src/Riscv.cpp **** #include "../h/Riscv.hpp"
   6:src/Riscv.cpp **** #include "../lib/console.h"
   7:src/Riscv.cpp **** #include "../h/syscall_c.hpp"
   8:src/Riscv.cpp **** #include "../h/MemoryAllocator.hpp"
   9:src/Riscv.cpp **** #include  "../h/print.hpp"
  10:src/Riscv.cpp **** using Body=void(*)(void*);
  11:src/Riscv.cpp **** 
  12:src/Riscv.cpp **** void Riscv::popSppSpie() {
  12              		.loc 1 12 26
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/Riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 13 5
  21              		.loc 1 13 38 is_stmt 0
  22              	#APP
  23              	# 13 "src/Riscv.cpp" 1
  14              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 14 5 is_stmt 1
  27              		.loc 1 14 29 is_stmt 0
  28              	# 14 "src/Riscv.cpp" 1
  15              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 15 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE29:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
GAS LISTING /tmp/ccJ3qHFz.s 			page 2


  45 0000 73636175 		.string	"scause:"
  45      73653A00 
  46              		.align	3
  47              	.LC1:
  48 0008 0A00     		.string	"\n"
  49 000a 00000000 		.align	3
  49      0000
  50              	.LC2:
  51 0010 73747661 		.string	"stval:"
  51      6C3A00
  52 0017 00       		.align	3
  53              	.LC3:
  54 0018 73657063 		.string	"sepc:"
  54      3A00
  55              		.text
  56              		.align	2
  57              		.globl	_ZN5Riscv21SupervisorTrapHandlerEv
  59              	_ZN5Riscv21SupervisorTrapHandlerEv:
  60              	.LFB30:
  16:src/Riscv.cpp **** 
  17:src/Riscv.cpp **** // void Riscv::restorePrivilege()
  18:src/Riscv.cpp **** // {
  19:src/Riscv.cpp **** //     if(TCB::running->isSysThread())
  20:src/Riscv.cpp **** //         ms_sstatus(SSTATUS_SPP);
  21:src/Riscv.cpp **** //     else
  22:src/Riscv.cpp **** //         mc_sstatus(SSTATUS_SPP);
  23:src/Riscv.cpp **** // }
  24:src/Riscv.cpp **** 
  25:src/Riscv.cpp **** 
  26:src/Riscv.cpp **** void Riscv::SupervisorTrapHandler() {
  61              		.loc 1 26 37 is_stmt 1
  62              		.cfi_startproc
  63 0020 130101FA 		addi	sp,sp,-96
  64              		.cfi_def_cfa_offset 96
  65 0024 233C1104 		sd	ra,88(sp)
  66 0028 23388104 		sd	s0,80(sp)
  67 002c 23349104 		sd	s1,72(sp)
  68 0030 23302105 		sd	s2,64(sp)
  69 0034 233C3103 		sd	s3,56(sp)
  70 0038 23384103 		sd	s4,48(sp)
  71 003c 23345103 		sd	s5,40(sp)
  72              		.cfi_offset 1, -8
  73              		.cfi_offset 8, -16
  74              		.cfi_offset 9, -24
  75              		.cfi_offset 18, -32
  76              		.cfi_offset 19, -40
  77              		.cfi_offset 20, -48
  78              		.cfi_offset 21, -56
  79 0040 13040106 		addi	s0,sp,96
  80              		.cfi_def_cfa 8, 0
  27:src/Riscv.cpp ****     uint64 sepc;
  81              		.loc 1 27 5
  28:src/Riscv.cpp ****     uint64 sstatus;
  82              		.loc 1 28 5
  29:src/Riscv.cpp ****     uint64 scause=get_scause();
  83              		.loc 1 29 5
  84              	.LBB45:
GAS LISTING /tmp/ccJ3qHFz.s 			page 3


  85              	.LBB46:
  86              		.file 2 "src/../h/Riscv.hpp"
   1:src/../h/Riscv.hpp **** //
   2:src/../h/Riscv.hpp **** // Created by os on 9/8/25.
   3:src/../h/Riscv.hpp **** //
   4:src/../h/Riscv.hpp **** 
   5:src/../h/Riscv.hpp **** #ifndef PROJECT_BASE_V1_1_COPY_RISCV_HPP
   6:src/../h/Riscv.hpp **** #define PROJECT_BASE_V1_1_COPY_RISCV_HPP
   7:src/../h/Riscv.hpp **** #include "../lib/hw.h"
   8:src/../h/Riscv.hpp **** 
   9:src/../h/Riscv.hpp **** class Riscv {
  10:src/../h/Riscv.hpp **** public:
  11:src/../h/Riscv.hpp ****     static void set_stvec(uint64 stvec);
  12:src/../h/Riscv.hpp ****     static void set_sepc(uint64 sepc);
  13:src/../h/Riscv.hpp ****     static uint64 get_sepc();
  14:src/../h/Riscv.hpp ****     static void set_sstatus(uint64 sstatus);
  15:src/../h/Riscv.hpp ****     static uint64 get_sstatus();
  16:src/../h/Riscv.hpp ****     static uint64 get_scause();
  17:src/../h/Riscv.hpp ****     static uint64 get_stval();
  18:src/../h/Riscv.hpp ****     static void ms_sstatus(uint64 mask);
  19:src/../h/Riscv.hpp ****     static void mc_sstatus(uint64 mask);
  20:src/../h/Riscv.hpp ****     static void mc_sip(uint64 mask);
  21:src/../h/Riscv.hpp ****     static void ms_sie(uint64 mask);
  22:src/../h/Riscv.hpp ****     enum BitMaskSstatus
  23:src/../h/Riscv.hpp ****     {
  24:src/../h/Riscv.hpp ****         SSTATUS_SIE=(1UL<<1),
  25:src/../h/Riscv.hpp ****         SSTATUS_SPIE=(1UL<<5),
  26:src/../h/Riscv.hpp ****         SSTATUS_SPP=(1UL<<8)
  27:src/../h/Riscv.hpp ****     };
  28:src/../h/Riscv.hpp ****     enum BitMaskSip: uint64
  29:src/../h/Riscv.hpp ****     {
  30:src/../h/Riscv.hpp ****         SIP_SSIP=(1UL<<1),
  31:src/../h/Riscv.hpp ****         SIP_STIP=(1UL<<5),
  32:src/../h/Riscv.hpp ****         SIP_SEIP=(1UL<<9)
  33:src/../h/Riscv.hpp ****     };
  34:src/../h/Riscv.hpp ****     enum BitMaskSie: uint64
  35:src/../h/Riscv.hpp ****     {
  36:src/../h/Riscv.hpp ****         SIE_SSIE=(1UL<<1),
  37:src/../h/Riscv.hpp ****         SIE_SEIE=(1UL<<9)
  38:src/../h/Riscv.hpp ****     };
  39:src/../h/Riscv.hpp **** 
  40:src/../h/Riscv.hpp **** 
  41:src/../h/Riscv.hpp ****     static void SupervisorTrap();
  42:src/../h/Riscv.hpp **** 
  43:src/../h/Riscv.hpp ****     static void restorePrivilege();
  44:src/../h/Riscv.hpp ****     static void popSppSpie();
  45:src/../h/Riscv.hpp **** 
  46:src/../h/Riscv.hpp **** 
  47:src/../h/Riscv.hpp **** 
  48:src/../h/Riscv.hpp ****     static void SupervisorTrapHandler();
  49:src/../h/Riscv.hpp **** };
  50:src/../h/Riscv.hpp **** 
  51:src/../h/Riscv.hpp **** 
  52:src/../h/Riscv.hpp **** inline void Riscv::set_stvec(uint64 stvec) {
  53:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[x]" :: [x] "r" (stvec));
  54:src/../h/Riscv.hpp **** }
  55:src/../h/Riscv.hpp **** 
GAS LISTING /tmp/ccJ3qHFz.s 			page 4


  56:src/../h/Riscv.hpp **** inline void Riscv::set_sepc(uint64 sepc) {
  57:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[x]" :: [x] "r" (sepc));
  58:src/../h/Riscv.hpp **** }
  59:src/../h/Riscv.hpp **** 
  60:src/../h/Riscv.hpp **** inline uint64 Riscv::get_sepc() {
  61:src/../h/Riscv.hpp ****     uint64 sepc;
  62:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sepc" : [x] "=r" (sepc));
  63:src/../h/Riscv.hpp ****     return sepc;
  64:src/../h/Riscv.hpp **** }
  65:src/../h/Riscv.hpp **** 
  66:src/../h/Riscv.hpp **** inline void Riscv::set_sstatus(uint64 sstatus) {
  67:src/../h/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[x]" :: [x] "r" (sstatus));
  68:src/../h/Riscv.hpp **** }
  69:src/../h/Riscv.hpp **** 
  70:src/../h/Riscv.hpp **** inline uint64 Riscv::get_sstatus() {
  71:src/../h/Riscv.hpp ****     uint64 sstatus;
  72:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sstatus" : [x] "=r" (sstatus));
  73:src/../h/Riscv.hpp ****     return sstatus;
  74:src/../h/Riscv.hpp **** }
  75:src/../h/Riscv.hpp **** 
  76:src/../h/Riscv.hpp **** inline uint64 Riscv::get_scause() {
  77:src/../h/Riscv.hpp ****     uint64 volatile scause;
  87              		.loc 2 77 5
  78:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %[scause], scause":[scause]"=r"(scause));
  88              		.loc 2 78 5
  89              		.loc 2 78 68 is_stmt 0
  90              	#APP
  91              	# 78 "src/../h/Riscv.hpp" 1
  79              	    return scause;
  92              		csrr a5, scause
  93              	# 0 "" 2
  94              	#NO_APP
  95 0048 2334F4FA 		sd	a5,-88(s0)
  96              		.loc 2 79 5 is_stmt 1
  97              		.loc 2 79 12 is_stmt 0
  98 004c 033784FA 		ld	a4,-88(s0)
  99              	.LVL0:
 100              	.LBE46:
 101              	.LBE45:
  30:src/Riscv.cpp ****     sepc=get_sepc();
 102              		.loc 1 30 5 is_stmt 1
 103              	.LBB47:
 104              	.LBB48:
  61:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sepc" : [x] "=r" (sepc));
 105              		.loc 2 61 5
  62:src/../h/Riscv.hpp ****     return sepc;
 106              		.loc 2 62 5
  62:src/../h/Riscv.hpp ****     return sepc;
 107              		.loc 2 62 58 is_stmt 0
 108              	#APP
 109              	# 62 "src/../h/Riscv.hpp" 1
 110              		csrr s1,sepc
 111              	# 0 "" 2
 112              	.LVL1:
  63:src/../h/Riscv.hpp **** }
 113              		.loc 2 63 5 is_stmt 1
 114              	#NO_APP
GAS LISTING /tmp/ccJ3qHFz.s 			page 5


 115              	.LBE48:
 116              	.LBE47:
  31:src/Riscv.cpp ****     sstatus=get_sstatus();
 117              		.loc 1 31 5
 118              	.LBB49:
 119              	.LBB50:
  71:src/../h/Riscv.hpp ****     __asm__ volatile ("csrr %[x],sstatus" : [x] "=r" (sstatus));
 120              		.loc 2 71 5
  72:src/../h/Riscv.hpp ****     return sstatus;
 121              		.loc 2 72 5
  72:src/../h/Riscv.hpp ****     return sstatus;
 122              		.loc 2 72 64 is_stmt 0
 123              	#APP
 124              	# 72 "src/../h/Riscv.hpp" 1
 125              		csrr s2,sstatus
 126              	# 0 "" 2
 127              	.LVL2:
  73:src/../h/Riscv.hpp **** }
 128              		.loc 2 73 5 is_stmt 1
 129              	#NO_APP
 130              	.LBE50:
 131              	.LBE49:
  32:src/Riscv.cpp ****     if (scause == 0x8000000000000001UL) {
 132              		.loc 1 32 5
 133              	.LBB51:
 134 0058 9307F0FF 		li	a5,-1
 135 005c 9397F703 		slli	a5,a5,63
 136 0060 93871700 		addi	a5,a5,1
 137 0064 630CF710 		beq	a4,a5,.L24
 138              	.LBE51:
  33:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  34:src/Riscv.cpp ****         mc_sip(SIP_SSIP);
  35:src/Riscv.cpp ****     }
  36:src/Riscv.cpp ****     else if (scause == 0x8000000000000009UL) {
 139              		.loc 1 36 10
 140              	.LBB181:
 141              	.LBB52:
 142 0068 9307F0FF 		li	a5,-1
 143 006c 9397F703 		slli	a5,a5,63
 144 0070 93879700 		addi	a5,a5,9
 145 0074 630AF710 		beq	a4,a5,.L25
 146              	.LBB53:
  37:src/Riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
  38:src/Riscv.cpp ****         console_handler();
  39:src/Riscv.cpp ****     }
  40:src/Riscv.cpp ****     else {
  41:src/Riscv.cpp ****         uint64 syscode;
 147              		.loc 1 41 9
  42:src/Riscv.cpp ****     __asm__ volatile ("mv %[x], a0" : [x] "=r" (syscode));
 148              		.loc 1 42 5
 149              		.loc 1 42 58 is_stmt 0
 150              	#APP
 151              	# 42 "src/Riscv.cpp" 1
  43              	
 152              		mv a5, a0
 153              	# 0 "" 2
 154              	.LVL3:
GAS LISTING /tmp/ccJ3qHFz.s 			page 6


  44:src/Riscv.cpp ****     if (syscode==MEM_ALLOC) {
 155              		.loc 1 44 5 is_stmt 1
 156              	#NO_APP
 157              	.LBB54:
 158 007c 13071000 		li	a4,1
 159              	.LVL4:
 160 0080 638AE710 		beq	a5,a4,.L26
 161              	.LBE54:
 162              	.LBE53:
 163              	.LBE52:
 164              	.LBE181:
  45:src/Riscv.cpp ****         size_t size_in_blocks;
  46:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (size_in_blocks));
  47:src/Riscv.cpp ****         void* ptr = MemoryAllocator::Instance()->mem_alloc(size_in_blocks * MEM_BLOCK_SIZE);
  48:src/Riscv.cpp ****         __asm__ volatile ("mv a0,%[x]" :: [x] "r" (ptr));
  49:src/Riscv.cpp ****     }
  50:src/Riscv.cpp ****     else if (syscode==MEM_FREE) {
 165              		.loc 1 50 10
 166              	.LBB182:
 167              	.LBB167:
 168              	.LBB155:
 169              	.LBB139:
 170              	.LBB55:
 171 0084 13072000 		li	a4,2
 172 0088 638CE714 		beq	a5,a4,.L27
 173              	.LBE55:
 174              	.LBE139:
 175              	.LBE155:
 176              	.LBE167:
 177              	.LBE182:
  51:src/Riscv.cpp ****         void* ptr;
  52:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (ptr));
  53:src/Riscv.cpp ****         MemoryAllocator::Instance()->mem_free(ptr);
  54:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (0));
  55:src/Riscv.cpp ****     }
  56:src/Riscv.cpp ****     else if (syscode==MEM_GET_FREE_SPACE) {
 178              		.loc 1 56 10
 179              	.LBB183:
 180              	.LBB168:
 181              	.LBB156:
 182              	.LBB140:
 183              	.LBB128:
 184              	.LBB56:
 185 008c 13073000 		li	a4,3
 186 0090 638AE716 		beq	a5,a4,.L28
 187              	.LBE56:
 188              	.LBE128:
 189              	.LBE140:
 190              	.LBE156:
 191              	.LBE168:
 192              	.LBE183:
  57:src/Riscv.cpp ****         size_t freeMem = MemoryAllocator::Instance()->getFreeMemSize();
  58:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (freeMem));
  59:src/Riscv.cpp ****     }
  60:src/Riscv.cpp ****     else if (syscode==MEM_GET_LARGEST_FREE_BLOCK) {
 193              		.loc 1 60 10
 194              	.LBB184:
GAS LISTING /tmp/ccJ3qHFz.s 			page 7


 195              	.LBB169:
 196              	.LBB157:
 197              	.LBB141:
 198              	.LBB129:
 199              	.LBB118:
 200              	.LBB57:
 201 0094 13074000 		li	a4,4
 202 0098 6380E718 		beq	a5,a4,.L29
 203              	.LBE57:
 204              	.LBE118:
 205              	.LBE129:
 206              	.LBE141:
 207              	.LBE157:
 208              	.LBE169:
 209              	.LBE184:
  61:src/Riscv.cpp ****         size_t largestBlock = MemoryAllocator::Instance()->getLargestFreeBlock();
  62:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (largestBlock));
  63:src/Riscv.cpp ****     }
  64:src/Riscv.cpp ****     else if (syscode==THREAD_CREATE) {
 210              		.loc 1 64 10
 211              	.LBB185:
 212              	.LBB170:
 213              	.LBB158:
 214              	.LBB142:
 215              	.LBB130:
 216              	.LBB119:
 217              	.LBB107:
 218              	.LBB58:
 219 009c 13071001 		li	a4,17
 220 00a0 6388E718 		beq	a5,a4,.L30
 221              	.LBE58:
 222              	.LBE107:
 223              	.LBE119:
 224              	.LBE130:
 225              	.LBE142:
 226              	.LBE158:
 227              	.LBE170:
 228              	.LBE185:
  65:src/Riscv.cpp ****         thread_t* handle;
  66:src/Riscv.cpp ****         Body start_routine;
  67:src/Riscv.cpp ****         void* arg;
  68:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
  69:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (start_routine));
  70:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a3" : [x] "=r" (arg));
  71:src/Riscv.cpp **** 
  72:src/Riscv.cpp ****         uint64 *sp=(uint64*)MemoryAllocator::Instance()->mem_alloc(DEFAULT_STACK_SIZE);
  73:src/Riscv.cpp **** 
  74:src/Riscv.cpp **** 
  75:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
  76:src/Riscv.cpp ****         int ret=0;
  77:src/Riscv.cpp ****         if (*handle) {
  78:src/Riscv.cpp ****             ret=0;
  79:src/Riscv.cpp ****         }
  80:src/Riscv.cpp ****         else {
  81:src/Riscv.cpp ****             ret=1;
  82:src/Riscv.cpp ****         }
  83:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
GAS LISTING /tmp/ccJ3qHFz.s 			page 8


  84:src/Riscv.cpp ****     }
  85:src/Riscv.cpp ****     else if (syscode==THREAD_EXIT) {
 229              		.loc 1 85 10
 230              	.LBB186:
 231              	.LBB171:
 232              	.LBB159:
 233              	.LBB143:
 234              	.LBB131:
 235              	.LBB120:
 236              	.LBB108:
 237              	.LBB99:
 238              	.LBB59:
 239 00a4 13072001 		li	a4,18
 240 00a8 638CE71C 		beq	a5,a4,.L31
 241              	.LBE59:
 242              	.LBE99:
 243              	.LBE108:
 244              	.LBE120:
 245              	.LBE131:
 246              	.LBE143:
 247              	.LBE159:
 248              	.LBE171:
 249              	.LBE186:
  86:src/Riscv.cpp ****         int ret = TCB::exit();
  87:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
  88:src/Riscv.cpp ****     }
  89:src/Riscv.cpp ****     else if (syscode==THREAD_DISPATCH) {
 250              		.loc 1 89 10
 251              	.LBB187:
 252              	.LBB172:
 253              	.LBB160:
 254              	.LBB144:
 255              	.LBB132:
 256              	.LBB121:
 257              	.LBB109:
 258              	.LBB100:
 259              	.LBB91:
 260              	.LBB60:
 261 00ac 13073001 		li	a4,19
 262 00b0 6380E71E 		beq	a5,a4,.L32
 263              	.LBE60:
 264              	.LBE91:
 265              	.LBE100:
 266              	.LBE109:
 267              	.LBE121:
 268              	.LBE132:
 269              	.LBE144:
 270              	.LBE160:
 271              	.LBE172:
 272              	.LBE187:
  90:src/Riscv.cpp ****         TCB::dispatch();
  91:src/Riscv.cpp ****     }
  92:src/Riscv.cpp ****     else if (syscode==SEM_OPEN) {
 273              		.loc 1 92 10
 274              	.LBB188:
 275              	.LBB173:
 276              	.LBB161:
GAS LISTING /tmp/ccJ3qHFz.s 			page 9


 277              	.LBB145:
 278              	.LBB133:
 279              	.LBB122:
 280              	.LBB110:
 281              	.LBB101:
 282              	.LBB92:
 283              	.LBB85:
 284              	.LBB61:
 285 00b4 13071002 		li	a4,33
 286 00b8 6382E71E 		beq	a5,a4,.L33
 287              	.LBE61:
 288              	.LBE85:
 289              	.LBE92:
 290              	.LBE101:
 291              	.LBE110:
 292              	.LBE122:
 293              	.LBE133:
 294              	.LBE145:
 295              	.LBE161:
 296              	.LBE173:
 297              	.LBE188:
  93:src/Riscv.cpp ****         sem_t* handle;
  94:src/Riscv.cpp ****         unsigned init;
  95:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
  96:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (init));
  97:src/Riscv.cpp **** 
  98:src/Riscv.cpp ****         *handle=SEM::open(init);
  99:src/Riscv.cpp ****         int ret=0;
 100:src/Riscv.cpp ****         if (*handle) {
 101:src/Riscv.cpp ****             ret=0;
 102:src/Riscv.cpp ****         }
 103:src/Riscv.cpp ****         else {
 104:src/Riscv.cpp ****             ret=1;
 105:src/Riscv.cpp ****         }
 106:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 107:src/Riscv.cpp ****     }
 108:src/Riscv.cpp ****     else if (syscode==SEM_CLOSE) {
 298              		.loc 1 108 10
 299              	.LBB189:
 300              	.LBB174:
 301              	.LBB162:
 302              	.LBB146:
 303              	.LBB134:
 304              	.LBB123:
 305              	.LBB111:
 306              	.LBB102:
 307              	.LBB93:
 308              	.LBB86:
 309              	.LBB81:
 310              	.LBB62:
 311 00bc 13072002 		li	a4,34
 312 00c0 6386E720 		beq	a5,a4,.L34
 313              	.LBE62:
 314              	.LBE81:
 315              	.LBE86:
 316              	.LBE93:
 317              	.LBE102:
GAS LISTING /tmp/ccJ3qHFz.s 			page 10


 318              	.LBE111:
 319              	.LBE123:
 320              	.LBE134:
 321              	.LBE146:
 322              	.LBE162:
 323              	.LBE174:
 324              	.LBE189:
 109:src/Riscv.cpp ****         sem_t handle;
 110:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 111:src/Riscv.cpp ****         int ret=handle->close();
 112:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 113:src/Riscv.cpp ****     }
 114:src/Riscv.cpp ****     else if (syscode==SEM_WAIT) {
 325              		.loc 1 114 10
 326              	.LBB190:
 327              	.LBB175:
 328              	.LBB163:
 329              	.LBB147:
 330              	.LBB135:
 331              	.LBB124:
 332              	.LBB112:
 333              	.LBB103:
 334              	.LBB94:
 335              	.LBB87:
 336              	.LBB82:
 337              	.LBB76:
 338              	.LBB63:
 339 00c4 13073002 		li	a4,35
 340 00c8 638CE720 		beq	a5,a4,.L35
 341              	.LBE63:
 342              	.LBE76:
 343              	.LBE82:
 344              	.LBE87:
 345              	.LBE94:
 346              	.LBE103:
 347              	.LBE112:
 348              	.LBE124:
 349              	.LBE135:
 350              	.LBE147:
 351              	.LBE163:
 352              	.LBE175:
 353              	.LBE190:
 115:src/Riscv.cpp ****         sem_t handle;
 116:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 117:src/Riscv.cpp ****         int ret=handle->wait();
 118:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 119:src/Riscv.cpp ****     }
 120:src/Riscv.cpp ****     else if (syscode==SEM_SIGNAL) {
 354              		.loc 1 120 10
 355              	.LBB191:
 356              	.LBB176:
 357              	.LBB164:
 358              	.LBB148:
 359              	.LBB136:
 360              	.LBB125:
 361              	.LBB113:
 362              	.LBB104:
GAS LISTING /tmp/ccJ3qHFz.s 			page 11


 363              	.LBB95:
 364              	.LBB88:
 365              	.LBB83:
 366              	.LBB77:
 367              	.LBB73:
 368              	.LBB64:
 369 00cc 13074002 		li	a4,36
 370 00d0 6382E722 		beq	a5,a4,.L36
 371              	.LBB65:
 121:src/Riscv.cpp ****         sem_t handle;
 122:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 123:src/Riscv.cpp ****         int ret=handle->signal();
 124:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 125:src/Riscv.cpp ****     }
 126:src/Riscv.cpp ****     else {
 127:src/Riscv.cpp ****         uint64 scause= get_scause();
 372              		.loc 1 127 9
 373              	.LBB66:
 374              	.LBB67:
  77:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %[scause], scause":[scause]"=r"(scause));
 375              		.loc 2 77 5
  78:src/../h/Riscv.hpp ****     return scause;
 376              		.loc 2 78 5
  78:src/../h/Riscv.hpp ****     return scause;
 377              		.loc 2 78 68 is_stmt 0
 378              	#APP
 379              	# 78 "src/../h/Riscv.hpp" 1
 380              		csrr a5, scause
 381              	# 0 "" 2
 382              	.LVL5:
 383              	#NO_APP
 384 00d8 233CF4FA 		sd	a5,-72(s0)
 385              		.loc 2 79 5 is_stmt 1
 386              		.loc 2 79 12 is_stmt 0
 387 00dc 033A84FB 		ld	s4,-72(s0)
 388              	.LVL6:
 389              	.LBE67:
 390              	.LBE66:
 128:src/Riscv.cpp ****         uint64 stval= get_stval();
 391              		.loc 1 128 9 is_stmt 1
 392              	.LBB68:
 393              	.LBB69:
  80:src/../h/Riscv.hpp **** }
  81:src/../h/Riscv.hpp **** inline uint64 Riscv::get_stval() {
  82:src/../h/Riscv.hpp ****     uint64 volatile stval;
 394              		.loc 2 82 5
  83:src/../h/Riscv.hpp ****     __asm__ volatile("csrr %[stval], stval":[stval]"=r"(stval));
 395              		.loc 2 83 5
 396              		.loc 2 83 64 is_stmt 0
 397              	#APP
 398              	# 83 "src/../h/Riscv.hpp" 1
  84              	    return stval;
 399              		csrr a5, stval
 400              	# 0 "" 2
 401              	#NO_APP
 402 00e4 2338F4FA 		sd	a5,-80(s0)
 403              		.loc 2 84 5 is_stmt 1
GAS LISTING /tmp/ccJ3qHFz.s 			page 12


 404              		.loc 2 84 12 is_stmt 0
 405 00e8 833904FB 		ld	s3,-80(s0)
 406              	.LVL7:
 407              	.LBE69:
 408              	.LBE68:
 129:src/Riscv.cpp ****         printString("scause:");
 409              		.loc 1 129 9 is_stmt 1
 410              		.loc 1 129 20 is_stmt 0
 411 00ec 17050000 		lla	a0,.LC0
 411      13050500 
 412 00f4 97000000 		call	_Z11printStringPKc@plt
 412      E7800000 
 413              	.LVL8:
 130:src/Riscv.cpp ****         printInteger(scause);
 414              		.loc 1 130 9 is_stmt 1
 415              		.loc 1 130 21 is_stmt 0
 416 00fc 13050A00 		mv	a0,s4
 417 0100 97000000 		call	_Z12printIntegerm@plt
 417      E7800000 
 418              	.LVL9:
 131:src/Riscv.cpp ****         printString("\n");
 419              		.loc 1 131 9 is_stmt 1
 420              		.loc 1 131 20 is_stmt 0
 421 0108 17050000 		lla	a0,.LC1
 421      13050500 
 422 0110 97000000 		call	_Z11printStringPKc@plt
 422      E7800000 
 423              	.LVL10:
 132:src/Riscv.cpp **** 
 133:src/Riscv.cpp ****         printString("stval:");
 424              		.loc 1 133 9 is_stmt 1
 425              		.loc 1 133 20 is_stmt 0
 426 0118 17050000 		lla	a0,.LC2
 426      13050500 
 427 0120 97000000 		call	_Z11printStringPKc@plt
 427      E7800000 
 428              	.LVL11:
 134:src/Riscv.cpp ****         printInteger(stval);
 429              		.loc 1 134 9 is_stmt 1
 430              		.loc 1 134 21 is_stmt 0
 431 0128 13850900 		mv	a0,s3
 432 012c 97000000 		call	_Z12printIntegerm@plt
 432      E7800000 
 433              	.LVL12:
 135:src/Riscv.cpp ****         printString("\n");
 434              		.loc 1 135 9 is_stmt 1
 435              		.loc 1 135 20 is_stmt 0
 436 0134 17050000 		lla	a0,.LC1
 436      13050500 
 437 013c 97000000 		call	_Z11printStringPKc@plt
 437      E7800000 
 438              	.LVL13:
 136:src/Riscv.cpp **** 
 137:src/Riscv.cpp ****         printString("sepc:");
 439              		.loc 1 137 9 is_stmt 1
 440              		.loc 1 137 20 is_stmt 0
 441 0144 17050000 		lla	a0,.LC3
GAS LISTING /tmp/ccJ3qHFz.s 			page 13


 441      13050500 
 442 014c 97000000 		call	_Z11printStringPKc@plt
 442      E7800000 
 443              	.LVL14:
 138:src/Riscv.cpp ****         printInteger(sepc);
 444              		.loc 1 138 9 is_stmt 1
 445              		.loc 1 138 21 is_stmt 0
 446 0154 13850400 		mv	a0,s1
 447 0158 97000000 		call	_Z12printIntegerm@plt
 447      E7800000 
 448              	.LVL15:
 139:src/Riscv.cpp ****         printString("\n");
 449              		.loc 1 139 9 is_stmt 1
 450              		.loc 1 139 20 is_stmt 0
 451 0160 17050000 		lla	a0,.LC1
 451      13050500 
 452 0168 97000000 		call	_Z11printStringPKc@plt
 452      E7800000 
 453              	.LVL16:
 140:src/Riscv.cpp ****         __getc();
 454              		.loc 1 140 9 is_stmt 1
 455              		.loc 1 140 15 is_stmt 0
 456 0170 97000000 		call	__getc@plt
 456      E7800000 
 457              	.LVL17:
 458 0178 6F008003 		j	.L8
 459              	.LVL18:
 460              	.L24:
 461              	.LBE65:
 462              	.LBE64:
 463              	.LBE73:
 464              	.LBE77:
 465              	.LBE83:
 466              	.LBE88:
 467              	.LBE95:
 468              	.LBE104:
 469              	.LBE113:
 470              	.LBE125:
 471              	.LBE136:
 472              	.LBE148:
 473              	.LBE164:
 474              	.LBE176:
  34:src/Riscv.cpp ****     }
 475              		.loc 1 34 9 is_stmt 1
 476              	.LBB177:
 477              	.LBB178:
  85:src/../h/Riscv.hpp **** }
  86:src/../h/Riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask) {
  87:src/../h/Riscv.hpp ****     __asm__ volatile("csrs sstatus,%[mask]"::[mask]"r"(mask));
  88:src/../h/Riscv.hpp **** }
  89:src/../h/Riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask) {
  90:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sstatus,%[mask]"::[mask]"r"(mask));
  91:src/../h/Riscv.hpp **** }
  92:src/../h/Riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
  93:src/../h/Riscv.hpp **** {
  94:src/../h/Riscv.hpp ****     __asm__ volatile("csrc sip, %[mask]":: [mask]"r"(mask));
 478              		.loc 2 94 5
GAS LISTING /tmp/ccJ3qHFz.s 			page 14


 479              		.loc 2 94 60 is_stmt 0
 480 017c 93072000 		li	a5,2
 481              	#APP
 482              	# 94 "src/../h/Riscv.hpp" 1
  95              	}
 483              		csrc sip, a5
 484              	# 0 "" 2
 485              		.loc 2 95 1
 486              	#NO_APP
 487 0184 6F008003 		j	.L3
 488              	.LVL19:
 489              	.L25:
 490              	.LBE178:
 491              	.LBE177:
 492              	.LBB179:
  38:src/Riscv.cpp ****     }
 493              		.loc 1 38 9 is_stmt 1
  38:src/Riscv.cpp ****     }
 494              		.loc 1 38 24 is_stmt 0
 495 0188 97000000 		call	console_handler@plt
 495      E7800000 
 496              	.LVL20:
 497 0190 6F00C002 		j	.L3
 498              	.LVL21:
 499              	.L26:
 500              	.LBB165:
 501              	.LBB149:
 502              	.LBB137:
  45:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (size_in_blocks));
 503              		.loc 1 45 9 is_stmt 1
  46:src/Riscv.cpp ****         void* ptr = MemoryAllocator::Instance()->mem_alloc(size_in_blocks * MEM_BLOCK_SIZE);
 504              		.loc 1 46 9
  46:src/Riscv.cpp ****         void* ptr = MemoryAllocator::Instance()->mem_alloc(size_in_blocks * MEM_BLOCK_SIZE);
 505              		.loc 1 46 69 is_stmt 0
 506              	#APP
 507              	# 46 "src/Riscv.cpp" 1
 508              		mv s3, a1
 509              	# 0 "" 2
 510              	.LVL22:
  47:src/Riscv.cpp ****         __asm__ volatile ("mv a0,%[x]" :: [x] "r" (ptr));
 511              		.loc 1 47 9 is_stmt 1
  47:src/Riscv.cpp ****         __asm__ volatile ("mv a0,%[x]" :: [x] "r" (ptr));
 512              		.loc 1 47 59 is_stmt 0
 513              	#NO_APP
 514 0198 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 514      E7800000 
 515              	.LVL23:
 516 01a0 93952900 		slli	a1,s3,2
 517 01a4 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 517      E7800000 
 518              	.LVL24:
  48:src/Riscv.cpp ****     }
 519              		.loc 1 48 9 is_stmt 1
  48:src/Riscv.cpp ****     }
 520              		.loc 1 48 57 is_stmt 0
 521              	#APP
 522              	# 48 "src/Riscv.cpp" 1
GAS LISTING /tmp/ccJ3qHFz.s 			page 15


 523              		mv a0,a0
 524              	# 0 "" 2
 525              	.LVL25:
 526              	#NO_APP
 527              	.L8:
 528              	.LBE137:
 529              	.LBE149:
 141:src/Riscv.cpp ****     }
 142:src/Riscv.cpp ****     set_sepc(sepc+4);
 530              		.loc 1 142 5 is_stmt 1
 531              		.loc 1 142 13 is_stmt 0
 532 01b0 93844400 		addi	s1,s1,4
 533              	.LVL26:
 534              	.LBB150:
 535              	.LBB151:
  57:src/../h/Riscv.hpp **** }
 536              		.loc 2 57 5 is_stmt 1
  57:src/../h/Riscv.hpp **** }
 537              		.loc 2 57 59 is_stmt 0
 538              	#APP
 539              	# 57 "src/../h/Riscv.hpp" 1
 540              		csrw sepc, s1
 541              	# 0 "" 2
 542              	.LVL27:
 543              	#NO_APP
 544              	.LBE151:
 545              	.LBE150:
 143:src/Riscv.cpp ****     set_sstatus(sstatus);
 546              		.loc 1 143 5 is_stmt 1
 547              	.LBB152:
 548              	.LBB153:
  67:src/../h/Riscv.hpp **** }
 549              		.loc 2 67 5
  67:src/../h/Riscv.hpp **** }
 550              		.loc 2 67 65 is_stmt 0
 551              	#APP
 552              	# 67 "src/../h/Riscv.hpp" 1
 553              		csrw sstatus, s2
 554              	# 0 "" 2
 555              	.LVL28:
 556              	#NO_APP
 557              	.L3:
 558              	.LBE153:
 559              	.LBE152:
 560              	.LBE165:
 561              	.LBE179:
 562              	.LBE191:
 144:src/Riscv.cpp ****     }
 145:src/Riscv.cpp **** 
 146:src/Riscv.cpp **** 
 147:src/Riscv.cpp **** }...
 563              		.loc 1 147 1
 564 01bc 83308105 		ld	ra,88(sp)
 565              		.cfi_remember_state
 566              		.cfi_restore 1
 567 01c0 03340105 		ld	s0,80(sp)
 568              		.cfi_restore 8
GAS LISTING /tmp/ccJ3qHFz.s 			page 16


 569              		.cfi_def_cfa 2, 96
 570 01c4 83348104 		ld	s1,72(sp)
 571              		.cfi_restore 9
 572 01c8 03390104 		ld	s2,64(sp)
 573              		.cfi_restore 18
 574              	.LVL29:
 575 01cc 83398103 		ld	s3,56(sp)
 576              		.cfi_restore 19
 577 01d0 033A0103 		ld	s4,48(sp)
 578              		.cfi_restore 20
 579 01d4 833A8102 		ld	s5,40(sp)
 580              		.cfi_restore 21
 581 01d8 13010106 		addi	sp,sp,96
 582              		.cfi_def_cfa_offset 0
 583 01dc 67800000 		jr	ra
 584              	.LVL30:
 585              	.L27:
 586              		.cfi_restore_state
 587              	.LBB192:
 588              	.LBB180:
 589              	.LBB166:
 590              	.LBB154:
 591              	.LBB138:
 592              	.LBB126:
  51:src/Riscv.cpp ****         void* ptr;
 593              		.loc 1 51 9 is_stmt 1
  52:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (ptr));
 594              		.loc 1 52 9
  52:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (ptr));
 595              		.loc 1 52 58 is_stmt 0
 596              	#APP
 597              	# 52 "src/Riscv.cpp" 1
 598              		mv s3, a1
 599              	# 0 "" 2
 600              	.LVL31:
  53:src/Riscv.cpp ****         MemoryAllocator::Instance()->mem_free(ptr);
 601              		.loc 1 53 9 is_stmt 1
  53:src/Riscv.cpp ****         MemoryAllocator::Instance()->mem_free(ptr);
 602              		.loc 1 53 46 is_stmt 0
 603              	#NO_APP
 604 01e4 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 604      E7800000 
 605              	.LVL32:
 606 01ec 93850900 		mv	a1,s3
 607 01f0 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 607      E7800000 
 608              	.LVL33:
  54:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (0));
 609              		.loc 1 54 9 is_stmt 1
  54:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (0));
 610              		.loc 1 54 56 is_stmt 0
 611 01f8 93070000 		li	a5,0
 612              	#APP
 613              	# 54 "src/Riscv.cpp" 1
 614              		mv a0, a5
 615              	# 0 "" 2
 616              	#NO_APP
GAS LISTING /tmp/ccJ3qHFz.s 			page 17


 617              	.LBE126:
 618 0200 6FF01FFB 		j	.L8
 619              	.LVL34:
 620              	.L28:
 621              	.LBB127:
 622              	.LBB114:
  57:src/Riscv.cpp ****         size_t freeMem = MemoryAllocator::Instance()->getFreeMemSize();
 623              		.loc 1 57 9 is_stmt 1
  57:src/Riscv.cpp ****         size_t freeMem = MemoryAllocator::Instance()->getFreeMemSize();
 624              		.loc 1 57 69 is_stmt 0
 625 0204 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 625      E7800000 
 626              	.LVL35:
 627              	.LBB115:
 628              	.LBB116:
 629              		.file 3 "src/../h/../h/MemoryAllocator.hpp"
   1:src/../h/../h/MemoryAllocator.hpp **** 
   2:src/../h/../h/MemoryAllocator.hpp **** #ifndef PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   3:src/../h/../h/MemoryAllocator.hpp **** #define PROJECT_BASE_V1_1_MEMORYALLOCATOR_HPP
   4:src/../h/../h/MemoryAllocator.hpp **** 
   5:src/../h/../h/MemoryAllocator.hpp **** #include "../lib/hw.h"
   6:src/../h/../h/MemoryAllocator.hpp **** 
   7:src/../h/../h/MemoryAllocator.hpp **** class MemoryAllocator {
   8:src/../h/../h/MemoryAllocator.hpp **** public:
   9:src/../h/../h/MemoryAllocator.hpp ****     static MemoryAllocator* Instance();
  10:src/../h/../h/MemoryAllocator.hpp **** 
  11:src/../h/../h/MemoryAllocator.hpp ****     void* mem_alloc(size_t size);//size in bytes
  12:src/../h/../h/MemoryAllocator.hpp **** 
  13:src/../h/../h/MemoryAllocator.hpp ****     void mem_free(void* ptr);
  14:src/../h/../h/MemoryAllocator.hpp **** 
  15:src/../h/../h/MemoryAllocator.hpp ****     size_t getFreeMemSize() {
  16:src/../h/../h/MemoryAllocator.hpp ****         return this->freeMemSize;
 630              		.loc 3 16 9 is_stmt 1
 631              		.loc 3 16 22 is_stmt 0
 632 020c 83378500 		ld	a5,8(a0)
 633              	.LVL36:
 634              	.LBE116:
 635              	.LBE115:
  58:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (freeMem));
 636              		.loc 1 58 9 is_stmt 1
  58:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (freeMem));
 637              		.loc 1 58 62 is_stmt 0
 638              	#APP
 639              	# 58 "src/Riscv.cpp" 1
 640              		mv a0, a5
 641              	# 0 "" 2
 642              	#NO_APP
 643              	.LBE114:
 644 0214 6FF0DFF9 		j	.L8
 645              	.LVL37:
 646              	.L29:
 647              	.LBB117:
 648              	.LBB105:
  61:src/Riscv.cpp ****         size_t largestBlock = MemoryAllocator::Instance()->getLargestFreeBlock();
 649              		.loc 1 61 9 is_stmt 1
  61:src/Riscv.cpp ****         size_t largestBlock = MemoryAllocator::Instance()->getLargestFreeBlock();
 650              		.loc 1 61 79 is_stmt 0
GAS LISTING /tmp/ccJ3qHFz.s 			page 18


 651 0218 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 651      E7800000 
 652              	.LVL38:
 653 0220 97000000 		call	_ZN15MemoryAllocator19getLargestFreeBlockEv@plt
 653      E7800000 
 654              	.LVL39:
  62:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (largestBlock));
 655              		.loc 1 62 9 is_stmt 1
  62:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (largestBlock));
 656              		.loc 1 62 67 is_stmt 0
 657              	#APP
 658              	# 62 "src/Riscv.cpp" 1
 659              		mv a0, a0
 660              	# 0 "" 2
 661              	#NO_APP
 662              	.LBE105:
 663 022c 6FF05FF8 		j	.L8
 664              	.LVL40:
 665              	.L30:
 666              	.LBB106:
 667              	.LBB96:
  65:src/Riscv.cpp ****         thread_t* handle;
 668              		.loc 1 65 9 is_stmt 1
  66:src/Riscv.cpp ****         Body start_routine;
 669              		.loc 1 66 9
  67:src/Riscv.cpp ****         void* arg;
 670              		.loc 1 67 9
  68:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 671              		.loc 1 68 9
  68:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 672              		.loc 1 68 61 is_stmt 0
 673              	#APP
 674              	# 68 "src/Riscv.cpp" 1
 675              		mv s3, a1
 676              	# 0 "" 2
 677              	.LVL41:
  69:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (start_routine));
 678              		.loc 1 69 9 is_stmt 1
  69:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (start_routine));
 679              		.loc 1 69 68 is_stmt 0
 680              	# 69 "src/Riscv.cpp" 1
 681              		mv s4, a2
 682              	# 0 "" 2
 683              	.LVL42:
  70:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a3" : [x] "=r" (arg));
 684              		.loc 1 70 9 is_stmt 1
  70:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a3" : [x] "=r" (arg));
 685              		.loc 1 70 58 is_stmt 0
 686              	# 70 "src/Riscv.cpp" 1
 687              		mv s5, a3
 688              	# 0 "" 2
 689              	.LVL43:
  72:src/Riscv.cpp ****         uint64 *sp=(uint64*)MemoryAllocator::Instance()->mem_alloc(DEFAULT_STACK_SIZE);
 690              		.loc 1 72 9 is_stmt 1
  72:src/Riscv.cpp ****         uint64 *sp=(uint64*)MemoryAllocator::Instance()->mem_alloc(DEFAULT_STACK_SIZE);
 691              		.loc 1 72 67 is_stmt 0
 692              	#NO_APP
GAS LISTING /tmp/ccJ3qHFz.s 			page 19


 693 023c 97000000 		call	_ZN15MemoryAllocator8InstanceEv@plt
 693      E7800000 
 694              	.LVL44:
 695 0244 B7150000 		li	a1,4096
 696 0248 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 696      E7800000 
 697              	.LVL45:
 698 0250 13060500 		mv	a2,a0
 699              	.LVL46:
  75:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
 700              		.loc 1 75 9 is_stmt 1
  75:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
 701              		.loc 1 75 34 is_stmt 0
 702 0254 93850A00 		mv	a1,s5
 703 0258 13050A00 		mv	a0,s4
 704              	.LVL47:
 705 025c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_Pm@plt
 705      E7800000 
 706              	.LVL48:
  75:src/Riscv.cpp ****         *handle=TCB::createThread( start_routine, arg,sp);
 707              		.loc 1 75 16
 708 0264 23B0A900 		sd	a0,0(s3)
  76:src/Riscv.cpp ****         int ret=0;
 709              		.loc 1 76 9 is_stmt 1
 710              	.LVL49:
  77:src/Riscv.cpp ****         if (*handle) {
 711              		.loc 1 77 9
 712 0268 63080500 		beqz	a0,.L21
  78:src/Riscv.cpp ****             ret=0;
 713              		.loc 1 78 16 is_stmt 0
 714 026c 93070000 		li	a5,0
 715              	.L13:
 716              	.LVL50:
  83:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 717              		.loc 1 83 9 is_stmt 1
  83:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 718              		.loc 1 83 58 is_stmt 0
 719              	#APP
 720              	# 83 "src/Riscv.cpp" 1
 721              		mv a0, a5
 722              	# 0 "" 2
 723              	#NO_APP
 724              	.LBE96:
 725 0274 6FF0DFF3 		j	.L8
 726              	.LVL51:
 727              	.L21:
 728              	.LBB97:
  81:src/Riscv.cpp ****             ret=1;
 729              		.loc 1 81 16
 730 0278 93071000 		li	a5,1
 731 027c 6FF05FFF 		j	.L13
 732              	.LVL52:
 733              	.L31:
 734              	.LBE97:
 735              	.LBB98:
 736              	.LBB89:
  86:src/Riscv.cpp ****         int ret = TCB::exit();
GAS LISTING /tmp/ccJ3qHFz.s 			page 20


 737              		.loc 1 86 9 is_stmt 1
  86:src/Riscv.cpp ****         int ret = TCB::exit();
 738              		.loc 1 86 28 is_stmt 0
 739 0280 97000000 		call	_ZN3TCB4exitEv@plt
 739      E7800000 
 740              	.LVL53:
  87:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 741              		.loc 1 87 9 is_stmt 1
  87:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 742              		.loc 1 87 58 is_stmt 0
 743              	#APP
 744              	# 87 "src/Riscv.cpp" 1
 745              		mv a0, a0
 746              	# 0 "" 2
 747              	#NO_APP
 748              	.LBE89:
 749 028c 6FF05FF2 		j	.L8
 750              	.LVL54:
 751              	.L32:
 752              	.LBB90:
  90:src/Riscv.cpp ****         TCB::dispatch();
 753              		.loc 1 90 9 is_stmt 1
  90:src/Riscv.cpp ****         TCB::dispatch();
 754              		.loc 1 90 22 is_stmt 0
 755 0290 97000000 		call	_ZN3TCB8dispatchEv@plt
 755      E7800000 
 756              	.LVL55:
 757 0298 6FF09FF1 		j	.L8
 758              	.LVL56:
 759              	.L33:
 760              	.LBB84:
 761              	.LBB78:
  93:src/Riscv.cpp ****         sem_t* handle;
 762              		.loc 1 93 9 is_stmt 1
  94:src/Riscv.cpp ****         unsigned init;
 763              		.loc 1 94 9
  95:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 764              		.loc 1 95 9
  95:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 765              		.loc 1 95 61 is_stmt 0
 766              	#APP
 767              	# 95 "src/Riscv.cpp" 1
 768              		mv s3, a1
 769              	# 0 "" 2
 770              	.LVL57:
  96:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (init));
 771              		.loc 1 96 9 is_stmt 1
  96:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a2" : [x] "=r" (init));
 772              		.loc 1 96 59 is_stmt 0
 773              	# 96 "src/Riscv.cpp" 1
 774              		mv a0, a2
 775              	# 0 "" 2
 776              	.LVL58:
  98:src/Riscv.cpp ****         *handle=SEM::open(init);
 777              		.loc 1 98 9 is_stmt 1
  98:src/Riscv.cpp ****         *handle=SEM::open(init);
 778              		.loc 1 98 26 is_stmt 0
GAS LISTING /tmp/ccJ3qHFz.s 			page 21


 779              	#NO_APP
 780 02a4 1B050500 		sext.w	a0,a0
 781 02a8 97000000 		call	_ZN3SEM4openEj@plt
 781      E7800000 
 782              	.LVL59:
  98:src/Riscv.cpp ****         *handle=SEM::open(init);
 783              		.loc 1 98 16
 784 02b0 23B0A900 		sd	a0,0(s3)
  99:src/Riscv.cpp ****         int ret=0;
 785              		.loc 1 99 9 is_stmt 1
 786              	.LVL60:
 100:src/Riscv.cpp ****         if (*handle) {
 787              		.loc 1 100 9
 788 02b4 63080500 		beqz	a0,.L22
 101:src/Riscv.cpp ****             ret=0;
 789              		.loc 1 101 16 is_stmt 0
 790 02b8 93070000 		li	a5,0
 791              	.L17:
 792              	.LVL61:
 106:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 793              		.loc 1 106 9 is_stmt 1
 106:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 794              		.loc 1 106 58 is_stmt 0
 795              	#APP
 796              	# 106 "src/Riscv.cpp" 1
 797              		mv a0, a5
 798              	# 0 "" 2
 799              	#NO_APP
 800              	.LBE78:
 801 02c0 6FF01FEF 		j	.L8
 802              	.LVL62:
 803              	.L22:
 804              	.LBB79:
 104:src/Riscv.cpp ****             ret=1;
 805              		.loc 1 104 16
 806 02c4 93071000 		li	a5,1
 807 02c8 6FF05FFF 		j	.L17
 808              	.LVL63:
 809              	.L34:
 810              	.LBE79:
 811              	.LBB80:
 812              	.LBB74:
 109:src/Riscv.cpp ****         sem_t handle;
 813              		.loc 1 109 9 is_stmt 1
 110:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 814              		.loc 1 110 9
 110:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 815              		.loc 1 110 61 is_stmt 0
 816              	#APP
 817              	# 110 "src/Riscv.cpp" 1
 818              		mv a0, a1
 819              	# 0 "" 2
 820              	.LVL64:
 111:src/Riscv.cpp ****         int ret=handle->close();
 821              		.loc 1 111 9 is_stmt 1
 111:src/Riscv.cpp ****         int ret=handle->close();
 822              		.loc 1 111 30 is_stmt 0
GAS LISTING /tmp/ccJ3qHFz.s 			page 22


 823              	#NO_APP
 824 02d0 97000000 		call	_ZN3SEM5closeEv@plt
 824      E7800000 
 825              	.LVL65:
 112:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 826              		.loc 1 112 9 is_stmt 1
 112:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 827              		.loc 1 112 58 is_stmt 0
 828              	#APP
 829              	# 112 "src/Riscv.cpp" 1
 830              		mv a0, a0
 831              	# 0 "" 2
 832              	#NO_APP
 833              	.LBE74:
 834 02dc 6FF05FED 		j	.L8
 835              	.LVL66:
 836              	.L35:
 837              	.LBB75:
 838              	.LBB71:
 115:src/Riscv.cpp ****         sem_t handle;
 839              		.loc 1 115 9 is_stmt 1
 116:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 840              		.loc 1 116 9
 116:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 841              		.loc 1 116 61 is_stmt 0
 842              	#APP
 843              	# 116 "src/Riscv.cpp" 1
 844              		mv a0, a1
 845              	# 0 "" 2
 846              	.LVL67:
 117:src/Riscv.cpp ****         int ret=handle->wait();
 847              		.loc 1 117 9 is_stmt 1
 117:src/Riscv.cpp ****         int ret=handle->wait();
 848              		.loc 1 117 29 is_stmt 0
 849              	#NO_APP
 850 02e4 97000000 		call	_ZN3SEM4waitEv@plt
 850      E7800000 
 851              	.LVL68:
 118:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 852              		.loc 1 118 9 is_stmt 1
 118:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 853              		.loc 1 118 58 is_stmt 0
 854              	#APP
 855              	# 118 "src/Riscv.cpp" 1
 856              		mv a0, a0
 857              	# 0 "" 2
 858              	#NO_APP
 859              	.LBE71:
 860 02f0 6FF01FEC 		j	.L8
 861              	.LVL69:
 862              	.L36:
 863              	.LBB72:
 864              	.LBB70:
 121:src/Riscv.cpp ****         sem_t handle;
 865              		.loc 1 121 9 is_stmt 1
 122:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 866              		.loc 1 122 9
GAS LISTING /tmp/ccJ3qHFz.s 			page 23


 122:src/Riscv.cpp ****         __asm__ volatile ("mv %[x], a1" : [x] "=r" (handle));
 867              		.loc 1 122 61 is_stmt 0
 868              	#APP
 869              	# 122 "src/Riscv.cpp" 1
 870              		mv a0, a1
 871              	# 0 "" 2
 872              	.LVL70:
 123:src/Riscv.cpp ****         int ret=handle->signal();
 873              		.loc 1 123 9 is_stmt 1
 123:src/Riscv.cpp ****         int ret=handle->signal();
 874              		.loc 1 123 31 is_stmt 0
 875              	#NO_APP
 876 02f8 97000000 		call	_ZN3SEM6signalEv@plt
 876      E7800000 
 877              	.LVL71:
 124:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 878              		.loc 1 124 9 is_stmt 1
 124:src/Riscv.cpp ****         __asm__ volatile ("mv a0, %[x]" :: [x] "r" (ret));
 879              		.loc 1 124 58 is_stmt 0
 880              	#APP
 881              	# 124 "src/Riscv.cpp" 1
 882              		mv a0, a0
 883              	# 0 "" 2
 884              	#NO_APP
 885              	.LBE70:
 886 0304 6FF0DFEA 		j	.L8
 887              	.LBE72:
 888              	.LBE75:
 889              	.LBE80:
 890              	.LBE84:
 891              	.LBE90:
 892              	.LBE98:
 893              	.LBE106:
 894              	.LBE117:
 895              	.LBE127:
 896              	.LBE138:
 897              	.LBE154:
 898              	.LBE166:
 899              	.LBE180:
 900              	.LBE192:
 901              		.cfi_endproc
 902              	.LFE30:
 904              	.Letext0:
 905              		.file 4 "src/../h/../lib/hw.h"
 906              		.file 5 "src/../h/TCB.hpp"
 907              		.file 6 "src/../h/../h/List.hpp"
 908              		.file 7 "src/../h/SEM.hpp"
 909              		.file 8 "src/../h/syscall_c.hpp"
 910              		.file 9 "src/../h/print.hpp"
 911              		.file 10 "src/../lib/console.h"
GAS LISTING /tmp/ccJ3qHFz.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccJ3qHFz.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccJ3qHFz.s:13     .text:0000000000000000 .L0 
     /tmp/ccJ3qHFz.s:14     .text:0000000000000000 .L0 
     /tmp/ccJ3qHFz.s:15     .text:0000000000000004 .L0 
     /tmp/ccJ3qHFz.s:17     .text:0000000000000008 .L0 
     /tmp/ccJ3qHFz.s:19     .text:000000000000000c .L0 
     /tmp/ccJ3qHFz.s:21     .text:000000000000000c .L0 
       src/Riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccJ3qHFz.s:27     .text:0000000000000010 .L0 
       src/Riscv.cpp:14     .text:0000000000000010 .L0 
     /tmp/ccJ3qHFz.s:33     .text:0000000000000014 .L0 
     /tmp/ccJ3qHFz.s:34     .text:0000000000000018 .L0 
     /tmp/ccJ3qHFz.s:35     .text:0000000000000018 .L0 
     /tmp/ccJ3qHFz.s:37     .text:000000000000001c .L0 
     /tmp/ccJ3qHFz.s:39     .text:0000000000000020 .L0 
     /tmp/ccJ3qHFz.s:59     .text:0000000000000020 _ZN5Riscv21SupervisorTrapHandlerEv
     /tmp/ccJ3qHFz.s:62     .text:0000000000000020 .L0 
     /tmp/ccJ3qHFz.s:63     .text:0000000000000020 .L0 
     /tmp/ccJ3qHFz.s:64     .text:0000000000000024 .L0 
     /tmp/ccJ3qHFz.s:72     .text:0000000000000040 .L0 
     /tmp/ccJ3qHFz.s:73     .text:0000000000000040 .L0 
     /tmp/ccJ3qHFz.s:74     .text:0000000000000040 .L0 
     /tmp/ccJ3qHFz.s:75     .text:0000000000000040 .L0 
     /tmp/ccJ3qHFz.s:76     .text:0000000000000040 .L0 
     /tmp/ccJ3qHFz.s:77     .text:0000000000000040 .L0 
     /tmp/ccJ3qHFz.s:78     .text:0000000000000040 .L0 
     /tmp/ccJ3qHFz.s:80     .text:0000000000000044 .L0 
     /tmp/ccJ3qHFz.s:82     .text:0000000000000044 .L0 
     /tmp/ccJ3qHFz.s:83     .text:0000000000000044 .L0 
     /tmp/ccJ3qHFz.s:87     .text:0000000000000044 .L0 
     /tmp/ccJ3qHFz.s:88     .text:0000000000000044 .L0 
     /tmp/ccJ3qHFz.s:89     .text:0000000000000044 .L0 
  src/../h/Riscv.hpp:78     .text:0000000000000044 .L0 
     /tmp/ccJ3qHFz.s:97     .text:000000000000004c .L0 
     /tmp/ccJ3qHFz.s:98     .text:000000000000004c .L0 
     /tmp/ccJ3qHFz.s:105    .text:0000000000000050 .L0 
     /tmp/ccJ3qHFz.s:106    .text:0000000000000050 .L0 
     /tmp/ccJ3qHFz.s:107    .text:0000000000000050 .L0 
  src/../h/Riscv.hpp:62     .text:0000000000000050 .L0 
     /tmp/ccJ3qHFz.s:117    .text:0000000000000054 .L0 
     /tmp/ccJ3qHFz.s:120    .text:0000000000000054 .L0 
     /tmp/ccJ3qHFz.s:121    .text:0000000000000054 .L0 
     /tmp/ccJ3qHFz.s:122    .text:0000000000000054 .L0 
  src/../h/Riscv.hpp:72     .text:0000000000000054 .L0 
     /tmp/ccJ3qHFz.s:132    .text:0000000000000058 .L0 
     /tmp/ccJ3qHFz.s:134    .text:0000000000000058 .L0 
     /tmp/ccJ3qHFz.s:142    .text:0000000000000068 .L0 
     /tmp/ccJ3qHFz.s:148    .text:0000000000000078 .L0 
     /tmp/ccJ3qHFz.s:149    .text:0000000000000078 .L0 
       src/Riscv.cpp:42     .text:0000000000000078 .L0 
     /tmp/ccJ3qHFz.s:158    .text:000000000000007c .L0 
     /tmp/ccJ3qHFz.s:171    .text:0000000000000084 .L0 
     /tmp/ccJ3qHFz.s:185    .text:000000000000008c .L0 
     /tmp/ccJ3qHFz.s:201    .text:0000000000000094 .L0 
     /tmp/ccJ3qHFz.s:219    .text:000000000000009c .L0 
GAS LISTING /tmp/ccJ3qHFz.s 			page 25


     /tmp/ccJ3qHFz.s:239    .text:00000000000000a4 .L0 
     /tmp/ccJ3qHFz.s:261    .text:00000000000000ac .L0 
     /tmp/ccJ3qHFz.s:285    .text:00000000000000b4 .L0 
     /tmp/ccJ3qHFz.s:311    .text:00000000000000bc .L0 
     /tmp/ccJ3qHFz.s:339    .text:00000000000000c4 .L0 
     /tmp/ccJ3qHFz.s:369    .text:00000000000000cc .L0 
     /tmp/ccJ3qHFz.s:375    .text:00000000000000d4 .L0 
     /tmp/ccJ3qHFz.s:376    .text:00000000000000d4 .L0 
     /tmp/ccJ3qHFz.s:377    .text:00000000000000d4 .L0 
  src/../h/Riscv.hpp:78     .text:00000000000000d4 .L0 
     /tmp/ccJ3qHFz.s:386    .text:00000000000000dc .L0 
     /tmp/ccJ3qHFz.s:387    .text:00000000000000dc .L0 
     /tmp/ccJ3qHFz.s:394    .text:00000000000000e0 .L0 
     /tmp/ccJ3qHFz.s:395    .text:00000000000000e0 .L0 
     /tmp/ccJ3qHFz.s:396    .text:00000000000000e0 .L0 
  src/../h/Riscv.hpp:83     .text:00000000000000e0 .L0 
     /tmp/ccJ3qHFz.s:404    .text:00000000000000e8 .L0 
     /tmp/ccJ3qHFz.s:405    .text:00000000000000e8 .L0 
     /tmp/ccJ3qHFz.s:410    .text:00000000000000ec .L0 
     /tmp/ccJ3qHFz.s:411    .text:00000000000000ec .L0 
     /tmp/ccJ3qHFz.s:415    .text:00000000000000fc .L0 
     /tmp/ccJ3qHFz.s:416    .text:00000000000000fc .L0 
     /tmp/ccJ3qHFz.s:420    .text:0000000000000108 .L0 
     /tmp/ccJ3qHFz.s:421    .text:0000000000000108 .L0 
     /tmp/ccJ3qHFz.s:425    .text:0000000000000118 .L0 
     /tmp/ccJ3qHFz.s:426    .text:0000000000000118 .L0 
     /tmp/ccJ3qHFz.s:430    .text:0000000000000128 .L0 
     /tmp/ccJ3qHFz.s:431    .text:0000000000000128 .L0 
     /tmp/ccJ3qHFz.s:435    .text:0000000000000134 .L0 
     /tmp/ccJ3qHFz.s:436    .text:0000000000000134 .L0 
     /tmp/ccJ3qHFz.s:440    .text:0000000000000144 .L0 
     /tmp/ccJ3qHFz.s:441    .text:0000000000000144 .L0 
     /tmp/ccJ3qHFz.s:445    .text:0000000000000154 .L0 
     /tmp/ccJ3qHFz.s:446    .text:0000000000000154 .L0 
     /tmp/ccJ3qHFz.s:450    .text:0000000000000160 .L0 
     /tmp/ccJ3qHFz.s:451    .text:0000000000000160 .L0 
     /tmp/ccJ3qHFz.s:455    .text:0000000000000170 .L0 
     /tmp/ccJ3qHFz.s:456    .text:0000000000000170 .L0 
     /tmp/ccJ3qHFz.s:478    .text:000000000000017c .L0 
     /tmp/ccJ3qHFz.s:479    .text:000000000000017c .L0 
     /tmp/ccJ3qHFz.s:480    .text:000000000000017c .L0 
     /tmp/ccJ3qHFz.s:487    .text:0000000000000184 .L0 
     /tmp/ccJ3qHFz.s:494    .text:0000000000000188 .L0 
     /tmp/ccJ3qHFz.s:495    .text:0000000000000188 .L0 
     /tmp/ccJ3qHFz.s:504    .text:0000000000000194 .L0 
     /tmp/ccJ3qHFz.s:505    .text:0000000000000194 .L0 
       src/Riscv.cpp:46     .text:0000000000000194 .L0 
     /tmp/ccJ3qHFz.s:512    .text:0000000000000198 .L0 
     /tmp/ccJ3qHFz.s:514    .text:0000000000000198 .L0 
     /tmp/ccJ3qHFz.s:520    .text:00000000000001ac .L0 
       src/Riscv.cpp:48     .text:00000000000001ac .L0 
     /tmp/ccJ3qHFz.s:531    .text:00000000000001b0 .L0 
     /tmp/ccJ3qHFz.s:532    .text:00000000000001b0 .L0 
     /tmp/ccJ3qHFz.s:537    .text:00000000000001b4 .L0 
  src/../h/Riscv.hpp:57     .text:00000000000001b4 .L0 
     /tmp/ccJ3qHFz.s:549    .text:00000000000001b8 .L0 
     /tmp/ccJ3qHFz.s:550    .text:00000000000001b8 .L0 
GAS LISTING /tmp/ccJ3qHFz.s 			page 26


  src/../h/Riscv.hpp:67     .text:00000000000001b8 .L0 
     /tmp/ccJ3qHFz.s:564    .text:00000000000001bc .L0 
     /tmp/ccJ3qHFz.s:565    .text:00000000000001c0 .L0 
     /tmp/ccJ3qHFz.s:566    .text:00000000000001c0 .L0 
     /tmp/ccJ3qHFz.s:568    .text:00000000000001c4 .L0 
     /tmp/ccJ3qHFz.s:569    .text:00000000000001c4 .L0 
     /tmp/ccJ3qHFz.s:571    .text:00000000000001c8 .L0 
     /tmp/ccJ3qHFz.s:573    .text:00000000000001cc .L0 
     /tmp/ccJ3qHFz.s:576    .text:00000000000001d0 .L0 
     /tmp/ccJ3qHFz.s:578    .text:00000000000001d4 .L0 
     /tmp/ccJ3qHFz.s:580    .text:00000000000001d8 .L0 
     /tmp/ccJ3qHFz.s:582    .text:00000000000001dc .L0 
     /tmp/ccJ3qHFz.s:586    .text:00000000000001e0 .L0 
     /tmp/ccJ3qHFz.s:594    .text:00000000000001e0 .L0 
     /tmp/ccJ3qHFz.s:595    .text:00000000000001e0 .L0 
       src/Riscv.cpp:52     .text:00000000000001e0 .L0 
     /tmp/ccJ3qHFz.s:602    .text:00000000000001e4 .L0 
     /tmp/ccJ3qHFz.s:604    .text:00000000000001e4 .L0 
     /tmp/ccJ3qHFz.s:610    .text:00000000000001f8 .L0 
     /tmp/ccJ3qHFz.s:611    .text:00000000000001f8 .L0 
     /tmp/ccJ3qHFz.s:624    .text:0000000000000204 .L0 
     /tmp/ccJ3qHFz.s:625    .text:0000000000000204 .L0 
     /tmp/ccJ3qHFz.s:631    .text:000000000000020c .L0 
     /tmp/ccJ3qHFz.s:632    .text:000000000000020c .L0 
     /tmp/ccJ3qHFz.s:637    .text:0000000000000210 .L0 
       src/Riscv.cpp:58     .text:0000000000000210 .L0 
     /tmp/ccJ3qHFz.s:650    .text:0000000000000218 .L0 
     /tmp/ccJ3qHFz.s:651    .text:0000000000000218 .L0 
     /tmp/ccJ3qHFz.s:656    .text:0000000000000228 .L0 
       src/Riscv.cpp:62     .text:0000000000000228 .L0 
     /tmp/ccJ3qHFz.s:669    .text:0000000000000230 .L0 
     /tmp/ccJ3qHFz.s:670    .text:0000000000000230 .L0 
     /tmp/ccJ3qHFz.s:671    .text:0000000000000230 .L0 
     /tmp/ccJ3qHFz.s:672    .text:0000000000000230 .L0 
       src/Riscv.cpp:68     .text:0000000000000230 .L0 
     /tmp/ccJ3qHFz.s:679    .text:0000000000000234 .L0 
       src/Riscv.cpp:69     .text:0000000000000234 .L0 
     /tmp/ccJ3qHFz.s:685    .text:0000000000000238 .L0 
       src/Riscv.cpp:70     .text:0000000000000238 .L0 
     /tmp/ccJ3qHFz.s:691    .text:000000000000023c .L0 
     /tmp/ccJ3qHFz.s:693    .text:000000000000023c .L0 
     /tmp/ccJ3qHFz.s:701    .text:0000000000000254 .L0 
     /tmp/ccJ3qHFz.s:702    .text:0000000000000254 .L0 
     /tmp/ccJ3qHFz.s:708    .text:0000000000000264 .L0 
     /tmp/ccJ3qHFz.s:711    .text:0000000000000268 .L0 
     /tmp/ccJ3qHFz.s:712    .text:0000000000000268 .L0 
     /tmp/ccJ3qHFz.s:714    .text:000000000000026c .L0 
     /tmp/ccJ3qHFz.s:718    .text:0000000000000270 .L0 
       src/Riscv.cpp:83     .text:0000000000000270 .L0 
     /tmp/ccJ3qHFz.s:730    .text:0000000000000278 .L0 
     /tmp/ccJ3qHFz.s:738    .text:0000000000000280 .L0 
     /tmp/ccJ3qHFz.s:739    .text:0000000000000280 .L0 
     /tmp/ccJ3qHFz.s:742    .text:0000000000000288 .L0 
       src/Riscv.cpp:87     .text:0000000000000288 .L0 
     /tmp/ccJ3qHFz.s:754    .text:0000000000000290 .L0 
     /tmp/ccJ3qHFz.s:755    .text:0000000000000290 .L0 
     /tmp/ccJ3qHFz.s:763    .text:000000000000029c .L0 
GAS LISTING /tmp/ccJ3qHFz.s 			page 27


     /tmp/ccJ3qHFz.s:764    .text:000000000000029c .L0 
     /tmp/ccJ3qHFz.s:765    .text:000000000000029c .L0 
       src/Riscv.cpp:95     .text:000000000000029c .L0 
     /tmp/ccJ3qHFz.s:772    .text:00000000000002a0 .L0 
       src/Riscv.cpp:96     .text:00000000000002a0 .L0 
     /tmp/ccJ3qHFz.s:778    .text:00000000000002a4 .L0 
     /tmp/ccJ3qHFz.s:780    .text:00000000000002a4 .L0 
     /tmp/ccJ3qHFz.s:784    .text:00000000000002b0 .L0 
     /tmp/ccJ3qHFz.s:787    .text:00000000000002b4 .L0 
     /tmp/ccJ3qHFz.s:788    .text:00000000000002b4 .L0 
     /tmp/ccJ3qHFz.s:790    .text:00000000000002b8 .L0 
     /tmp/ccJ3qHFz.s:794    .text:00000000000002bc .L0 
       src/Riscv.cpp:106    .text:00000000000002bc .L0 
     /tmp/ccJ3qHFz.s:806    .text:00000000000002c4 .L0 
     /tmp/ccJ3qHFz.s:814    .text:00000000000002cc .L0 
     /tmp/ccJ3qHFz.s:815    .text:00000000000002cc .L0 
       src/Riscv.cpp:110    .text:00000000000002cc .L0 
     /tmp/ccJ3qHFz.s:822    .text:00000000000002d0 .L0 
     /tmp/ccJ3qHFz.s:824    .text:00000000000002d0 .L0 
     /tmp/ccJ3qHFz.s:827    .text:00000000000002d8 .L0 
       src/Riscv.cpp:112    .text:00000000000002d8 .L0 
     /tmp/ccJ3qHFz.s:840    .text:00000000000002e0 .L0 
     /tmp/ccJ3qHFz.s:841    .text:00000000000002e0 .L0 
       src/Riscv.cpp:116    .text:00000000000002e0 .L0 
     /tmp/ccJ3qHFz.s:848    .text:00000000000002e4 .L0 
     /tmp/ccJ3qHFz.s:850    .text:00000000000002e4 .L0 
     /tmp/ccJ3qHFz.s:853    .text:00000000000002ec .L0 
       src/Riscv.cpp:118    .text:00000000000002ec .L0 
     /tmp/ccJ3qHFz.s:866    .text:00000000000002f4 .L0 
     /tmp/ccJ3qHFz.s:867    .text:00000000000002f4 .L0 
       src/Riscv.cpp:122    .text:00000000000002f4 .L0 
     /tmp/ccJ3qHFz.s:874    .text:00000000000002f8 .L0 
     /tmp/ccJ3qHFz.s:876    .text:00000000000002f8 .L0 
     /tmp/ccJ3qHFz.s:879    .text:0000000000000300 .L0 
       src/Riscv.cpp:124    .text:0000000000000300 .L0 
     /tmp/ccJ3qHFz.s:901    .text:0000000000000308 .L0 
     /tmp/ccJ3qHFz.s:912    .text:0000000000000308 .L0 
     /tmp/ccJ3qHFz.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccJ3qHFz.s:411    .text:00000000000000ec .L0 
     /tmp/ccJ3qHFz.s:47     .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccJ3qHFz.s:421    .text:0000000000000108 .L0 
     /tmp/ccJ3qHFz.s:50     .rodata.str1.8:0000000000000010 .LC2
     /tmp/ccJ3qHFz.s:426    .text:0000000000000118 .L0 
     /tmp/ccJ3qHFz.s:436    .text:0000000000000134 .L0 
     /tmp/ccJ3qHFz.s:53     .rodata.str1.8:0000000000000018 .LC3
     /tmp/ccJ3qHFz.s:441    .text:0000000000000144 .L0 
     /tmp/ccJ3qHFz.s:451    .text:0000000000000160 .L0 
     /tmp/ccJ3qHFz.s:460    .text:000000000000017c .L24
     /tmp/ccJ3qHFz.s:489    .text:0000000000000188 .L25
     /tmp/ccJ3qHFz.s:499    .text:0000000000000194 .L26
     /tmp/ccJ3qHFz.s:585    .text:00000000000001e0 .L27
     /tmp/ccJ3qHFz.s:620    .text:0000000000000204 .L28
     /tmp/ccJ3qHFz.s:646    .text:0000000000000218 .L29
     /tmp/ccJ3qHFz.s:665    .text:0000000000000230 .L30
     /tmp/ccJ3qHFz.s:733    .text:0000000000000280 .L31
     /tmp/ccJ3qHFz.s:751    .text:0000000000000290 .L32
     /tmp/ccJ3qHFz.s:759    .text:000000000000029c .L33
GAS LISTING /tmp/ccJ3qHFz.s 			page 28


     /tmp/ccJ3qHFz.s:809    .text:00000000000002cc .L34
     /tmp/ccJ3qHFz.s:836    .text:00000000000002e0 .L35
     /tmp/ccJ3qHFz.s:862    .text:00000000000002f4 .L36
     /tmp/ccJ3qHFz.s:527    .text:00000000000001b0 .L8
     /tmp/ccJ3qHFz.s:557    .text:00000000000001bc .L3
     /tmp/ccJ3qHFz.s:727    .text:0000000000000278 .L21
     /tmp/ccJ3qHFz.s:715    .text:0000000000000270 .L13
     /tmp/ccJ3qHFz.s:803    .text:00000000000002c4 .L22
     /tmp/ccJ3qHFz.s:791    .text:00000000000002bc .L17
     /tmp/ccJ3qHFz.s:2548   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccJ3qHFz.s:4033   .debug_str:000000000000077b .LASF150
     /tmp/ccJ3qHFz.s:3921   .debug_str:0000000000000456 .LASF151
     /tmp/ccJ3qHFz.s:3927   .debug_str:0000000000000492 .LASF152
     /tmp/ccJ3qHFz.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccJ3qHFz.s:904    .text:0000000000000308 .Letext0
     /tmp/ccJ3qHFz.s:3759   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccJ3qHFz.s:3935   .debug_str:00000000000004ee .LASF0
     /tmp/ccJ3qHFz.s:3957   .debug_str:0000000000000555 .LASF1
     /tmp/ccJ3qHFz.s:3925   .debug_str:0000000000000484 .LASF2
     /tmp/ccJ3qHFz.s:3881   .debug_str:0000000000000349 .LASF4
     /tmp/ccJ3qHFz.s:4005   .debug_str:00000000000006ca .LASF3
     /tmp/ccJ3qHFz.s:3787   .debug_str:0000000000000098 .LASF5
     /tmp/ccJ3qHFz.s:3963   .debug_str:000000000000058a .LASF6
     /tmp/ccJ3qHFz.s:3933   .debug_str:00000000000004db .LASF7
     /tmp/ccJ3qHFz.s:4049   .debug_str:00000000000008b3 .LASF8
     /tmp/ccJ3qHFz.s:3869   .debug_str:00000000000002fa .LASF9
     /tmp/ccJ3qHFz.s:3977   .debug_str:00000000000005ed .LASF10
     /tmp/ccJ3qHFz.s:4035   .debug_str:000000000000083f .LASF11
     /tmp/ccJ3qHFz.s:3791   .debug_str:00000000000000a7 .LASF12
     /tmp/ccJ3qHFz.s:3767   .debug_str:0000000000000021 .LASF13
     /tmp/ccJ3qHFz.s:3799   .debug_str:00000000000000d4 .LASF14
     /tmp/ccJ3qHFz.s:3999   .debug_str:000000000000068d .LASF15
     /tmp/ccJ3qHFz.s:3815   .debug_str:000000000000012a .LASF16
     /tmp/ccJ3qHFz.s:3953   .debug_str:0000000000000544 .LASF50
     /tmp/ccJ3qHFz.s:3901   .debug_str:00000000000003be .LASF153
     /tmp/ccJ3qHFz.s:4017   .debug_str:0000000000000722 .LASF17
     /tmp/ccJ3qHFz.s:3951   .debug_str:000000000000053b .LASF18
     /tmp/ccJ3qHFz.s:3891   .debug_str:0000000000000388 .LASF19
     /tmp/ccJ3qHFz.s:4037   .debug_str:000000000000084e .LASF20
     /tmp/ccJ3qHFz.s:3931   .debug_str:00000000000004c5 .LASF22
     /tmp/ccJ3qHFz.s:4059   .debug_str:000000000000090a .LASF21
     /tmp/ccJ3qHFz.s:4007   .debug_str:00000000000006dc .LASF23
     /tmp/ccJ3qHFz.s:4021   .debug_str:0000000000000743 .LASF26
     /tmp/ccJ3qHFz.s:3919   .debug_str:0000000000000441 .LASF28
     /tmp/ccJ3qHFz.s:3959   .debug_str:0000000000000568 .LASF24
     /tmp/ccJ3qHFz.s:3879   .debug_str:0000000000000330 .LASF25
     /tmp/ccJ3qHFz.s:4011   .debug_str:0000000000000704 .LASF27
     /tmp/ccJ3qHFz.s:3991   .debug_str:000000000000064f .LASF29
     /tmp/ccJ3qHFz.s:4013   .debug_str:0000000000000710 .LASF30
     /tmp/ccJ3qHFz.s:4047   .debug_str:000000000000089b .LASF31
     /tmp/ccJ3qHFz.s:3877   .debug_str:0000000000000326 .LASF32
     /tmp/ccJ3qHFz.s:3971   .debug_str:00000000000005c2 .LASF33
     /tmp/ccJ3qHFz.s:4075   .debug_str:00000000000009ab .LASF34
     /tmp/ccJ3qHFz.s:4003   .debug_str:00000000000006b2 .LASF35
     /tmp/ccJ3qHFz.s:3955   .debug_str:000000000000054a .LASF36
     /tmp/ccJ3qHFz.s:4019   .debug_str:000000000000072b .LASF37
     /tmp/ccJ3qHFz.s:3781   .debug_str:0000000000000083 .LASF38
GAS LISTING /tmp/ccJ3qHFz.s 			page 29


     /tmp/ccJ3qHFz.s:4009   .debug_str:00000000000006f1 .LASF39
     /tmp/ccJ3qHFz.s:3969   .debug_str:00000000000005bb .LASF40
     /tmp/ccJ3qHFz.s:3817   .debug_str:0000000000000140 .LASF41
     /tmp/ccJ3qHFz.s:4061   .debug_str:0000000000000913 .LASF42
     /tmp/ccJ3qHFz.s:3979   .debug_str:00000000000005fc .LASF44
     /tmp/ccJ3qHFz.s:3895   .debug_str:0000000000000397 .LASF43
     /tmp/ccJ3qHFz.s:3851   .debug_str:0000000000000247 .LASF45
     /tmp/ccJ3qHFz.s:3997   .debug_str:0000000000000682 .LASF46
     /tmp/ccJ3qHFz.s:4067   .debug_str:0000000000000949 .LASF47
     /tmp/ccJ3qHFz.s:3961   .debug_str:0000000000000574 .LASF48
     /tmp/ccJ3qHFz.s:3863   .debug_str:00000000000002b0 .LASF49
     /tmp/ccJ3qHFz.s:3773   .debug_str:0000000000000042 .LASF86
     /tmp/ccJ3qHFz.s:4057   .debug_str:00000000000008fd .LASF53
     /tmp/ccJ3qHFz.s:4023   .debug_str:000000000000074c .LASF55
     /tmp/ccJ3qHFz.s:3835   .debug_str:00000000000001e8 .LASF51
     /tmp/ccJ3qHFz.s:3993   .debug_str:0000000000000668 .LASF52
     /tmp/ccJ3qHFz.s:3875   .debug_str:0000000000000321 .LASF54
     /tmp/ccJ3qHFz.s:3985   .debug_str:0000000000000631 .LASF56
     /tmp/ccJ3qHFz.s:3899   .debug_str:00000000000003b1 .LASF57
     /tmp/ccJ3qHFz.s:4065   .debug_str:0000000000000927 .LASF58
     /tmp/ccJ3qHFz.s:3989   .debug_str:000000000000064a .LASF104
     /tmp/ccJ3qHFz.s:3937   .debug_str:00000000000004fb .LASF59
     /tmp/ccJ3qHFz.s:3847   .debug_str:000000000000022f .LASF60
     /tmp/ccJ3qHFz.s:3909   .debug_str:0000000000000419 .LASF61
     /tmp/ccJ3qHFz.s:3795   .debug_str:00000000000000bc .LASF62
     /tmp/ccJ3qHFz.s:3965   .debug_str:000000000000059d .LASF67
     /tmp/ccJ3qHFz.s:3867   .debug_str:00000000000002e3 .LASF69
     /tmp/ccJ3qHFz.s:3893   .debug_str:0000000000000391 .LASF63
     /tmp/ccJ3qHFz.s:3865   .debug_str:00000000000002d3 .LASF64
     /tmp/ccJ3qHFz.s:3789   .debug_str:000000000000009f .LASF65
     /tmp/ccJ3qHFz.s:3871   .debug_str:0000000000000308 .LASF66
     /tmp/ccJ3qHFz.s:3771   .debug_str:0000000000000038 .LASF68
     /tmp/ccJ3qHFz.s:3903   .debug_str:00000000000003c9 .LASF70
     /tmp/ccJ3qHFz.s:3841   .debug_str:000000000000020a .LASF154
     /tmp/ccJ3qHFz.s:4069   .debug_str:0000000000000961 .LASF115
     /tmp/ccJ3qHFz.s:3887   .debug_str:000000000000037a .LASF71
     /tmp/ccJ3qHFz.s:3941   .debug_str:0000000000000513 .LASF72
     /tmp/ccJ3qHFz.s:3763   .debug_str:000000000000000a .LASF73
     /tmp/ccJ3qHFz.s:3945   .debug_str:0000000000000522 .LASF74
     /tmp/ccJ3qHFz.s:3889   .debug_str:0000000000000383 .LASF75
     /tmp/ccJ3qHFz.s:3981   .debug_str:0000000000000618 .LASF155
     /tmp/ccJ3qHFz.s:4045   .debug_str:0000000000000885 .LASF156
     /tmp/ccJ3qHFz.s:3855   .debug_str:0000000000000280 .LASF76
     /tmp/ccJ3qHFz.s:3911   .debug_str:000000000000041e .LASF157
     /tmp/ccJ3qHFz.s:3823   .debug_str:0000000000000163 .LASF77
     /tmp/ccJ3qHFz.s:3917   .debug_str:000000000000043c .LASF78
     /tmp/ccJ3qHFz.s:3973   .debug_str:00000000000005d8 .LASF79
     /tmp/ccJ3qHFz.s:3967   .debug_str:00000000000005a8 .LASF80
     /tmp/ccJ3qHFz.s:4031   .debug_str:0000000000000772 .LASF81
     /tmp/ccJ3qHFz.s:3833   .debug_str:00000000000001cb .LASF82
     /tmp/ccJ3qHFz.s:3819   .debug_str:0000000000000153 .LASF83
     /tmp/ccJ3qHFz.s:3779   .debug_str:0000000000000066 .LASF84
     /tmp/ccJ3qHFz.s:3907   .debug_str:0000000000000414 .LASF88
     /tmp/ccJ3qHFz.s:3975   .debug_str:00000000000005dd .LASF85
     /tmp/ccJ3qHFz.s:3805   .debug_str:00000000000000f5 .LASF87
     /tmp/ccJ3qHFz.s:4077   .debug_str:00000000000009b6 .LASF89
     /tmp/ccJ3qHFz.s:4063   .debug_str:0000000000000922 .LASF90
GAS LISTING /tmp/ccJ3qHFz.s 			page 30


     /tmp/ccJ3qHFz.s:3943   .debug_str:0000000000000519 .LASF91
     /tmp/ccJ3qHFz.s:3923   .debug_str:0000000000000464 .LASF92
     /tmp/ccJ3qHFz.s:4051   .debug_str:00000000000008c3 .LASF93
     /tmp/ccJ3qHFz.s:4055   .debug_str:00000000000008dc .LASF94
     /tmp/ccJ3qHFz.s:3885   .debug_str:0000000000000371 .LASF95
     /tmp/ccJ3qHFz.s:3883   .debug_str:0000000000000350 .LASF96
     /tmp/ccJ3qHFz.s:3765   .debug_str:0000000000000012 .LASF97
     /tmp/ccJ3qHFz.s:3827   .debug_str:000000000000017b .LASF98
     /tmp/ccJ3qHFz.s:3845   .debug_str:000000000000021b .LASF99
     /tmp/ccJ3qHFz.s:4071   .debug_str:0000000000000977 .LASF100
     /tmp/ccJ3qHFz.s:3831   .debug_str:00000000000001b2 .LASF101
     /tmp/ccJ3qHFz.s:4027   .debug_str:000000000000075e .LASF102
     /tmp/ccJ3qHFz.s:3905   .debug_str:00000000000003de .LASF103
     /tmp/ccJ3qHFz.s:3777   .debug_str:000000000000005a .LASF105
     /tmp/ccJ3qHFz.s:3849   .debug_str:0000000000000242 .LASF106
     /tmp/ccJ3qHFz.s:3793   .debug_str:00000000000000b7 .LASF107
     /tmp/ccJ3qHFz.s:4053   .debug_str:00000000000008cd .LASF108
     /tmp/ccJ3qHFz.s:3809   .debug_str:000000000000010d .LASF109
     /tmp/ccJ3qHFz.s:3861   .debug_str:000000000000029f .LASF110
     /tmp/ccJ3qHFz.s:3783   .debug_str:000000000000008a .LASF111
     /tmp/ccJ3qHFz.s:3939   .debug_str:0000000000000504 .LASF112
     /tmp/ccJ3qHFz.s:4025   .debug_str:0000000000000758 .LASF113
     /tmp/ccJ3qHFz.s:3775   .debug_str:000000000000004a .LASF114
     /tmp/ccJ3qHFz.s:3811   .debug_str:0000000000000114 .LASF116
     /tmp/ccJ3qHFz.s:4015   .debug_str:000000000000071b .LASF117
     /tmp/ccJ3qHFz.s:3995   .debug_str:0000000000000675 .LASF118
     /tmp/ccJ3qHFz.s:3987   .debug_str:000000000000063d .LASF158
     /tmp/ccJ3qHFz.s:3813   .debug_str:0000000000000120 .LASF119
     /tmp/ccJ3qHFz.s:3897   .debug_str:00000000000003a8 .LASF120
     /tmp/ccJ3qHFz.s:3913   .debug_str:0000000000000423 .LASF121
     /tmp/ccJ3qHFz.s:3853   .debug_str:0000000000000265 .LASF122
     /tmp/ccJ3qHFz.s:4041   .debug_str:0000000000000865 .LASF123
     /tmp/ccJ3qHFz.s:3837   .debug_str:00000000000001f8 .LASF124
     /tmp/ccJ3qHFz.s:3803   .debug_str:00000000000000e5 .LASF125
     /tmp/ccJ3qHFz.s:3797   .debug_str:00000000000000cb .LASF126
     /tmp/ccJ3qHFz.s:3761   .debug_str:0000000000000000 .LASF127
     /tmp/ccJ3qHFz.s:3843   .debug_str:0000000000000212 .LASF128
     /tmp/ccJ3qHFz.s:3807   .debug_str:0000000000000102 .LASF129
     /tmp/ccJ3qHFz.s:3785   .debug_str:000000000000008f .LASF130
     /tmp/ccJ3qHFz.s:3839   .debug_str:0000000000000204 .LASF131
     /tmp/ccJ3qHFz.s:60     .text:0000000000000020 .LFB30
     /tmp/ccJ3qHFz.s:902    .text:0000000000000308 .LFE30
     /tmp/ccJ3qHFz.s:3947   .debug_str:000000000000052a .LASF132
     /tmp/ccJ3qHFz.s:3414   .debug_loc:0000000000000000 .LLST0
     /tmp/ccJ3qHFz.s:4073   .debug_str:00000000000009a3 .LASF133
     /tmp/ccJ3qHFz.s:3431   .debug_loc:000000000000004b .LLST1
     /tmp/ccJ3qHFz.s:3769   .debug_str:0000000000000031 .LASF134
     /tmp/ccJ3qHFz.s:3442   .debug_loc:0000000000000081 .LLST2
     /tmp/ccJ3qHFz.s:3717   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccJ3qHFz.s:4029   .debug_str:000000000000076a .LASF135
     /tmp/ccJ3qHFz.s:3453   .debug_loc:00000000000000b7 .LLST3
     /tmp/ccJ3qHFz.s:502    .text:0000000000000194 .LBB137
     /tmp/ccJ3qHFz.s:528    .text:00000000000001b0 .LBE137
     /tmp/ccJ3qHFz.s:4001   .debug_str:00000000000006a3 .LASF136
     /tmp/ccJ3qHFz.s:3504   .debug_loc:00000000000001ab .LLST24
     /tmp/ccJ3qHFz.s:3511   .debug_loc:00000000000001ce .LLST25
     /tmp/ccJ3qHFz.s:515    .text:00000000000001a0 .LVL23
GAS LISTING /tmp/ccJ3qHFz.s 			page 31


     /tmp/ccJ3qHFz.s:518    .text:00000000000001ac .LVL24
     /tmp/ccJ3qHFz.s:592    .text:00000000000001e0 .LBB126
     /tmp/ccJ3qHFz.s:617    .text:0000000000000200 .LBE126
     /tmp/ccJ3qHFz.s:3518   .debug_loc:00000000000001f1 .LLST23
     /tmp/ccJ3qHFz.s:605    .text:00000000000001ec .LVL32
     /tmp/ccJ3qHFz.s:608    .text:00000000000001f8 .LVL33
     /tmp/ccJ3qHFz.s:622    .text:0000000000000204 .LBB114
     /tmp/ccJ3qHFz.s:643    .text:0000000000000214 .LBE114
     /tmp/ccJ3qHFz.s:3857   .debug_str:000000000000028a .LASF137
     /tmp/ccJ3qHFz.s:3525   .debug_loc:0000000000000214 .LLST21
     /tmp/ccJ3qHFz.s:627    .text:000000000000020c .LBB115
     /tmp/ccJ3qHFz.s:635    .text:0000000000000210 .LBE115
     /tmp/ccJ3qHFz.s:3532   .debug_loc:0000000000000237 .LLST22
     /tmp/ccJ3qHFz.s:626    .text:000000000000020c .LVL35
     /tmp/ccJ3qHFz.s:648    .text:0000000000000218 .LBB105
     /tmp/ccJ3qHFz.s:662    .text:000000000000022c .LBE105
     /tmp/ccJ3qHFz.s:4039   .debug_str:0000000000000858 .LASF138
     /tmp/ccJ3qHFz.s:3539   .debug_loc:000000000000025a .LLST20
     /tmp/ccJ3qHFz.s:652    .text:0000000000000220 .LVL38
     /tmp/ccJ3qHFz.s:654    .text:0000000000000228 .LVL39
     /tmp/ccJ3qHFz.s:3929   .debug_str:00000000000004be .LASF139
     /tmp/ccJ3qHFz.s:3546   .debug_loc:000000000000027d .LLST15
     /tmp/ccJ3qHFz.s:3983   .debug_str:0000000000000623 .LASF140
     /tmp/ccJ3qHFz.s:3553   .debug_loc:00000000000002a0 .LLST16
     /tmp/ccJ3qHFz.s:3560   .debug_loc:00000000000002c3 .LLST17
     /tmp/ccJ3qHFz.s:3567   .debug_loc:00000000000002e6 .LLST18
     /tmp/ccJ3qHFz.s:3578   .debug_loc:000000000000031c .LLST19
     /tmp/ccJ3qHFz.s:694    .text:0000000000000244 .LVL44
     /tmp/ccJ3qHFz.s:697    .text:0000000000000250 .LVL45
     /tmp/ccJ3qHFz.s:706    .text:0000000000000264 .LVL48
     /tmp/ccJ3qHFz.s:736    .text:0000000000000280 .LBB89
     /tmp/ccJ3qHFz.s:748    .text:000000000000028c .LBE89
     /tmp/ccJ3qHFz.s:3595   .debug_loc:0000000000000367 .LLST14
     /tmp/ccJ3qHFz.s:740    .text:0000000000000288 .LVL53
     /tmp/ccJ3qHFz.s:3602   .debug_loc:000000000000038a .LLST11
     /tmp/ccJ3qHFz.s:4079   .debug_str:00000000000009bb .LASF141
     /tmp/ccJ3qHFz.s:3609   .debug_loc:00000000000003ad .LLST12
     /tmp/ccJ3qHFz.s:3616   .debug_loc:00000000000003d0 .LLST13
     /tmp/ccJ3qHFz.s:782    .text:00000000000002b0 .LVL59
     /tmp/ccJ3qHFz.s:812    .text:00000000000002cc .LBB74
     /tmp/ccJ3qHFz.s:833    .text:00000000000002dc .LBE74
     /tmp/ccJ3qHFz.s:3633   .debug_loc:000000000000041b .LLST9
     /tmp/ccJ3qHFz.s:3640   .debug_loc:000000000000043e .LLST10
     /tmp/ccJ3qHFz.s:825    .text:00000000000002d8 .LVL65
     /tmp/ccJ3qHFz.s:838    .text:00000000000002e0 .LBB71
     /tmp/ccJ3qHFz.s:859    .text:00000000000002f0 .LBE71
     /tmp/ccJ3qHFz.s:3647   .debug_loc:0000000000000461 .LLST7
     /tmp/ccJ3qHFz.s:3654   .debug_loc:0000000000000484 .LLST8
     /tmp/ccJ3qHFz.s:851    .text:00000000000002ec .LVL68
     /tmp/ccJ3qHFz.s:864    .text:00000000000002f4 .LBB70
     /tmp/ccJ3qHFz.s:885    .text:0000000000000304 .LBE70
     /tmp/ccJ3qHFz.s:3661   .debug_loc:00000000000004a7 .LLST6
     /tmp/ccJ3qHFz.s:877    .text:0000000000000300 .LVL71
     /tmp/ccJ3qHFz.s:371    .text:00000000000000d4 .LBB65
     /tmp/ccJ3qHFz.s:461    .text:000000000000017c .LBE65
     /tmp/ccJ3qHFz.s:3668   .debug_loc:00000000000004ca .LLST4
     /tmp/ccJ3qHFz.s:3915   .debug_str:0000000000000436 .LASF142
GAS LISTING /tmp/ccJ3qHFz.s 			page 32


     /tmp/ccJ3qHFz.s:3675   .debug_loc:00000000000004ed .LLST5
     /tmp/ccJ3qHFz.s:373    .text:00000000000000d4 .LBB66
     /tmp/ccJ3qHFz.s:390    .text:00000000000000e0 .LBE66
     /tmp/ccJ3qHFz.s:392    .text:00000000000000e0 .LBB68
     /tmp/ccJ3qHFz.s:408    .text:00000000000000ec .LBE68
     /tmp/ccJ3qHFz.s:413    .text:00000000000000fc .LVL8
     /tmp/ccJ3qHFz.s:418    .text:0000000000000108 .LVL9
     /tmp/ccJ3qHFz.s:423    .text:0000000000000118 .LVL10
     /tmp/ccJ3qHFz.s:428    .text:0000000000000128 .LVL11
     /tmp/ccJ3qHFz.s:433    .text:0000000000000134 .LVL12
     /tmp/ccJ3qHFz.s:438    .text:0000000000000144 .LVL13
     /tmp/ccJ3qHFz.s:443    .text:0000000000000154 .LVL14
     /tmp/ccJ3qHFz.s:448    .text:0000000000000160 .LVL15
     /tmp/ccJ3qHFz.s:453    .text:0000000000000170 .LVL16
     /tmp/ccJ3qHFz.s:457    .text:0000000000000178 .LVL17
     /tmp/ccJ3qHFz.s:534    .text:00000000000001b4 .LBB150
     /tmp/ccJ3qHFz.s:545    .text:00000000000001b8 .LBE150
     /tmp/ccJ3qHFz.s:3682   .debug_loc:0000000000000510 .LLST26
     /tmp/ccJ3qHFz.s:547    .text:00000000000001b8 .LBB152
     /tmp/ccJ3qHFz.s:559    .text:00000000000001bc .LBE152
     /tmp/ccJ3qHFz.s:3689   .debug_loc:0000000000000533 .LLST27
     /tmp/ccJ3qHFz.s:756    .text:0000000000000298 .LVL55
     /tmp/ccJ3qHFz.s:84     .text:0000000000000044 .LBB45
     /tmp/ccJ3qHFz.s:101    .text:0000000000000050 .LBE45
     /tmp/ccJ3qHFz.s:103    .text:0000000000000050 .LBB47
     /tmp/ccJ3qHFz.s:116    .text:0000000000000054 .LBE47
     /tmp/ccJ3qHFz.s:118    .text:0000000000000054 .LBB49
     /tmp/ccJ3qHFz.s:131    .text:0000000000000058 .LBE49
     /tmp/ccJ3qHFz.s:476    .text:000000000000017c .LBB177
     /tmp/ccJ3qHFz.s:491    .text:0000000000000188 .LBE177
     /tmp/ccJ3qHFz.s:3696   .debug_loc:0000000000000556 .LLST28
     /tmp/ccJ3qHFz.s:496    .text:0000000000000190 .LVL20
     /tmp/ccJ3qHFz.s:10     .text:0000000000000000 .LFB29
     /tmp/ccJ3qHFz.s:40     .text:0000000000000020 .LFE29
     /tmp/ccJ3qHFz.s:3821   .debug_str:000000000000015e .LASF159
     /tmp/ccJ3qHFz.s:3801   .debug_str:00000000000000e0 .LASF143
     /tmp/ccJ3qHFz.s:3825   .debug_str:0000000000000168 .LASF144
     /tmp/ccJ3qHFz.s:3949   .debug_str:000000000000052f .LASF146
     /tmp/ccJ3qHFz.s:4043   .debug_str:0000000000000873 .LASF145
     /tmp/ccJ3qHFz.s:3859   .debug_str:0000000000000292 .LASF147
     /tmp/ccJ3qHFz.s:3873   .debug_str:000000000000031a .LASF148
     /tmp/ccJ3qHFz.s:3829   .debug_str:00000000000001a2 .LASF149
     /tmp/ccJ3qHFz.s:112    .text:0000000000000054 .LVL1
     /tmp/ccJ3qHFz.s:533    .text:00000000000001b4 .LVL26
     /tmp/ccJ3qHFz.s:555    .text:00000000000001bc .LVL28
     /tmp/ccJ3qHFz.s:584    .text:00000000000001e0 .LVL30
     /tmp/ccJ3qHFz.s:127    .text:0000000000000058 .LVL2
     /tmp/ccJ3qHFz.s:574    .text:00000000000001cc .LVL29
     /tmp/ccJ3qHFz.s:99     .text:0000000000000050 .LVL0
     /tmp/ccJ3qHFz.s:159    .text:0000000000000080 .LVL4
     /tmp/ccJ3qHFz.s:459    .text:000000000000017c .LVL18
     /tmp/ccJ3qHFz.s:154    .text:000000000000007c .LVL3
     /tmp/ccJ3qHFz.s:382    .text:00000000000000d8 .LVL5
     /tmp/ccJ3qHFz.s:498    .text:0000000000000194 .LVL21
     /tmp/ccJ3qHFz.s:619    .text:0000000000000204 .LVL34
     /tmp/ccJ3qHFz.s:645    .text:0000000000000218 .LVL37
     /tmp/ccJ3qHFz.s:664    .text:0000000000000230 .LVL40
GAS LISTING /tmp/ccJ3qHFz.s 			page 33


     /tmp/ccJ3qHFz.s:732    .text:0000000000000280 .LVL52
     /tmp/ccJ3qHFz.s:750    .text:0000000000000290 .LVL54
     /tmp/ccJ3qHFz.s:758    .text:000000000000029c .LVL56
     /tmp/ccJ3qHFz.s:808    .text:00000000000002cc .LVL63
     /tmp/ccJ3qHFz.s:835    .text:00000000000002e0 .LVL66
     /tmp/ccJ3qHFz.s:861    .text:00000000000002f4 .LVL69
     /tmp/ccJ3qHFz.s:510    .text:0000000000000198 .LVL22
     /tmp/ccJ3qHFz.s:525    .text:00000000000001b0 .LVL25
     /tmp/ccJ3qHFz.s:600    .text:00000000000001e4 .LVL31
     /tmp/ccJ3qHFz.s:633    .text:0000000000000210 .LVL36
     /tmp/ccJ3qHFz.s:677    .text:0000000000000234 .LVL41
     /tmp/ccJ3qHFz.s:683    .text:0000000000000238 .LVL42
     /tmp/ccJ3qHFz.s:689    .text:000000000000023c .LVL43
     /tmp/ccJ3qHFz.s:699    .text:0000000000000254 .LVL46
     /tmp/ccJ3qHFz.s:704    .text:000000000000025c .LVL47
     /tmp/ccJ3qHFz.s:710    .text:0000000000000268 .LVL49
     /tmp/ccJ3qHFz.s:716    .text:0000000000000270 .LVL50
     /tmp/ccJ3qHFz.s:726    .text:0000000000000278 .LVL51
     /tmp/ccJ3qHFz.s:770    .text:00000000000002a0 .LVL57
     /tmp/ccJ3qHFz.s:776    .text:00000000000002a4 .LVL58
     /tmp/ccJ3qHFz.s:786    .text:00000000000002b4 .LVL60
     /tmp/ccJ3qHFz.s:792    .text:00000000000002bc .LVL61
     /tmp/ccJ3qHFz.s:802    .text:00000000000002c4 .LVL62
     /tmp/ccJ3qHFz.s:820    .text:00000000000002d0 .LVL64
     /tmp/ccJ3qHFz.s:846    .text:00000000000002e4 .LVL67
     /tmp/ccJ3qHFz.s:872    .text:00000000000002f8 .LVL70
     /tmp/ccJ3qHFz.s:388    .text:00000000000000e0 .LVL6
     /tmp/ccJ3qHFz.s:406    .text:00000000000000ec .LVL7
     /tmp/ccJ3qHFz.s:542    .text:00000000000001b8 .LVL27
     /tmp/ccJ3qHFz.s:488    .text:0000000000000188 .LVL19
     /tmp/ccJ3qHFz.s:913    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccJ3qHFz.s:146    .text:0000000000000078 .LBB53
     /tmp/ccJ3qHFz.s:162    .text:0000000000000084 .LBE53
     /tmp/ccJ3qHFz.s:168    .text:0000000000000084 .LBB155
     /tmp/ccJ3qHFz.s:175    .text:000000000000008c .LBE155
     /tmp/ccJ3qHFz.s:181    .text:000000000000008c .LBB156
     /tmp/ccJ3qHFz.s:190    .text:0000000000000094 .LBE156
     /tmp/ccJ3qHFz.s:196    .text:0000000000000094 .LBB157
     /tmp/ccJ3qHFz.s:207    .text:000000000000009c .LBE157
     /tmp/ccJ3qHFz.s:213    .text:000000000000009c .LBB158
     /tmp/ccJ3qHFz.s:226    .text:00000000000000a4 .LBE158
     /tmp/ccJ3qHFz.s:232    .text:00000000000000a4 .LBB159
     /tmp/ccJ3qHFz.s:247    .text:00000000000000ac .LBE159
     /tmp/ccJ3qHFz.s:253    .text:00000000000000ac .LBB160
     /tmp/ccJ3qHFz.s:270    .text:00000000000000b4 .LBE160
     /tmp/ccJ3qHFz.s:276    .text:00000000000000b4 .LBB161
     /tmp/ccJ3qHFz.s:295    .text:00000000000000bc .LBE161
     /tmp/ccJ3qHFz.s:301    .text:00000000000000bc .LBB162
     /tmp/ccJ3qHFz.s:322    .text:00000000000000c4 .LBE162
     /tmp/ccJ3qHFz.s:328    .text:00000000000000c4 .LBB163
     /tmp/ccJ3qHFz.s:351    .text:00000000000000cc .LBE163
     /tmp/ccJ3qHFz.s:357    .text:00000000000000cc .LBB164
     /tmp/ccJ3qHFz.s:473    .text:000000000000017c .LBE164
     /tmp/ccJ3qHFz.s:500    .text:0000000000000194 .LBB165
     /tmp/ccJ3qHFz.s:560    .text:00000000000001bc .LBE165
     /tmp/ccJ3qHFz.s:589    .text:00000000000001e0 .LBB166
     /tmp/ccJ3qHFz.s:898    .text:0000000000000308 .LBE166
GAS LISTING /tmp/ccJ3qHFz.s 			page 34


     /tmp/ccJ3qHFz.s:761    .text:000000000000029c .LBB78
     /tmp/ccJ3qHFz.s:800    .text:00000000000002c0 .LBE78
     /tmp/ccJ3qHFz.s:804    .text:00000000000002c4 .LBB79
     /tmp/ccJ3qHFz.s:810    .text:00000000000002cc .LBE79
     /tmp/ccJ3qHFz.s:667    .text:0000000000000230 .LBB96
     /tmp/ccJ3qHFz.s:724    .text:0000000000000274 .LBE96
     /tmp/ccJ3qHFz.s:728    .text:0000000000000278 .LBB97
     /tmp/ccJ3qHFz.s:734    .text:0000000000000280 .LBE97

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z12printIntegerm
__getc
console_handler
_ZN15MemoryAllocator8InstanceEv
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN15MemoryAllocator19getLargestFreeBlockEv
_ZN3TCB12createThreadEPFvPvES0_Pm
_ZN3TCB4exitEv
_ZN3TCB8dispatchEv
_ZN3SEM4openEj
_ZN3SEM5closeEv
_ZN3SEM4waitEv
_ZN3SEM6signalEv
